/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(globalThis["webpackChunkExcalidrawLib"] = globalThis["webpackChunkExcalidrawLib"] || []).push([["vendor"],{

/***/ "../../../node_modules/pica/dist/pica.js":
/*!***********************************************!*\
  !*** ../../../node_modules/pica/dist/pica.js ***!
  \***********************************************/
/***/ ((module) => {

eval("/*!\r\n\r\npica\r\nhttps://github.com/nodeca/pica\r\n\r\n*/\r\n(function (f) { if (true) {\r\n    module.exports = f();\r\n}\r\nelse { var g; } })(function () {\r\n    var define, module, exports;\r\n    return (function () { function r(e, n, t) { function o(i, f) { if (!n[i]) {\r\n        if (!e[i]) {\r\n            var c = undefined;\r\n            if (!f && c)\r\n                return require(i, !0);\r\n            if (u)\r\n                return u(i, !0);\r\n            var a = new Error(\"Cannot find module '\" + i + \"'\");\r\n            throw a.code = \"MODULE_NOT_FOUND\", a;\r\n        }\r\n        var p = n[i] = { exports: {} };\r\n        e[i][0].call(p.exports, function (r) { var n = e[i][1][r]; return o(n || r); }, p, p.exports, r, e, n, t);\r\n    } return n[i].exports; } for (var u = undefined, i = 0; i < t.length; i++)\r\n        o(t[i]); return o; } return r; })()({ 1: [function (_dereq_, module, exports) {\r\n                // Collection of math functions\r\n                //\r\n                // 1. Combine components together\r\n                // 2. Has async init to load wasm modules\r\n                //\r\n                'use strict';\r\n                var inherits = _dereq_('inherits');\r\n                var Multimath = _dereq_('multimath');\r\n                var mm_unsharp_mask = _dereq_('./mm_unsharp_mask');\r\n                var mm_resize = _dereq_('./mm_resize');\r\n                function MathLib(requested_features) {\r\n                    var __requested_features = requested_features || [];\r\n                    var features = {\r\n                        js: __requested_features.indexOf('js') >= 0,\r\n                        wasm: __requested_features.indexOf('wasm') >= 0\r\n                    };\r\n                    Multimath.call(this, features);\r\n                    this.features = {\r\n                        js: features.js,\r\n                        wasm: features.wasm && this.has_wasm()\r\n                    };\r\n                    this.use(mm_unsharp_mask);\r\n                    this.use(mm_resize);\r\n                }\r\n                inherits(MathLib, Multimath);\r\n                MathLib.prototype.resizeAndUnsharp = function resizeAndUnsharp(options, cache) {\r\n                    var result = this.resize(options, cache);\r\n                    if (options.unsharpAmount) {\r\n                        this.unsharp_mask(result, options.toWidth, options.toHeight, options.unsharpAmount, options.unsharpRadius, options.unsharpThreshold);\r\n                    }\r\n                    return result;\r\n                };\r\n                module.exports = MathLib;\r\n            }, { \"./mm_resize\": 4, \"./mm_unsharp_mask\": 9, \"inherits\": 19, \"multimath\": 20 }], 2: [function (_dereq_, module, exports) {\r\n                // Resize convolvers, pure JS implementation\r\n                //\r\n                'use strict'; // Precision of fixed FP values\r\n                //var FIXED_FRAC_BITS = 14;\r\n                function clampTo8(i) {\r\n                    return i < 0 ? 0 : i > 255 ? 255 : i;\r\n                } // Convolve image in horizontal directions and transpose output. In theory,\r\n                // transpose allow:\r\n                //\r\n                // - use the same convolver for both passes (this fails due different\r\n                //   types of input array and temporary buffer)\r\n                // - making vertical pass by horisonltal lines inprove CPU cache use.\r\n                //\r\n                // But in real life this doesn't work :)\r\n                //\r\n                function convolveHorizontally(src, dest, srcW, srcH, destW, filters) {\r\n                    var r, g, b, a;\r\n                    var filterPtr, filterShift, filterSize;\r\n                    var srcPtr, srcY, destX, filterVal;\r\n                    var srcOffset = 0, destOffset = 0; // For each row\r\n                    for (srcY = 0; srcY < srcH; srcY++) {\r\n                        filterPtr = 0; // Apply precomputed filters to each destination row point\r\n                        for (destX = 0; destX < destW; destX++) {\r\n                            // Get the filter that determines the current output pixel.\r\n                            filterShift = filters[filterPtr++];\r\n                            filterSize = filters[filterPtr++];\r\n                            srcPtr = srcOffset + filterShift * 4 | 0;\r\n                            r = g = b = a = 0; // Apply the filter to the row to get the destination pixel r, g, b, a\r\n                            for (; filterSize > 0; filterSize--) {\r\n                                filterVal = filters[filterPtr++]; // Use reverse order to workaround deopts in old v8 (node v.10)\r\n                                // Big thanks to @mraleph (Vyacheslav Egorov) for the tip.\r\n                                a = a + filterVal * src[srcPtr + 3] | 0;\r\n                                b = b + filterVal * src[srcPtr + 2] | 0;\r\n                                g = g + filterVal * src[srcPtr + 1] | 0;\r\n                                r = r + filterVal * src[srcPtr] | 0;\r\n                                srcPtr = srcPtr + 4 | 0;\r\n                            } // Bring this value back in range. All of the filter scaling factors\r\n                            // are in fixed point with FIXED_FRAC_BITS bits of fractional part.\r\n                            //\r\n                            // (!) Add 1/2 of value before clamping to get proper rounding. In other\r\n                            // case brightness loss will be noticeable if you resize image with white\r\n                            // border and place it on white background.\r\n                            //\r\n                            dest[destOffset + 3] = clampTo8(a + (1 << 13) >> 14\r\n                            /*FIXED_FRAC_BITS*/\r\n                            );\r\n                            dest[destOffset + 2] = clampTo8(b + (1 << 13) >> 14\r\n                            /*FIXED_FRAC_BITS*/\r\n                            );\r\n                            dest[destOffset + 1] = clampTo8(g + (1 << 13) >> 14\r\n                            /*FIXED_FRAC_BITS*/\r\n                            );\r\n                            dest[destOffset] = clampTo8(r + (1 << 13) >> 14\r\n                            /*FIXED_FRAC_BITS*/\r\n                            );\r\n                            destOffset = destOffset + srcH * 4 | 0;\r\n                        }\r\n                        destOffset = (srcY + 1) * 4 | 0;\r\n                        srcOffset = (srcY + 1) * srcW * 4 | 0;\r\n                    }\r\n                } // Technically, convolvers are the same. But input array and temporary\r\n                // buffer can be of different type (especially, in old browsers). So,\r\n                // keep code in separate functions to avoid deoptimizations & speed loss.\r\n                function convolveVertically(src, dest, srcW, srcH, destW, filters) {\r\n                    var r, g, b, a;\r\n                    var filterPtr, filterShift, filterSize;\r\n                    var srcPtr, srcY, destX, filterVal;\r\n                    var srcOffset = 0, destOffset = 0; // For each row\r\n                    for (srcY = 0; srcY < srcH; srcY++) {\r\n                        filterPtr = 0; // Apply precomputed filters to each destination row point\r\n                        for (destX = 0; destX < destW; destX++) {\r\n                            // Get the filter that determines the current output pixel.\r\n                            filterShift = filters[filterPtr++];\r\n                            filterSize = filters[filterPtr++];\r\n                            srcPtr = srcOffset + filterShift * 4 | 0;\r\n                            r = g = b = a = 0; // Apply the filter to the row to get the destination pixel r, g, b, a\r\n                            for (; filterSize > 0; filterSize--) {\r\n                                filterVal = filters[filterPtr++]; // Use reverse order to workaround deopts in old v8 (node v.10)\r\n                                // Big thanks to @mraleph (Vyacheslav Egorov) for the tip.\r\n                                a = a + filterVal * src[srcPtr + 3] | 0;\r\n                                b = b + filterVal * src[srcPtr + 2] | 0;\r\n                                g = g + filterVal * src[srcPtr + 1] | 0;\r\n                                r = r + filterVal * src[srcPtr] | 0;\r\n                                srcPtr = srcPtr + 4 | 0;\r\n                            } // Bring this value back in range. All of the filter scaling factors\r\n                            // are in fixed point with FIXED_FRAC_BITS bits of fractional part.\r\n                            //\r\n                            // (!) Add 1/2 of value before clamping to get proper rounding. In other\r\n                            // case brightness loss will be noticeable if you resize image with white\r\n                            // border and place it on white background.\r\n                            //\r\n                            dest[destOffset + 3] = clampTo8(a + (1 << 13) >> 14\r\n                            /*FIXED_FRAC_BITS*/\r\n                            );\r\n                            dest[destOffset + 2] = clampTo8(b + (1 << 13) >> 14\r\n                            /*FIXED_FRAC_BITS*/\r\n                            );\r\n                            dest[destOffset + 1] = clampTo8(g + (1 << 13) >> 14\r\n                            /*FIXED_FRAC_BITS*/\r\n                            );\r\n                            dest[destOffset] = clampTo8(r + (1 << 13) >> 14\r\n                            /*FIXED_FRAC_BITS*/\r\n                            );\r\n                            destOffset = destOffset + srcH * 4 | 0;\r\n                        }\r\n                        destOffset = (srcY + 1) * 4 | 0;\r\n                        srcOffset = (srcY + 1) * srcW * 4 | 0;\r\n                    }\r\n                }\r\n                module.exports = {\r\n                    convolveHorizontally: convolveHorizontally,\r\n                    convolveVertically: convolveVertically\r\n                };\r\n            }, {}], 3: [function (_dereq_, module, exports) {\r\n                // This is autogenerated file from math.wasm, don't edit.\r\n                //\r\n                'use strict';\r\n                /* eslint-disable max-len */\r\n                module.exports = 'AGFzbQEAAAAADAZkeWxpbmsAAAAAAAEXA2AAAGAGf39/f39/AGAHf39/f39/fwACDwEDZW52Bm1lbW9yeQIAAAMEAwABAgYGAX8AQQALB1cFEV9fd2FzbV9jYWxsX2N0b3JzAAAIY29udm9sdmUAAQpjb252b2x2ZUhWAAIMX19kc29faGFuZGxlAwAYX193YXNtX2FwcGx5X2RhdGFfcmVsb2NzAAAK7AMDAwABC8YDAQ9/AkAgA0UNACAERQ0AA0AgDCENQQAhE0EAIQcDQCAHQQJqIQYCfyAHQQF0IAVqIgcuAQIiFEUEQEGAwAAhCEGAwAAhCUGAwAAhCkGAwAAhCyAGDAELIBIgBy4BAGohCEEAIQsgFCEHQQAhDiAGIQlBACEPQQAhEANAIAUgCUEBdGouAQAiESAAIAhBAnRqKAIAIgpBGHZsIBBqIRAgCkH/AXEgEWwgC2ohCyAKQRB2Qf8BcSARbCAPaiEPIApBCHZB/wFxIBFsIA5qIQ4gCEEBaiEIIAlBAWohCSAHQQFrIgcNAAsgC0GAQGshCCAOQYBAayEJIA9BgEBrIQogEEGAQGshCyAGIBRqCyEHIAEgDUECdGogCUEOdSIGQf8BIAZB/wFIGyIGQQAgBkEAShtBCHRBgP4DcSAKQQ51IgZB/wEgBkH/AUgbIgZBACAGQQBKG0EQdEGAgPwHcSALQQ51IgZB/wEgBkH/AUgbIgZBACAGQQBKG0EYdHJyIAhBDnUiBkH/ASAGQf8BSBsiBkEAIAZBAEobcjYCACADIA1qIQ0gE0EBaiITIARHDQALIAxBAWoiDCACbCESIAMgDEcNAAsLCx4AQQAgAiADIAQgBSAAEAEgAkEAIAQgBSAGIAEQAQs=';\r\n            }, {}], 4: [function (_dereq_, module, exports) {\r\n                'use strict';\r\n                module.exports = {\r\n                    name: 'resize',\r\n                    fn: _dereq_('./resize'),\r\n                    wasm_fn: _dereq_('./resize_wasm'),\r\n                    wasm_src: _dereq_('./convolve_wasm_base64')\r\n                };\r\n            }, { \"./convolve_wasm_base64\": 3, \"./resize\": 5, \"./resize_wasm\": 8 }], 5: [function (_dereq_, module, exports) {\r\n                'use strict';\r\n                var createFilters = _dereq_('./resize_filter_gen');\r\n                var convolveHorizontally = _dereq_('./convolve').convolveHorizontally;\r\n                var convolveVertically = _dereq_('./convolve').convolveVertically;\r\n                function resetAlpha(dst, width, height) {\r\n                    var ptr = 3, len = width * height * 4 | 0;\r\n                    while (ptr < len) {\r\n                        dst[ptr] = 0xFF;\r\n                        ptr = ptr + 4 | 0;\r\n                    }\r\n                }\r\n                module.exports = function resize(options) {\r\n                    var src = options.src;\r\n                    var srcW = options.width;\r\n                    var srcH = options.height;\r\n                    var destW = options.toWidth;\r\n                    var destH = options.toHeight;\r\n                    var scaleX = options.scaleX || options.toWidth / options.width;\r\n                    var scaleY = options.scaleY || options.toHeight / options.height;\r\n                    var offsetX = options.offsetX || 0;\r\n                    var offsetY = options.offsetY || 0;\r\n                    var dest = options.dest || new Uint8Array(destW * destH * 4);\r\n                    var quality = typeof options.quality === 'undefined' ? 3 : options.quality;\r\n                    var alpha = options.alpha || false;\r\n                    var filtersX = createFilters(quality, srcW, destW, scaleX, offsetX), filtersY = createFilters(quality, srcH, destH, scaleY, offsetY);\r\n                    var tmp = new Uint8Array(destW * srcH * 4); // To use single function we need src & tmp of the same type.\r\n                    // But src can be CanvasPixelArray, and tmp - Uint8Array. So, keep\r\n                    // vertical and horizontal passes separately to avoid deoptimization.\r\n                    convolveHorizontally(src, tmp, srcW, srcH, destW, filtersX);\r\n                    convolveVertically(tmp, dest, srcH, destW, destH, filtersY); // That's faster than doing checks in convolver.\r\n                    // !!! Note, canvas data is not premultipled. We don't need other\r\n                    // alpha corrections.\r\n                    if (!alpha)\r\n                        resetAlpha(dest, destW, destH);\r\n                    return dest;\r\n                };\r\n            }, { \"./convolve\": 2, \"./resize_filter_gen\": 6 }], 6: [function (_dereq_, module, exports) {\r\n                // Calculate convolution filters for each destination point,\r\n                // and pack data to Int16Array:\r\n                //\r\n                // [ shift, length, data..., shift2, length2, data..., ... ]\r\n                //\r\n                // - shift - offset in src image\r\n                // - length - filter length (in src points)\r\n                // - data - filter values sequence\r\n                //\r\n                'use strict';\r\n                var FILTER_INFO = _dereq_('./resize_filter_info'); // Precision of fixed FP values\r\n                var FIXED_FRAC_BITS = 14;\r\n                function toFixedPoint(num) {\r\n                    return Math.round(num * ((1 << FIXED_FRAC_BITS) - 1));\r\n                }\r\n                module.exports = function resizeFilterGen(quality, srcSize, destSize, scale, offset) {\r\n                    var filterFunction = FILTER_INFO[quality].filter;\r\n                    var scaleInverted = 1.0 / scale;\r\n                    var scaleClamped = Math.min(1.0, scale); // For upscale\r\n                    // Filter window (averaging interval), scaled to src image\r\n                    var srcWindow = FILTER_INFO[quality].win / scaleClamped;\r\n                    var destPixel, srcPixel, srcFirst, srcLast, filterElementSize, floatFilter, fxpFilter, total, pxl, idx, floatVal, filterTotal, filterVal;\r\n                    var leftNotEmpty, rightNotEmpty, filterShift, filterSize;\r\n                    var maxFilterElementSize = Math.floor((srcWindow + 1) * 2);\r\n                    var packedFilter = new Int16Array((maxFilterElementSize + 2) * destSize);\r\n                    var packedFilterPtr = 0;\r\n                    var slowCopy = !packedFilter.subarray || !packedFilter.set; // For each destination pixel calculate source range and built filter values\r\n                    for (destPixel = 0; destPixel < destSize; destPixel++) {\r\n                        // Scaling should be done relative to central pixel point\r\n                        srcPixel = (destPixel + 0.5) * scaleInverted + offset;\r\n                        srcFirst = Math.max(0, Math.floor(srcPixel - srcWindow));\r\n                        srcLast = Math.min(srcSize - 1, Math.ceil(srcPixel + srcWindow));\r\n                        filterElementSize = srcLast - srcFirst + 1;\r\n                        floatFilter = new Float32Array(filterElementSize);\r\n                        fxpFilter = new Int16Array(filterElementSize);\r\n                        total = 0.0; // Fill filter values for calculated range\r\n                        for (pxl = srcFirst, idx = 0; pxl <= srcLast; pxl++, idx++) {\r\n                            floatVal = filterFunction((pxl + 0.5 - srcPixel) * scaleClamped);\r\n                            total += floatVal;\r\n                            floatFilter[idx] = floatVal;\r\n                        } // Normalize filter, convert to fixed point and accumulate conversion error\r\n                        filterTotal = 0;\r\n                        for (idx = 0; idx < floatFilter.length; idx++) {\r\n                            filterVal = floatFilter[idx] / total;\r\n                            filterTotal += filterVal;\r\n                            fxpFilter[idx] = toFixedPoint(filterVal);\r\n                        } // Compensate normalization error, to minimize brightness drift\r\n                        fxpFilter[destSize >> 1] += toFixedPoint(1.0 - filterTotal); //\r\n                        // Now pack filter to useable form\r\n                        //\r\n                        // 1. Trim heading and tailing zero values, and compensate shitf/length\r\n                        // 2. Put all to single array in this format:\r\n                        //\r\n                        //    [ pos shift, data length, value1, value2, value3, ... ]\r\n                        //\r\n                        leftNotEmpty = 0;\r\n                        while (leftNotEmpty < fxpFilter.length && fxpFilter[leftNotEmpty] === 0) {\r\n                            leftNotEmpty++;\r\n                        }\r\n                        if (leftNotEmpty < fxpFilter.length) {\r\n                            rightNotEmpty = fxpFilter.length - 1;\r\n                            while (rightNotEmpty > 0 && fxpFilter[rightNotEmpty] === 0) {\r\n                                rightNotEmpty--;\r\n                            }\r\n                            filterShift = srcFirst + leftNotEmpty;\r\n                            filterSize = rightNotEmpty - leftNotEmpty + 1;\r\n                            packedFilter[packedFilterPtr++] = filterShift; // shift\r\n                            packedFilter[packedFilterPtr++] = filterSize; // size\r\n                            if (!slowCopy) {\r\n                                packedFilter.set(fxpFilter.subarray(leftNotEmpty, rightNotEmpty + 1), packedFilterPtr);\r\n                                packedFilterPtr += filterSize;\r\n                            }\r\n                            else {\r\n                                // fallback for old IE < 11, without subarray/set methods\r\n                                for (idx = leftNotEmpty; idx <= rightNotEmpty; idx++) {\r\n                                    packedFilter[packedFilterPtr++] = fxpFilter[idx];\r\n                                }\r\n                            }\r\n                        }\r\n                        else {\r\n                            // zero data, write header only\r\n                            packedFilter[packedFilterPtr++] = 0; // shift\r\n                            packedFilter[packedFilterPtr++] = 0; // size\r\n                        }\r\n                    }\r\n                    return packedFilter;\r\n                };\r\n            }, { \"./resize_filter_info\": 7 }], 7: [function (_dereq_, module, exports) {\r\n                // Filter definitions to build tables for\r\n                // resizing convolvers.\r\n                //\r\n                // Presets for quality 0..3. Filter functions + window size\r\n                //\r\n                'use strict';\r\n                module.exports = [{\r\n                        // Nearest neibor (Box)\r\n                        win: 0.5,\r\n                        filter: function filter(x) {\r\n                            return x >= -0.5 && x < 0.5 ? 1.0 : 0.0;\r\n                        }\r\n                    }, {\r\n                        // Hamming\r\n                        win: 1.0,\r\n                        filter: function filter(x) {\r\n                            if (x <= -1.0 || x >= 1.0) {\r\n                                return 0.0;\r\n                            }\r\n                            if (x > -1.19209290E-07 && x < 1.19209290E-07) {\r\n                                return 1.0;\r\n                            }\r\n                            var xpi = x * Math.PI;\r\n                            return Math.sin(xpi) / xpi * (0.54 + 0.46 * Math.cos(xpi / 1.0));\r\n                        }\r\n                    }, {\r\n                        // Lanczos, win = 2\r\n                        win: 2.0,\r\n                        filter: function filter(x) {\r\n                            if (x <= -2.0 || x >= 2.0) {\r\n                                return 0.0;\r\n                            }\r\n                            if (x > -1.19209290E-07 && x < 1.19209290E-07) {\r\n                                return 1.0;\r\n                            }\r\n                            var xpi = x * Math.PI;\r\n                            return Math.sin(xpi) / xpi * Math.sin(xpi / 2.0) / (xpi / 2.0);\r\n                        }\r\n                    }, {\r\n                        // Lanczos, win = 3\r\n                        win: 3.0,\r\n                        filter: function filter(x) {\r\n                            if (x <= -3.0 || x >= 3.0) {\r\n                                return 0.0;\r\n                            }\r\n                            if (x > -1.19209290E-07 && x < 1.19209290E-07) {\r\n                                return 1.0;\r\n                            }\r\n                            var xpi = x * Math.PI;\r\n                            return Math.sin(xpi) / xpi * Math.sin(xpi / 3.0) / (xpi / 3.0);\r\n                        }\r\n                    }];\r\n            }, {}], 8: [function (_dereq_, module, exports) {\r\n                'use strict';\r\n                var createFilters = _dereq_('./resize_filter_gen');\r\n                function resetAlpha(dst, width, height) {\r\n                    var ptr = 3, len = width * height * 4 | 0;\r\n                    while (ptr < len) {\r\n                        dst[ptr] = 0xFF;\r\n                        ptr = ptr + 4 | 0;\r\n                    }\r\n                }\r\n                function asUint8Array(src) {\r\n                    return new Uint8Array(src.buffer, 0, src.byteLength);\r\n                }\r\n                var IS_LE = true; // should not crash everything on module load in old browsers\r\n                try {\r\n                    IS_LE = new Uint32Array(new Uint8Array([1, 0, 0, 0]).buffer)[0] === 1;\r\n                }\r\n                catch (__) { }\r\n                function copyInt16asLE(src, target, target_offset) {\r\n                    if (IS_LE) {\r\n                        target.set(asUint8Array(src), target_offset);\r\n                        return;\r\n                    }\r\n                    for (var ptr = target_offset, i = 0; i < src.length; i++) {\r\n                        var data = src[i];\r\n                        target[ptr++] = data & 0xFF;\r\n                        target[ptr++] = data >> 8 & 0xFF;\r\n                    }\r\n                }\r\n                module.exports = function resize_wasm(options) {\r\n                    var src = options.src;\r\n                    var srcW = options.width;\r\n                    var srcH = options.height;\r\n                    var destW = options.toWidth;\r\n                    var destH = options.toHeight;\r\n                    var scaleX = options.scaleX || options.toWidth / options.width;\r\n                    var scaleY = options.scaleY || options.toHeight / options.height;\r\n                    var offsetX = options.offsetX || 0.0;\r\n                    var offsetY = options.offsetY || 0.0;\r\n                    var dest = options.dest || new Uint8Array(destW * destH * 4);\r\n                    var quality = typeof options.quality === 'undefined' ? 3 : options.quality;\r\n                    var alpha = options.alpha || false;\r\n                    var filtersX = createFilters(quality, srcW, destW, scaleX, offsetX), filtersY = createFilters(quality, srcH, destH, scaleY, offsetY); // destination is 0 too.\r\n                    var src_offset = 0; // buffer between convolve passes\r\n                    var tmp_offset = this.__align(src_offset + Math.max(src.byteLength, dest.byteLength));\r\n                    var filtersX_offset = this.__align(tmp_offset + srcH * destW * 4);\r\n                    var filtersY_offset = this.__align(filtersX_offset + filtersX.byteLength);\r\n                    var alloc_bytes = filtersY_offset + filtersY.byteLength;\r\n                    var instance = this.__instance('resize', alloc_bytes); //\r\n                    // Fill memory block with data to process\r\n                    //\r\n                    var mem = new Uint8Array(this.__memory.buffer);\r\n                    var mem32 = new Uint32Array(this.__memory.buffer); // 32-bit copy is much faster in chrome\r\n                    var src32 = new Uint32Array(src.buffer);\r\n                    mem32.set(src32); // We should guarantee LE bytes order. Filters are not big, so\r\n                    // speed difference is not significant vs direct .set()\r\n                    copyInt16asLE(filtersX, mem, filtersX_offset);\r\n                    copyInt16asLE(filtersY, mem, filtersY_offset); //\r\n                    // Now call webassembly method\r\n                    // emsdk does method names with '_'\r\n                    var fn = instance.exports.convolveHV || instance.exports._convolveHV;\r\n                    fn(filtersX_offset, filtersY_offset, tmp_offset, srcW, srcH, destW, destH); //\r\n                    // Copy data back to typed array\r\n                    //\r\n                    // 32-bit copy is much faster in chrome\r\n                    var dest32 = new Uint32Array(dest.buffer);\r\n                    dest32.set(new Uint32Array(this.__memory.buffer, 0, destH * destW)); // That's faster than doing checks in convolver.\r\n                    // !!! Note, canvas data is not premultipled. We don't need other\r\n                    // alpha corrections.\r\n                    if (!alpha)\r\n                        resetAlpha(dest, destW, destH);\r\n                    return dest;\r\n                };\r\n            }, { \"./resize_filter_gen\": 6 }], 9: [function (_dereq_, module, exports) {\r\n                'use strict';\r\n                module.exports = {\r\n                    name: 'unsharp_mask',\r\n                    fn: _dereq_('./unsharp_mask'),\r\n                    wasm_fn: _dereq_('./unsharp_mask_wasm'),\r\n                    wasm_src: _dereq_('./unsharp_mask_wasm_base64')\r\n                };\r\n            }, { \"./unsharp_mask\": 10, \"./unsharp_mask_wasm\": 11, \"./unsharp_mask_wasm_base64\": 12 }], 10: [function (_dereq_, module, exports) {\r\n                // Unsharp mask filter\r\n                //\r\n                // http://stackoverflow.com/a/23322820/1031804\r\n                // USM(O) = O + (2 * (Amount / 100) * (O - GB))\r\n                // GB - gaussian blur.\r\n                //\r\n                // Image is converted from RGB to HSV, unsharp mask is applied to the\r\n                // brightness channel and then image is converted back to RGB.\r\n                //\r\n                'use strict';\r\n                var glur_mono16 = _dereq_('glur/mono16');\r\n                function hsv_v16(img, width, height) {\r\n                    var size = width * height;\r\n                    var out = new Uint16Array(size);\r\n                    var r, g, b, max;\r\n                    for (var i = 0; i < size; i++) {\r\n                        r = img[4 * i];\r\n                        g = img[4 * i + 1];\r\n                        b = img[4 * i + 2];\r\n                        max = r >= g && r >= b ? r : g >= b && g >= r ? g : b;\r\n                        out[i] = max << 8;\r\n                    }\r\n                    return out;\r\n                }\r\n                module.exports = function unsharp(img, width, height, amount, radius, threshold) {\r\n                    var v1, v2, vmul;\r\n                    var diff, iTimes4;\r\n                    if (amount === 0 || radius < 0.5) {\r\n                        return;\r\n                    }\r\n                    if (radius > 2.0) {\r\n                        radius = 2.0;\r\n                    }\r\n                    var brightness = hsv_v16(img, width, height);\r\n                    var blured = new Uint16Array(brightness); // copy, because blur modify src\r\n                    glur_mono16(blured, width, height, radius);\r\n                    var amountFp = amount / 100 * 0x1000 + 0.5 | 0;\r\n                    var thresholdFp = threshold << 8;\r\n                    var size = width * height;\r\n                    /* eslint-disable indent */\r\n                    for (var i = 0; i < size; i++) {\r\n                        v1 = brightness[i];\r\n                        diff = v1 - blured[i];\r\n                        if (Math.abs(diff) >= thresholdFp) {\r\n                            // add unsharp mask to the brightness channel\r\n                            v2 = v1 + (amountFp * diff + 0x800 >> 12); // Both v1 and v2 are within [0.0 .. 255.0] (0000-FF00) range, never going into\r\n                            // [255.003 .. 255.996] (FF01-FFFF). This allows to round this value as (x+.5)|0\r\n                            // later without overflowing.\r\n                            v2 = v2 > 0xff00 ? 0xff00 : v2;\r\n                            v2 = v2 < 0x0000 ? 0x0000 : v2; // Avoid division by 0. V=0 means rgb(0,0,0), unsharp with unsharpAmount>0 cannot\r\n                            // change this value (because diff between colors gets inflated), so no need to verify correctness.\r\n                            v1 = v1 !== 0 ? v1 : 1; // Multiplying V in HSV model by a constant is equivalent to multiplying each component\r\n                            // in RGB by the same constant (same for HSL), see also:\r\n                            // https://beesbuzz.biz/code/16-hsv-color-transforms\r\n                            vmul = (v2 << 12) / v1 | 0; // Result will be in [0..255] range because:\r\n                            //  - all numbers are positive\r\n                            //  - r,g,b <= (v1/256)\r\n                            //  - r,g,b,(v1/256),(v2/256) <= 255\r\n                            // So highest this number can get is X*255/X+0.5=255.5 which is < 256 and rounds down.\r\n                            iTimes4 = i * 4;\r\n                            img[iTimes4] = img[iTimes4] * vmul + 0x800 >> 12; // R\r\n                            img[iTimes4 + 1] = img[iTimes4 + 1] * vmul + 0x800 >> 12; // G\r\n                            img[iTimes4 + 2] = img[iTimes4 + 2] * vmul + 0x800 >> 12; // B\r\n                        }\r\n                    }\r\n                };\r\n            }, { \"glur/mono16\": 18 }], 11: [function (_dereq_, module, exports) {\r\n                'use strict';\r\n                module.exports = function unsharp(img, width, height, amount, radius, threshold) {\r\n                    if (amount === 0 || radius < 0.5) {\r\n                        return;\r\n                    }\r\n                    if (radius > 2.0) {\r\n                        radius = 2.0;\r\n                    }\r\n                    var pixels = width * height;\r\n                    var img_bytes_cnt = pixels * 4;\r\n                    var hsv_bytes_cnt = pixels * 2;\r\n                    var blur_bytes_cnt = pixels * 2;\r\n                    var blur_line_byte_cnt = Math.max(width, height) * 4; // float32 array\r\n                    var blur_coeffs_byte_cnt = 8 * 4; // float32 array\r\n                    var img_offset = 0;\r\n                    var hsv_offset = img_bytes_cnt;\r\n                    var blur_offset = hsv_offset + hsv_bytes_cnt;\r\n                    var blur_tmp_offset = blur_offset + blur_bytes_cnt;\r\n                    var blur_line_offset = blur_tmp_offset + blur_bytes_cnt;\r\n                    var blur_coeffs_offset = blur_line_offset + blur_line_byte_cnt;\r\n                    var instance = this.__instance('unsharp_mask', img_bytes_cnt + hsv_bytes_cnt + blur_bytes_cnt * 2 + blur_line_byte_cnt + blur_coeffs_byte_cnt, {\r\n                        exp: Math.exp\r\n                    }); // 32-bit copy is much faster in chrome\r\n                    var img32 = new Uint32Array(img.buffer);\r\n                    var mem32 = new Uint32Array(this.__memory.buffer);\r\n                    mem32.set(img32); // HSL\r\n                    var fn = instance.exports.hsv_v16 || instance.exports._hsv_v16;\r\n                    fn(img_offset, hsv_offset, width, height); // BLUR\r\n                    fn = instance.exports.blurMono16 || instance.exports._blurMono16;\r\n                    fn(hsv_offset, blur_offset, blur_tmp_offset, blur_line_offset, blur_coeffs_offset, width, height, radius); // UNSHARP\r\n                    fn = instance.exports.unsharp || instance.exports._unsharp;\r\n                    fn(img_offset, img_offset, hsv_offset, blur_offset, width, height, amount, threshold); // 32-bit copy is much faster in chrome\r\n                    img32.set(new Uint32Array(this.__memory.buffer, 0, pixels));\r\n                };\r\n            }, {}], 12: [function (_dereq_, module, exports) {\r\n                // This is autogenerated file from math.wasm, don't edit.\r\n                //\r\n                'use strict';\r\n                /* eslint-disable max-len */\r\n                module.exports = 'AGFzbQEAAAAADAZkeWxpbmsAAAAAAAE0B2AAAGAEf39/fwBgBn9/f39/fwBgCH9/f39/f39/AGAIf39/f39/f30AYAJ9fwBgAXwBfAIZAgNlbnYDZXhwAAYDZW52Bm1lbW9yeQIAAAMHBgAFAgQBAwYGAX8AQQALB4oBCBFfX3dhc21fY2FsbF9jdG9ycwABFl9fYnVpbGRfZ2F1c3NpYW5fY29lZnMAAg5fX2dhdXNzMTZfbGluZQADCmJsdXJNb25vMTYABAdoc3ZfdjE2AAUHdW5zaGFycAAGDF9fZHNvX2hhbmRsZQMAGF9fd2FzbV9hcHBseV9kYXRhX3JlbG9jcwABCsUMBgMAAQvWAQEHfCABRNuGukOCGvs/IAC7oyICRAAAAAAAAADAohAAIgW2jDgCFCABIAKaEAAiAyADoCIGtjgCECABRAAAAAAAAPA/IAOhIgQgBKIgAyACIAKgokQAAAAAAADwP6AgBaGjIgS2OAIAIAEgBSAEmqIiB7Y4AgwgASADIAJEAAAAAAAA8D+gIASioiIItjgCCCABIAMgAkQAAAAAAADwv6AgBKKiIgK2OAIEIAEgByAIoCAFRAAAAAAAAPA/IAahoCIDo7Y4AhwgASAEIAKgIAOjtjgCGAuGBQMGfwl8An0gAyoCDCEVIAMqAgghFiADKgIUuyERIAMqAhC7IRACQCAEQQFrIghBAEgiCQRAIAIhByAAIQYMAQsgAiAALwEAuCIPIAMqAhi7oiIMIBGiIg0gDCAQoiAPIAMqAgS7IhOiIhQgAyoCALsiEiAPoqCgoCIOtjgCACACQQRqIQcgAEECaiEGIAhFDQAgCEEBIAhBAUgbIgpBf3MhCwJ/IAQgCmtBAXFFBEAgDiENIAgMAQsgAiANIA4gEKIgFCASIAAvAQK4Ig+ioKCgIg22OAIEIAJBCGohByAAQQRqIQYgDiEMIARBAmsLIQIgC0EAIARrRg0AA0AgByAMIBGiIA0gEKIgDyAToiASIAYvAQC4Ig6ioKCgIgy2OAIAIAcgDSARoiAMIBCiIA4gE6IgEiAGLwECuCIPoqCgoCINtjgCBCAHQQhqIQcgBkEEaiEGIAJBAkohACACQQJrIQIgAA0ACwsCQCAJDQAgASAFIAhsQQF0aiIAAn8gBkECay8BACICuCINIBW7IhKiIA0gFrsiE6KgIA0gAyoCHLuiIgwgEKKgIAwgEaKgIg8gB0EEayIHKgIAu6AiDkQAAAAAAADwQWMgDkQAAAAAAAAAAGZxBEAgDqsMAQtBAAs7AQAgCEUNACAGQQRrIQZBACAFa0EBdCEBA0ACfyANIBKiIAJB//8DcbgiDSAToqAgDyIOIBCioCAMIBGioCIPIAdBBGsiByoCALugIgxEAAAAAAAA8EFjIAxEAAAAAAAAAABmcQRAIAyrDAELQQALIQMgBi8BACECIAAgAWoiACADOwEAIAZBAmshBiAIQQFKIQMgDiEMIAhBAWshCCADDQALCwvRAgIBfwd8AkAgB0MAAAAAWw0AIARE24a6Q4Ia+z8gB0MAAAA/l7ujIglEAAAAAAAAAMCiEAAiDLaMOAIUIAQgCZoQACIKIAqgIg22OAIQIAREAAAAAAAA8D8gCqEiCyALoiAKIAkgCaCiRAAAAAAAAPA/oCAMoaMiC7Y4AgAgBCAMIAuaoiIOtjgCDCAEIAogCUQAAAAAAADwP6AgC6KiIg+2OAIIIAQgCiAJRAAAAAAAAPC/oCALoqIiCbY4AgQgBCAOIA+gIAxEAAAAAAAA8D8gDaGgIgqjtjgCHCAEIAsgCaAgCqO2OAIYIAYEQANAIAAgBSAIbEEBdGogAiAIQQF0aiADIAQgBSAGEAMgCEEBaiIIIAZHDQALCyAFRQ0AQQAhCANAIAIgBiAIbEEBdGogASAIQQF0aiADIAQgBiAFEAMgCEEBaiIIIAVHDQALCwtxAQN/IAIgA2wiBQRAA0AgASAAKAIAIgRBEHZB/wFxIgIgAiAEQQh2Qf8BcSIDIAMgBEH/AXEiBEkbIAIgA0sbIgYgBiAEIAIgBEsbIAMgBEsbQQh0OwEAIAFBAmohASAAQQRqIQAgBUEBayIFDQALCwuZAgIDfwF8IAQgBWwhBAJ/IAazQwAAgEWUQwAAyEKVu0QAAAAAAADgP6AiC5lEAAAAAAAA4EFjBEAgC6oMAQtBgICAgHgLIQUgBARAIAdBCHQhCUEAIQYDQCAJIAIgBkEBdCIHai8BACIBIAMgB2ovAQBrIgcgB0EfdSIIaiAIc00EQCAAIAZBAnQiCGoiCiAFIAdsQYAQakEMdSABaiIHQYD+AyAHQYD+A0gbIgdBACAHQQBKG0EMdCABQQEgARtuIgEgCi0AAGxBgBBqQQx2OgAAIAAgCEEBcmoiByABIActAABsQYAQakEMdjoAACAAIAhBAnJqIgcgASAHLQAAbEGAEGpBDHY6AAALIAZBAWoiBiAERw0ACwsL';\r\n            }, {}], 13: [function (_dereq_, module, exports) {\r\n                'use strict';\r\n                var GC_INTERVAL = 100;\r\n                function Pool(create, idle) {\r\n                    this.create = create;\r\n                    this.available = [];\r\n                    this.acquired = {};\r\n                    this.lastId = 1;\r\n                    this.timeoutId = 0;\r\n                    this.idle = idle || 2000;\r\n                }\r\n                Pool.prototype.acquire = function () {\r\n                    var _this = this;\r\n                    var resource;\r\n                    if (this.available.length !== 0) {\r\n                        resource = this.available.pop();\r\n                    }\r\n                    else {\r\n                        resource = this.create();\r\n                        resource.id = this.lastId++;\r\n                        resource.release = function () {\r\n                            return _this.release(resource);\r\n                        };\r\n                    }\r\n                    this.acquired[resource.id] = resource;\r\n                    return resource;\r\n                };\r\n                Pool.prototype.release = function (resource) {\r\n                    var _this2 = this;\r\n                    delete this.acquired[resource.id];\r\n                    resource.lastUsed = Date.now();\r\n                    this.available.push(resource);\r\n                    if (this.timeoutId === 0) {\r\n                        this.timeoutId = setTimeout(function () {\r\n                            return _this2.gc();\r\n                        }, GC_INTERVAL);\r\n                    }\r\n                };\r\n                Pool.prototype.gc = function () {\r\n                    var _this3 = this;\r\n                    var now = Date.now();\r\n                    this.available = this.available.filter(function (resource) {\r\n                        if (now - resource.lastUsed > _this3.idle) {\r\n                            resource.destroy();\r\n                            return false;\r\n                        }\r\n                        return true;\r\n                    });\r\n                    if (this.available.length !== 0) {\r\n                        this.timeoutId = setTimeout(function () {\r\n                            return _this3.gc();\r\n                        }, GC_INTERVAL);\r\n                    }\r\n                    else {\r\n                        this.timeoutId = 0;\r\n                    }\r\n                };\r\n                module.exports = Pool;\r\n            }, {}], 14: [function (_dereq_, module, exports) {\r\n                // Add intermediate resizing steps when scaling down by a very large factor.\r\n                //\r\n                // For example, when resizing 10000x10000 down to 10x10, it'll resize it to\r\n                // 300x300 first.\r\n                //\r\n                // It's needed because tiler has issues when the entire tile is scaled down\r\n                // to a few pixels (1024px source tile with border size 3 should result in\r\n                // at least 3+3+2 = 8px target tile, so max scale factor is 128 here).\r\n                //\r\n                // Also, adding intermediate steps can speed up processing if we use lower\r\n                // quality algorithms for first stages.\r\n                //\r\n                'use strict'; // min size = 0 results in infinite loop,\r\n                // min size = 1 can consume large amount of memory\r\n                var MIN_INNER_TILE_SIZE = 2;\r\n                module.exports = function createStages(fromWidth, fromHeight, toWidth, toHeight, srcTileSize, destTileBorder) {\r\n                    var scaleX = toWidth / fromWidth;\r\n                    var scaleY = toHeight / fromHeight; // derived from createRegions equation:\r\n                    // innerTileWidth = pixelFloor(srcTileSize * scaleX) - 2 * destTileBorder;\r\n                    var minScale = (2 * destTileBorder + MIN_INNER_TILE_SIZE + 1) / srcTileSize; // refuse to scale image multiple times by less than twice each time,\r\n                    // it could only happen because of invalid options\r\n                    if (minScale > 0.5)\r\n                        return [[toWidth, toHeight]];\r\n                    var stageCount = Math.ceil(Math.log(Math.min(scaleX, scaleY)) / Math.log(minScale)); // no additional resizes are necessary,\r\n                    // stageCount can be zero or be negative when enlarging the image\r\n                    if (stageCount <= 1)\r\n                        return [[toWidth, toHeight]];\r\n                    var result = [];\r\n                    for (var i = 0; i < stageCount; i++) {\r\n                        var width = Math.round(Math.pow(Math.pow(fromWidth, stageCount - i - 1) * Math.pow(toWidth, i + 1), 1 / stageCount));\r\n                        var height = Math.round(Math.pow(Math.pow(fromHeight, stageCount - i - 1) * Math.pow(toHeight, i + 1), 1 / stageCount));\r\n                        result.push([width, height]);\r\n                    }\r\n                    return result;\r\n                };\r\n            }, {}], 15: [function (_dereq_, module, exports) {\r\n                // Split original image into multiple 1024x1024 chunks to reduce memory usage\r\n                // (images have to be unpacked into typed arrays for resizing) and allow\r\n                // parallel processing of multiple tiles at a time.\r\n                //\r\n                'use strict';\r\n                /*\r\n                 * pixelFloor and pixelCeil are modified versions of Math.floor and Math.ceil\r\n                 * functions which take into account floating point arithmetic errors.\r\n                 * Those errors can cause undesired increments/decrements of sizes and offsets:\r\n                 * Math.ceil(36 / (36 / 500)) = 501\r\n                 * pixelCeil(36 / (36 / 500)) = 500\r\n                 */\r\n                var PIXEL_EPSILON = 1e-5;\r\n                function pixelFloor(x) {\r\n                    var nearest = Math.round(x);\r\n                    if (Math.abs(x - nearest) < PIXEL_EPSILON) {\r\n                        return nearest;\r\n                    }\r\n                    return Math.floor(x);\r\n                }\r\n                function pixelCeil(x) {\r\n                    var nearest = Math.round(x);\r\n                    if (Math.abs(x - nearest) < PIXEL_EPSILON) {\r\n                        return nearest;\r\n                    }\r\n                    return Math.ceil(x);\r\n                }\r\n                module.exports = function createRegions(options) {\r\n                    var scaleX = options.toWidth / options.width;\r\n                    var scaleY = options.toHeight / options.height;\r\n                    var innerTileWidth = pixelFloor(options.srcTileSize * scaleX) - 2 * options.destTileBorder;\r\n                    var innerTileHeight = pixelFloor(options.srcTileSize * scaleY) - 2 * options.destTileBorder; // prevent infinite loop, this should never happen\r\n                    if (innerTileWidth < 1 || innerTileHeight < 1) {\r\n                        throw new Error('Internal error in pica: target tile width/height is too small.');\r\n                    }\r\n                    var x, y;\r\n                    var innerX, innerY, toTileWidth, toTileHeight;\r\n                    var tiles = [];\r\n                    var tile; // we go top-to-down instead of left-to-right to make image displayed from top to\r\n                    // doesn in the browser\r\n                    for (innerY = 0; innerY < options.toHeight; innerY += innerTileHeight) {\r\n                        for (innerX = 0; innerX < options.toWidth; innerX += innerTileWidth) {\r\n                            x = innerX - options.destTileBorder;\r\n                            if (x < 0) {\r\n                                x = 0;\r\n                            }\r\n                            toTileWidth = innerX + innerTileWidth + options.destTileBorder - x;\r\n                            if (x + toTileWidth >= options.toWidth) {\r\n                                toTileWidth = options.toWidth - x;\r\n                            }\r\n                            y = innerY - options.destTileBorder;\r\n                            if (y < 0) {\r\n                                y = 0;\r\n                            }\r\n                            toTileHeight = innerY + innerTileHeight + options.destTileBorder - y;\r\n                            if (y + toTileHeight >= options.toHeight) {\r\n                                toTileHeight = options.toHeight - y;\r\n                            }\r\n                            tile = {\r\n                                toX: x,\r\n                                toY: y,\r\n                                toWidth: toTileWidth,\r\n                                toHeight: toTileHeight,\r\n                                toInnerX: innerX,\r\n                                toInnerY: innerY,\r\n                                toInnerWidth: innerTileWidth,\r\n                                toInnerHeight: innerTileHeight,\r\n                                offsetX: x / scaleX - pixelFloor(x / scaleX),\r\n                                offsetY: y / scaleY - pixelFloor(y / scaleY),\r\n                                scaleX: scaleX,\r\n                                scaleY: scaleY,\r\n                                x: pixelFloor(x / scaleX),\r\n                                y: pixelFloor(y / scaleY),\r\n                                width: pixelCeil(toTileWidth / scaleX),\r\n                                height: pixelCeil(toTileHeight / scaleY)\r\n                            };\r\n                            tiles.push(tile);\r\n                        }\r\n                    }\r\n                    return tiles;\r\n                };\r\n            }, {}], 16: [function (_dereq_, module, exports) {\r\n                'use strict';\r\n                function objClass(obj) {\r\n                    return Object.prototype.toString.call(obj);\r\n                }\r\n                module.exports.isCanvas = function isCanvas(element) {\r\n                    var cname = objClass(element);\r\n                    return cname === '[object HTMLCanvasElement]'\r\n                        /* browser */\r\n                        || cname === '[object OffscreenCanvas]' || cname === '[object Canvas]';\r\n                };\r\n                module.exports.isImage = function isImage(element) {\r\n                    return objClass(element) === '[object HTMLImageElement]';\r\n                };\r\n                module.exports.isImageBitmap = function isImageBitmap(element) {\r\n                    return objClass(element) === '[object ImageBitmap]';\r\n                };\r\n                module.exports.limiter = function limiter(concurrency) {\r\n                    var active = 0, queue = [];\r\n                    function roll() {\r\n                        if (active < concurrency && queue.length) {\r\n                            active++;\r\n                            queue.shift()();\r\n                        }\r\n                    }\r\n                    return function limit(fn) {\r\n                        return new Promise(function (resolve, reject) {\r\n                            queue.push(function () {\r\n                                fn().then(function (result) {\r\n                                    resolve(result);\r\n                                    active--;\r\n                                    roll();\r\n                                }, function (err) {\r\n                                    reject(err);\r\n                                    active--;\r\n                                    roll();\r\n                                });\r\n                            });\r\n                            roll();\r\n                        });\r\n                    };\r\n                };\r\n                module.exports.cib_quality_name = function cib_quality_name(num) {\r\n                    switch (num) {\r\n                        case 0:\r\n                            return 'pixelated';\r\n                        case 1:\r\n                            return 'low';\r\n                        case 2:\r\n                            return 'medium';\r\n                    }\r\n                    return 'high';\r\n                };\r\n                module.exports.cib_support = function cib_support(createCanvas) {\r\n                    return Promise.resolve().then(function () {\r\n                        if (typeof createImageBitmap === 'undefined') {\r\n                            return false;\r\n                        }\r\n                        var c = createCanvas(100, 100);\r\n                        return createImageBitmap(c, 0, 0, 100, 100, {\r\n                            resizeWidth: 10,\r\n                            resizeHeight: 10,\r\n                            resizeQuality: 'high'\r\n                        }).then(function (bitmap) {\r\n                            var status = bitmap.width === 10; // Branch below is filtered on upper level. We do not call resize\r\n                            // detection for basic ImageBitmap.\r\n                            //\r\n                            // https://developer.mozilla.org/en-US/docs/Web/API/ImageBitmap\r\n                            // old Crome 51 has ImageBitmap without .close(). Then this code\r\n                            // will throw and return 'false' as expected.\r\n                            //\r\n                            bitmap.close();\r\n                            c = null;\r\n                            return status;\r\n                        });\r\n                    })[\"catch\"](function () {\r\n                        return false;\r\n                    });\r\n                };\r\n                module.exports.worker_offscreen_canvas_support = function worker_offscreen_canvas_support() {\r\n                    return new Promise(function (resolve, reject) {\r\n                        if (typeof OffscreenCanvas === 'undefined') {\r\n                            // if OffscreenCanvas is present, we assume browser supports Worker and built-in Promise as well\r\n                            resolve(false);\r\n                            return;\r\n                        }\r\n                        function workerPayload(self) {\r\n                            if (typeof createImageBitmap === 'undefined') {\r\n                                self.postMessage(false);\r\n                                return;\r\n                            }\r\n                            Promise.resolve().then(function () {\r\n                                var canvas = new OffscreenCanvas(10, 10); // test that 2d context can be used in worker\r\n                                var ctx = canvas.getContext('2d');\r\n                                ctx.rect(0, 0, 1, 1); // test that cib can be used to return image bitmap from worker\r\n                                return createImageBitmap(canvas, 0, 0, 1, 1);\r\n                            }).then(function () {\r\n                                return self.postMessage(true);\r\n                            }, function () {\r\n                                return self.postMessage(false);\r\n                            });\r\n                        }\r\n                        var code = btoa(\"(\".concat(workerPayload.toString(), \")(self);\"));\r\n                        var w = new Worker(\"data:text/javascript;base64,\".concat(code));\r\n                        w.onmessage = function (ev) {\r\n                            return resolve(ev.data);\r\n                        };\r\n                        w.onerror = reject;\r\n                    }).then(function (result) {\r\n                        return result;\r\n                    }, function () {\r\n                        return false;\r\n                    });\r\n                }; // Check if canvas.getContext('2d').getImageData can be used,\r\n                // FireFox randomizes the output of that function in `privacy.resistFingerprinting` mode\r\n                module.exports.can_use_canvas = function can_use_canvas(createCanvas) {\r\n                    var usable = false;\r\n                    try {\r\n                        var canvas = createCanvas(2, 1);\r\n                        var ctx = canvas.getContext('2d');\r\n                        var d = ctx.createImageData(2, 1);\r\n                        d.data[0] = 12;\r\n                        d.data[1] = 23;\r\n                        d.data[2] = 34;\r\n                        d.data[3] = 255;\r\n                        d.data[4] = 45;\r\n                        d.data[5] = 56;\r\n                        d.data[6] = 67;\r\n                        d.data[7] = 255;\r\n                        ctx.putImageData(d, 0, 0);\r\n                        d = null;\r\n                        d = ctx.getImageData(0, 0, 2, 1);\r\n                        if (d.data[0] === 12 && d.data[1] === 23 && d.data[2] === 34 && d.data[3] === 255 && d.data[4] === 45 && d.data[5] === 56 && d.data[6] === 67 && d.data[7] === 255) {\r\n                            usable = true;\r\n                        }\r\n                    }\r\n                    catch (err) { }\r\n                    return usable;\r\n                }; // Check if createImageBitmap(img, sx, sy, sw, sh) signature works correctly\r\n                // with JPEG images oriented with Exif;\r\n                // https://bugs.chromium.org/p/chromium/issues/detail?id=1220671\r\n                // TODO: remove after it's fixed in chrome for at least 2 releases\r\n                module.exports.cib_can_use_region = function cib_can_use_region() {\r\n                    return new Promise(function (resolve) {\r\n                        if (typeof createImageBitmap === 'undefined') {\r\n                            resolve(false);\r\n                            return;\r\n                        }\r\n                        var image = new Image();\r\n                        image.src = 'data:image/jpeg;base64,' + '/9j/4QBiRXhpZgAATU0AKgAAAAgABQESAAMAAAABAAYAAAEaAAUAAAABAAAASgEbAAUAA' + 'AABAAAAUgEoAAMAAAABAAIAAAITAAMAAAABAAEAAAAAAAAAAABIAAAAAQAAAEgAAAAB/9' + 'sAQwAEAwMEAwMEBAMEBQQEBQYKBwYGBgYNCQoICg8NEBAPDQ8OERMYFBESFxIODxUcFRc' + 'ZGRsbGxAUHR8dGh8YGhsa/9sAQwEEBQUGBQYMBwcMGhEPERoaGhoaGhoaGhoaGhoaGhoa' + 'GhoaGhoaGhoaGhoaGhoaGhoaGhoaGhoaGhoaGhoaGhoa/8IAEQgAAQACAwERAAIRAQMRA' + 'f/EABQAAQAAAAAAAAAAAAAAAAAAAAf/xAAUAQEAAAAAAAAAAAAAAAAAAAAA/9oADAMBAA' + 'IQAxAAAAF/P//EABQQAQAAAAAAAAAAAAAAAAAAAAD/2gAIAQEAAQUCf//EABQRAQAAAAA' + 'AAAAAAAAAAAAAAAD/2gAIAQMBAT8Bf//EABQRAQAAAAAAAAAAAAAAAAAAAAD/2gAIAQIB' + 'AT8Bf//EABQQAQAAAAAAAAAAAAAAAAAAAAD/2gAIAQEABj8Cf//EABQQAQAAAAAAAAAAA' + 'AAAAAAAAAD/2gAIAQEAAT8hf//aAAwDAQACAAMAAAAQH//EABQRAQAAAAAAAAAAAAAAAA' + 'AAAAD/2gAIAQMBAT8Qf//EABQRAQAAAAAAAAAAAAAAAAAAAAD/2gAIAQIBAT8Qf//EABQ' + 'QAQAAAAAAAAAAAAAAAAAAAAD/2gAIAQEAAT8Qf//Z';\r\n                        image.onload = function () {\r\n                            createImageBitmap(image, 0, 0, image.width, image.height).then(function (bitmap) {\r\n                                if (bitmap.width === image.width && bitmap.height === image.height) {\r\n                                    resolve(true);\r\n                                }\r\n                                else {\r\n                                    resolve(false);\r\n                                }\r\n                            }, function () {\r\n                                return resolve(false);\r\n                            });\r\n                        };\r\n                        image.onerror = function () {\r\n                            return resolve(false);\r\n                        };\r\n                    });\r\n                };\r\n            }, {}], 17: [function (_dereq_, module, exports) {\r\n                // Web Worker wrapper for image resize function\r\n                'use strict';\r\n                module.exports = function () {\r\n                    var MathLib = _dereq_('./mathlib');\r\n                    var mathLib;\r\n                    /* eslint-disable no-undef */\r\n                    onmessage = function onmessage(ev) {\r\n                        var tileOpts = ev.data.opts;\r\n                        var returnBitmap = false;\r\n                        if (!tileOpts.src && tileOpts.srcBitmap) {\r\n                            var canvas = new OffscreenCanvas(tileOpts.width, tileOpts.height);\r\n                            var ctx = canvas.getContext('2d', {\r\n                                alpha: Boolean(tileOpts.alpha)\r\n                            });\r\n                            ctx.drawImage(tileOpts.srcBitmap, 0, 0);\r\n                            tileOpts.src = ctx.getImageData(0, 0, tileOpts.width, tileOpts.height).data;\r\n                            canvas.width = canvas.height = 0;\r\n                            canvas = null;\r\n                            tileOpts.srcBitmap.close();\r\n                            tileOpts.srcBitmap = null;\r\n                            returnBitmap = true;\r\n                        }\r\n                        if (!mathLib)\r\n                            mathLib = new MathLib(ev.data.features); // Use multimath's sync auto-init. Avoid Promise use in old browsers,\r\n                        // because polyfills are not propagated to webworker.\r\n                        var data = mathLib.resizeAndUnsharp(tileOpts);\r\n                        if (returnBitmap) {\r\n                            var toImageData = new ImageData(new Uint8ClampedArray(data), tileOpts.toWidth, tileOpts.toHeight);\r\n                            var _canvas = new OffscreenCanvas(tileOpts.toWidth, tileOpts.toHeight);\r\n                            var _ctx = _canvas.getContext('2d', {\r\n                                alpha: Boolean(tileOpts.alpha)\r\n                            });\r\n                            _ctx.putImageData(toImageData, 0, 0);\r\n                            createImageBitmap(_canvas).then(function (bitmap) {\r\n                                postMessage({\r\n                                    bitmap: bitmap\r\n                                }, [bitmap]);\r\n                            });\r\n                        }\r\n                        else {\r\n                            postMessage({\r\n                                data: data\r\n                            }, [data.buffer]);\r\n                        }\r\n                    };\r\n                };\r\n            }, { \"./mathlib\": 1 }], 18: [function (_dereq_, module, exports) {\r\n                // Calculate Gaussian blur of an image using IIR filter\r\n                // The method is taken from Intel's white paper and code example attached to it:\r\n                // https://software.intel.com/en-us/articles/iir-gaussian-blur-filter\r\n                // -implementation-using-intel-advanced-vector-extensions\r\n                var a0, a1, a2, a3, b1, b2, left_corner, right_corner;\r\n                function gaussCoef(sigma) {\r\n                    if (sigma < 0.5) {\r\n                        sigma = 0.5;\r\n                    }\r\n                    var a = Math.exp(0.726 * 0.726) / sigma, g1 = Math.exp(-a), g2 = Math.exp(-2 * a), k = (1 - g1) * (1 - g1) / (1 + 2 * a * g1 - g2);\r\n                    a0 = k;\r\n                    a1 = k * (a - 1) * g1;\r\n                    a2 = k * (a + 1) * g1;\r\n                    a3 = -k * g2;\r\n                    b1 = 2 * g1;\r\n                    b2 = -g2;\r\n                    left_corner = (a0 + a1) / (1 - b1 - b2);\r\n                    right_corner = (a2 + a3) / (1 - b1 - b2);\r\n                    // Attempt to force type to FP32.\r\n                    return new Float32Array([a0, a1, a2, a3, b1, b2, left_corner, right_corner]);\r\n                }\r\n                function convolveMono16(src, out, line, coeff, width, height) {\r\n                    // takes src image and writes the blurred and transposed result into out\r\n                    var prev_src, curr_src, curr_out, prev_out, prev_prev_out;\r\n                    var src_index, out_index, line_index;\r\n                    var i, j;\r\n                    var coeff_a0, coeff_a1, coeff_b1, coeff_b2;\r\n                    for (i = 0; i < height; i++) {\r\n                        src_index = i * width;\r\n                        out_index = i;\r\n                        line_index = 0;\r\n                        // left to right\r\n                        prev_src = src[src_index];\r\n                        prev_prev_out = prev_src * coeff[6];\r\n                        prev_out = prev_prev_out;\r\n                        coeff_a0 = coeff[0];\r\n                        coeff_a1 = coeff[1];\r\n                        coeff_b1 = coeff[4];\r\n                        coeff_b2 = coeff[5];\r\n                        for (j = 0; j < width; j++) {\r\n                            curr_src = src[src_index];\r\n                            curr_out = curr_src * coeff_a0 +\r\n                                prev_src * coeff_a1 +\r\n                                prev_out * coeff_b1 +\r\n                                prev_prev_out * coeff_b2;\r\n                            prev_prev_out = prev_out;\r\n                            prev_out = curr_out;\r\n                            prev_src = curr_src;\r\n                            line[line_index] = prev_out;\r\n                            line_index++;\r\n                            src_index++;\r\n                        }\r\n                        src_index--;\r\n                        line_index--;\r\n                        out_index += height * (width - 1);\r\n                        // right to left\r\n                        prev_src = src[src_index];\r\n                        prev_prev_out = prev_src * coeff[7];\r\n                        prev_out = prev_prev_out;\r\n                        curr_src = prev_src;\r\n                        coeff_a0 = coeff[2];\r\n                        coeff_a1 = coeff[3];\r\n                        for (j = width - 1; j >= 0; j--) {\r\n                            curr_out = curr_src * coeff_a0 +\r\n                                prev_src * coeff_a1 +\r\n                                prev_out * coeff_b1 +\r\n                                prev_prev_out * coeff_b2;\r\n                            prev_prev_out = prev_out;\r\n                            prev_out = curr_out;\r\n                            prev_src = curr_src;\r\n                            curr_src = src[src_index];\r\n                            out[out_index] = line[line_index] + prev_out;\r\n                            src_index--;\r\n                            line_index--;\r\n                            out_index -= height;\r\n                        }\r\n                    }\r\n                }\r\n                function blurMono16(src, width, height, radius) {\r\n                    // Quick exit on zero radius\r\n                    if (!radius) {\r\n                        return;\r\n                    }\r\n                    var out = new Uint16Array(src.length), tmp_line = new Float32Array(Math.max(width, height));\r\n                    var coeff = gaussCoef(radius);\r\n                    convolveMono16(src, out, tmp_line, coeff, width, height, radius);\r\n                    convolveMono16(out, src, tmp_line, coeff, height, width, radius);\r\n                }\r\n                module.exports = blurMono16;\r\n            }, {}], 19: [function (_dereq_, module, exports) {\r\n                if (typeof Object.create === 'function') {\r\n                    // implementation from standard node.js 'util' module\r\n                    module.exports = function inherits(ctor, superCtor) {\r\n                        if (superCtor) {\r\n                            ctor.super_ = superCtor;\r\n                            ctor.prototype = Object.create(superCtor.prototype, {\r\n                                constructor: {\r\n                                    value: ctor,\r\n                                    enumerable: false,\r\n                                    writable: true,\r\n                                    configurable: true\r\n                                }\r\n                            });\r\n                        }\r\n                    };\r\n                }\r\n                else {\r\n                    // old school shim for old browsers\r\n                    module.exports = function inherits(ctor, superCtor) {\r\n                        if (superCtor) {\r\n                            ctor.super_ = superCtor;\r\n                            var TempCtor = function () { };\r\n                            TempCtor.prototype = superCtor.prototype;\r\n                            ctor.prototype = new TempCtor();\r\n                            ctor.prototype.constructor = ctor;\r\n                        }\r\n                    };\r\n                }\r\n            }, {}], 20: [function (_dereq_, module, exports) {\r\n                'use strict';\r\n                var assign = _dereq_('object-assign');\r\n                var base64decode = _dereq_('./lib/base64decode');\r\n                var hasWebAssembly = _dereq_('./lib/wa_detect');\r\n                var DEFAULT_OPTIONS = {\r\n                    js: true,\r\n                    wasm: true\r\n                };\r\n                function MultiMath(options) {\r\n                    if (!(this instanceof MultiMath))\r\n                        return new MultiMath(options);\r\n                    var opts = assign({}, DEFAULT_OPTIONS, options || {});\r\n                    this.options = opts;\r\n                    this.__cache = {};\r\n                    this.__init_promise = null;\r\n                    this.__modules = opts.modules || {};\r\n                    this.__memory = null;\r\n                    this.__wasm = {};\r\n                    this.__isLE = ((new Uint32Array((new Uint8Array([1, 0, 0, 0])).buffer))[0] === 1);\r\n                    if (!this.options.js && !this.options.wasm) {\r\n                        throw new Error('mathlib: at least \"js\" or \"wasm\" should be enabled');\r\n                    }\r\n                }\r\n                MultiMath.prototype.has_wasm = hasWebAssembly;\r\n                MultiMath.prototype.use = function (module) {\r\n                    this.__modules[module.name] = module;\r\n                    // Pin the best possible implementation\r\n                    if (this.options.wasm && this.has_wasm() && module.wasm_fn) {\r\n                        this[module.name] = module.wasm_fn;\r\n                    }\r\n                    else {\r\n                        this[module.name] = module.fn;\r\n                    }\r\n                    return this;\r\n                };\r\n                MultiMath.prototype.init = function () {\r\n                    if (this.__init_promise)\r\n                        return this.__init_promise;\r\n                    if (!this.options.js && this.options.wasm && !this.has_wasm()) {\r\n                        return Promise.reject(new Error('mathlib: only \"wasm\" was enabled, but it\\'s not supported'));\r\n                    }\r\n                    var self = this;\r\n                    this.__init_promise = Promise.all(Object.keys(self.__modules).map(function (name) {\r\n                        var module = self.__modules[name];\r\n                        if (!self.options.wasm || !self.has_wasm() || !module.wasm_fn)\r\n                            return null;\r\n                        // If already compiled - exit\r\n                        if (self.__wasm[name])\r\n                            return null;\r\n                        // Compile wasm source\r\n                        return WebAssembly.compile(self.__base64decode(module.wasm_src))\r\n                            .then(function (m) { self.__wasm[name] = m; });\r\n                    }))\r\n                        .then(function () { return self; });\r\n                    return this.__init_promise;\r\n                };\r\n                ////////////////////////////////////////////////////////////////////////////////\r\n                // Methods below are for internal use from plugins\r\n                // Simple decode base64 to typed array. Useful to load embedded webassembly\r\n                // code. You probably don't need to call this method directly.\r\n                //\r\n                MultiMath.prototype.__base64decode = base64decode;\r\n                // Increase current memory to include specified number of bytes. Do nothing if\r\n                // size is already ok. You probably don't need to call this method directly,\r\n                // because it will be invoked from `.__instance()`.\r\n                //\r\n                MultiMath.prototype.__reallocate = function mem_grow_to(bytes) {\r\n                    if (!this.__memory) {\r\n                        this.__memory = new WebAssembly.Memory({\r\n                            initial: Math.ceil(bytes / (64 * 1024))\r\n                        });\r\n                        return this.__memory;\r\n                    }\r\n                    var mem_size = this.__memory.buffer.byteLength;\r\n                    if (mem_size < bytes) {\r\n                        this.__memory.grow(Math.ceil((bytes - mem_size) / (64 * 1024)));\r\n                    }\r\n                    return this.__memory;\r\n                };\r\n                // Returns instantinated webassembly item by name, with specified memory size\r\n                // and environment.\r\n                // - use cache if available\r\n                // - do sync module init, if async init was not called earlier\r\n                // - allocate memory if not enougth\r\n                // - can export functions to webassembly via \"env_extra\",\r\n                //   for example, { exp: Math.exp }\r\n                //\r\n                MultiMath.prototype.__instance = function instance(name, memsize, env_extra) {\r\n                    if (memsize)\r\n                        this.__reallocate(memsize);\r\n                    // If .init() was not called, do sync compile\r\n                    if (!this.__wasm[name]) {\r\n                        var module = this.__modules[name];\r\n                        this.__wasm[name] = new WebAssembly.Module(this.__base64decode(module.wasm_src));\r\n                    }\r\n                    if (!this.__cache[name]) {\r\n                        var env_base = {\r\n                            memoryBase: 0,\r\n                            memory: this.__memory,\r\n                            tableBase: 0,\r\n                            table: new WebAssembly.Table({ initial: 0, element: 'anyfunc' })\r\n                        };\r\n                        this.__cache[name] = new WebAssembly.Instance(this.__wasm[name], {\r\n                            env: assign(env_base, env_extra || {})\r\n                        });\r\n                    }\r\n                    return this.__cache[name];\r\n                };\r\n                // Helper to calculate memory aligh for pointers. Webassembly does not require\r\n                // this, but you may wish to experiment. Default base = 8;\r\n                //\r\n                MultiMath.prototype.__align = function align(number, base) {\r\n                    base = base || 8;\r\n                    var reminder = number % base;\r\n                    return number + (reminder ? base - reminder : 0);\r\n                };\r\n                module.exports = MultiMath;\r\n            }, { \"./lib/base64decode\": 21, \"./lib/wa_detect\": 22, \"object-assign\": 23 }], 21: [function (_dereq_, module, exports) {\r\n                // base64 decode str -> Uint8Array, to load WA modules\r\n                //\r\n                'use strict';\r\n                var BASE64_MAP = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\r\n                module.exports = function base64decode(str) {\r\n                    var input = str.replace(/[\\r\\n=]/g, ''), // remove CR/LF & padding to simplify scan\r\n                    max = input.length;\r\n                    var out = new Uint8Array((max * 3) >> 2);\r\n                    // Collect by 6*4 bits (3 bytes)\r\n                    var bits = 0;\r\n                    var ptr = 0;\r\n                    for (var idx = 0; idx < max; idx++) {\r\n                        if ((idx % 4 === 0) && idx) {\r\n                            out[ptr++] = (bits >> 16) & 0xFF;\r\n                            out[ptr++] = (bits >> 8) & 0xFF;\r\n                            out[ptr++] = bits & 0xFF;\r\n                        }\r\n                        bits = (bits << 6) | BASE64_MAP.indexOf(input.charAt(idx));\r\n                    }\r\n                    // Dump tail\r\n                    var tailbits = (max % 4) * 6;\r\n                    if (tailbits === 0) {\r\n                        out[ptr++] = (bits >> 16) & 0xFF;\r\n                        out[ptr++] = (bits >> 8) & 0xFF;\r\n                        out[ptr++] = bits & 0xFF;\r\n                    }\r\n                    else if (tailbits === 18) {\r\n                        out[ptr++] = (bits >> 10) & 0xFF;\r\n                        out[ptr++] = (bits >> 2) & 0xFF;\r\n                    }\r\n                    else if (tailbits === 12) {\r\n                        out[ptr++] = (bits >> 4) & 0xFF;\r\n                    }\r\n                    return out;\r\n                };\r\n            }, {}], 22: [function (_dereq_, module, exports) {\r\n                // Detect WebAssembly support.\r\n                // - Check global WebAssembly object\r\n                // - Try to load simple module (can be disabled via CSP)\r\n                //\r\n                'use strict';\r\n                var wa;\r\n                module.exports = function hasWebAssembly() {\r\n                    // use cache if called before;\r\n                    if (typeof wa !== 'undefined')\r\n                        return wa;\r\n                    wa = false;\r\n                    if (typeof WebAssembly === 'undefined')\r\n                        return wa;\r\n                    // If WebAssenbly is disabled, code can throw on compile\r\n                    try {\r\n                        // https://github.com/brion/min-wasm-fail/blob/master/min-wasm-fail.in.js\r\n                        // Additional check that WA internals are correct\r\n                        /* eslint-disable comma-spacing, max-len */\r\n                        var bin = new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 6, 1, 96, 1, 127, 1, 127, 3, 2, 1, 0, 5, 3, 1, 0, 1, 7, 8, 1, 4, 116, 101, 115, 116, 0, 0, 10, 16, 1, 14, 0, 32, 0, 65, 1, 54, 2, 0, 32, 0, 40, 2, 0, 11]);\r\n                        var module = new WebAssembly.Module(bin);\r\n                        var instance = new WebAssembly.Instance(module, {});\r\n                        // test storing to and loading from a non-zero location via a parameter.\r\n                        // Safari on iOS 11.2.5 returns 0 unexpectedly at non-zero locations\r\n                        if (instance.exports.test(4) !== 0)\r\n                            wa = true;\r\n                        return wa;\r\n                    }\r\n                    catch (__) { }\r\n                    return wa;\r\n                };\r\n            }, {}], 23: [function (_dereq_, module, exports) {\r\n                /*\r\n                object-assign\r\n                (c) Sindre Sorhus\r\n                @license MIT\r\n                */\r\n                'use strict';\r\n                /* eslint-disable no-unused-vars */\r\n                var getOwnPropertySymbols = Object.getOwnPropertySymbols;\r\n                var hasOwnProperty = Object.prototype.hasOwnProperty;\r\n                var propIsEnumerable = Object.prototype.propertyIsEnumerable;\r\n                function toObject(val) {\r\n                    if (val === null || val === undefined) {\r\n                        throw new TypeError('Object.assign cannot be called with null or undefined');\r\n                    }\r\n                    return Object(val);\r\n                }\r\n                function shouldUseNative() {\r\n                    try {\r\n                        if (!Object.assign) {\r\n                            return false;\r\n                        }\r\n                        // Detect buggy property enumeration order in older V8 versions.\r\n                        // https://bugs.chromium.org/p/v8/issues/detail?id=4118\r\n                        var test1 = new String('abc'); // eslint-disable-line no-new-wrappers\r\n                        test1[5] = 'de';\r\n                        if (Object.getOwnPropertyNames(test1)[0] === '5') {\r\n                            return false;\r\n                        }\r\n                        // https://bugs.chromium.org/p/v8/issues/detail?id=3056\r\n                        var test2 = {};\r\n                        for (var i = 0; i < 10; i++) {\r\n                            test2['_' + String.fromCharCode(i)] = i;\r\n                        }\r\n                        var order2 = Object.getOwnPropertyNames(test2).map(function (n) {\r\n                            return test2[n];\r\n                        });\r\n                        if (order2.join('') !== '0123456789') {\r\n                            return false;\r\n                        }\r\n                        // https://bugs.chromium.org/p/v8/issues/detail?id=3056\r\n                        var test3 = {};\r\n                        'abcdefghijklmnopqrst'.split('').forEach(function (letter) {\r\n                            test3[letter] = letter;\r\n                        });\r\n                        if (Object.keys(Object.assign({}, test3)).join('') !==\r\n                            'abcdefghijklmnopqrst') {\r\n                            return false;\r\n                        }\r\n                        return true;\r\n                    }\r\n                    catch (err) {\r\n                        // We don't expect any of the above to throw, but better to be safe.\r\n                        return false;\r\n                    }\r\n                }\r\n                module.exports = shouldUseNative() ? Object.assign : function (target, source) {\r\n                    var from;\r\n                    var to = toObject(target);\r\n                    var symbols;\r\n                    for (var s = 1; s < arguments.length; s++) {\r\n                        from = Object(arguments[s]);\r\n                        for (var key in from) {\r\n                            if (hasOwnProperty.call(from, key)) {\r\n                                to[key] = from[key];\r\n                            }\r\n                        }\r\n                        if (getOwnPropertySymbols) {\r\n                            symbols = getOwnPropertySymbols(from);\r\n                            for (var i = 0; i < symbols.length; i++) {\r\n                                if (propIsEnumerable.call(from, symbols[i])) {\r\n                                    to[symbols[i]] = from[symbols[i]];\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    return to;\r\n                };\r\n            }, {}], 24: [function (_dereq_, module, exports) {\r\n                var bundleFn = arguments[3];\r\n                var sources = arguments[4];\r\n                var cache = arguments[5];\r\n                var stringify = JSON.stringify;\r\n                module.exports = function (fn, options) {\r\n                    var wkey;\r\n                    var cacheKeys = Object.keys(cache);\r\n                    for (var i = 0, l = cacheKeys.length; i < l; i++) {\r\n                        var key = cacheKeys[i];\r\n                        var exp = cache[key].exports;\r\n                        // Using babel as a transpiler to use esmodule, the export will always\r\n                        // be an object with the default export as a property of it. To ensure\r\n                        // the existing api and babel esmodule exports are both supported we\r\n                        // check for both\r\n                        if (exp === fn || exp && exp.default === fn) {\r\n                            wkey = key;\r\n                            break;\r\n                        }\r\n                    }\r\n                    if (!wkey) {\r\n                        wkey = Math.floor(Math.pow(16, 8) * Math.random()).toString(16);\r\n                        var wcache = {};\r\n                        for (var i = 0, l = cacheKeys.length; i < l; i++) {\r\n                            var key = cacheKeys[i];\r\n                            wcache[key] = key;\r\n                        }\r\n                        sources[wkey] = [\r\n                            'function(require,module,exports){' + fn + '(self); }',\r\n                            wcache\r\n                        ];\r\n                    }\r\n                    var skey = Math.floor(Math.pow(16, 8) * Math.random()).toString(16);\r\n                    var scache = {};\r\n                    scache[wkey] = wkey;\r\n                    sources[skey] = [\r\n                        'function(require,module,exports){' +\r\n                            // try to call default if defined to also support babel esmodule exports\r\n                            'var f = require(' + stringify(wkey) + ');' +\r\n                            '(f.default ? f.default : f)(self);' +\r\n                            '}',\r\n                        scache\r\n                    ];\r\n                    var workerSources = {};\r\n                    resolveSources(skey);\r\n                    function resolveSources(key) {\r\n                        workerSources[key] = true;\r\n                        for (var depPath in sources[key][1]) {\r\n                            var depKey = sources[key][1][depPath];\r\n                            if (!workerSources[depKey]) {\r\n                                resolveSources(depKey);\r\n                            }\r\n                        }\r\n                    }\r\n                    var src = '(' + bundleFn + ')({'\r\n                        + Object.keys(workerSources).map(function (key) {\r\n                            return stringify(key) + ':['\r\n                                + sources[key][0]\r\n                                + ',' + stringify(sources[key][1]) + ']';\r\n                        }).join(',')\r\n                        + '},{},[' + stringify(skey) + '])';\r\n                    var URL = window.URL || window.webkitURL || window.mozURL || window.msURL;\r\n                    var blob = new Blob([src], { type: 'text/javascript' });\r\n                    if (options && options.bare) {\r\n                        return blob;\r\n                    }\r\n                    var workerUrl = URL.createObjectURL(blob);\r\n                    var worker = new Worker(workerUrl);\r\n                    worker.objectURL = workerUrl;\r\n                    return worker;\r\n                };\r\n            }, {}], \"/index.js\": [function (_dereq_, module, exports) {\r\n                'use strict';\r\n                function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\r\n                function _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\r\n                function _unsupportedIterableToArray(o, minLen) { if (!o)\r\n                    return; if (typeof o === \"string\")\r\n                    return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor)\r\n                    n = o.constructor.name; if (n === \"Map\" || n === \"Set\")\r\n                    return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))\r\n                    return _arrayLikeToArray(o, minLen); }\r\n                function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length)\r\n                    len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) {\r\n                    arr2[i] = arr[i];\r\n                } return arr2; }\r\n                function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null)\r\n                    return; var _arr = []; var _n = true; var _d = false; var _s, _e; try {\r\n                    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\r\n                        _arr.push(_s.value);\r\n                        if (i && _arr.length === i)\r\n                            break;\r\n                    }\r\n                }\r\n                catch (err) {\r\n                    _d = true;\r\n                    _e = err;\r\n                }\r\n                finally {\r\n                    try {\r\n                        if (!_n && _i[\"return\"] != null)\r\n                            _i[\"return\"]();\r\n                    }\r\n                    finally {\r\n                        if (_d)\r\n                            throw _e;\r\n                    }\r\n                } return _arr; }\r\n                function _arrayWithHoles(arr) { if (Array.isArray(arr))\r\n                    return arr; }\r\n                var assign = _dereq_('object-assign');\r\n                var webworkify = _dereq_('webworkify');\r\n                var MathLib = _dereq_('./lib/mathlib');\r\n                var Pool = _dereq_('./lib/pool');\r\n                var utils = _dereq_('./lib/utils');\r\n                var worker = _dereq_('./lib/worker');\r\n                var createStages = _dereq_('./lib/stepper');\r\n                var createRegions = _dereq_('./lib/tiler'); // Deduplicate pools & limiters with the same configs\r\n                // when user creates multiple pica instances.\r\n                var singletones = {};\r\n                var NEED_SAFARI_FIX = false;\r\n                try {\r\n                    if (typeof navigator !== 'undefined' && navigator.userAgent) {\r\n                        NEED_SAFARI_FIX = navigator.userAgent.indexOf('Safari') >= 0;\r\n                    }\r\n                }\r\n                catch (e) { }\r\n                var concurrency = 1;\r\n                if (typeof navigator !== 'undefined') {\r\n                    concurrency = Math.min(navigator.hardwareConcurrency || 1, 4);\r\n                }\r\n                var DEFAULT_PICA_OPTS = {\r\n                    tile: 1024,\r\n                    concurrency: concurrency,\r\n                    features: ['js', 'wasm', 'ww'],\r\n                    idle: 2000,\r\n                    createCanvas: function createCanvas(width, height) {\r\n                        var tmpCanvas = document.createElement('canvas');\r\n                        tmpCanvas.width = width;\r\n                        tmpCanvas.height = height;\r\n                        return tmpCanvas;\r\n                    }\r\n                };\r\n                var DEFAULT_RESIZE_OPTS = {\r\n                    quality: 3,\r\n                    alpha: false,\r\n                    unsharpAmount: 0,\r\n                    unsharpRadius: 0.0,\r\n                    unsharpThreshold: 0\r\n                };\r\n                var CAN_NEW_IMAGE_DATA = false;\r\n                var CAN_CREATE_IMAGE_BITMAP = false;\r\n                var CAN_USE_CANVAS_GET_IMAGE_DATA = false;\r\n                var CAN_USE_OFFSCREEN_CANVAS = false;\r\n                var CAN_USE_CIB_REGION_FOR_IMAGE = false;\r\n                function workerFabric() {\r\n                    return {\r\n                        value: webworkify(worker),\r\n                        destroy: function destroy() {\r\n                            this.value.terminate();\r\n                            if (typeof window !== 'undefined') {\r\n                                var url = window.URL || window.webkitURL || window.mozURL || window.msURL;\r\n                                if (url && url.revokeObjectURL && this.value.objectURL) {\r\n                                    url.revokeObjectURL(this.value.objectURL);\r\n                                }\r\n                            }\r\n                        }\r\n                    };\r\n                } ////////////////////////////////////////////////////////////////////////////////\r\n                // API methods\r\n                function Pica(options) {\r\n                    if (!(this instanceof Pica))\r\n                        return new Pica(options);\r\n                    this.options = assign({}, DEFAULT_PICA_OPTS, options || {});\r\n                    var limiter_key = \"lk_\".concat(this.options.concurrency); // Share limiters to avoid multiple parallel workers when user creates\r\n                    // multiple pica instances.\r\n                    this.__limit = singletones[limiter_key] || utils.limiter(this.options.concurrency);\r\n                    if (!singletones[limiter_key])\r\n                        singletones[limiter_key] = this.__limit; // List of supported features, according to options & browser/node.js\r\n                    this.features = {\r\n                        js: false,\r\n                        // pure JS implementation, can be disabled for testing\r\n                        wasm: false,\r\n                        // webassembly implementation for heavy functions\r\n                        cib: false,\r\n                        // resize via createImageBitmap (only FF at this moment)\r\n                        ww: false // webworkers\r\n                    };\r\n                    this.__workersPool = null; // Store requested features for webworkers\r\n                    this.__requested_features = [];\r\n                    this.__mathlib = null;\r\n                }\r\n                Pica.prototype.init = function () {\r\n                    var _this = this;\r\n                    if (this.__initPromise)\r\n                        return this.__initPromise; // Test if we can create ImageData without canvas and memory copy\r\n                    if (typeof ImageData !== 'undefined' && typeof Uint8ClampedArray !== 'undefined') {\r\n                        try {\r\n                            /* eslint-disable no-new */\r\n                            new ImageData(new Uint8ClampedArray(400), 10, 10);\r\n                            CAN_NEW_IMAGE_DATA = true;\r\n                        }\r\n                        catch (__) { }\r\n                    } // ImageBitmap can be effective in 2 places:\r\n                    //\r\n                    // 1. Threaded jpeg unpack (basic)\r\n                    // 2. Built-in resize (blocked due problem in chrome, see issue #89)\r\n                    //\r\n                    // For basic use we also need ImageBitmap wo support .close() method,\r\n                    // see https://developer.mozilla.org/ru/docs/Web/API/ImageBitmap\r\n                    if (typeof ImageBitmap !== 'undefined') {\r\n                        if (ImageBitmap.prototype && ImageBitmap.prototype.close) {\r\n                            CAN_CREATE_IMAGE_BITMAP = true;\r\n                        }\r\n                        else {\r\n                            this.debug('ImageBitmap does not support .close(), disabled');\r\n                        }\r\n                    }\r\n                    var features = this.options.features.slice();\r\n                    if (features.indexOf('all') >= 0) {\r\n                        features = ['cib', 'wasm', 'js', 'ww'];\r\n                    }\r\n                    this.__requested_features = features;\r\n                    this.__mathlib = new MathLib(features); // Check WebWorker support if requested\r\n                    if (features.indexOf('ww') >= 0) {\r\n                        if (typeof window !== 'undefined' && 'Worker' in window) {\r\n                            // IE <= 11 don't allow to create webworkers from string. We should check it.\r\n                            // https://connect.microsoft.com/IE/feedback/details/801810/web-workers-from-blob-urls-in-ie-10-and-11\r\n                            try {\r\n                                var wkr = _dereq_('webworkify')(function () { });\r\n                                wkr.terminate();\r\n                                this.features.ww = true; // pool uniqueness depends on pool config + webworker config\r\n                                var wpool_key = \"wp_\".concat(JSON.stringify(this.options));\r\n                                if (singletones[wpool_key]) {\r\n                                    this.__workersPool = singletones[wpool_key];\r\n                                }\r\n                                else {\r\n                                    this.__workersPool = new Pool(workerFabric, this.options.idle);\r\n                                    singletones[wpool_key] = this.__workersPool;\r\n                                }\r\n                            }\r\n                            catch (__) { }\r\n                        }\r\n                    }\r\n                    var initMath = this.__mathlib.init().then(function (mathlib) {\r\n                        // Copy detected features\r\n                        assign(_this.features, mathlib.features);\r\n                    });\r\n                    var checkCibResize;\r\n                    if (!CAN_CREATE_IMAGE_BITMAP) {\r\n                        checkCibResize = Promise.resolve(false);\r\n                    }\r\n                    else {\r\n                        checkCibResize = utils.cib_support(this.options.createCanvas).then(function (status) {\r\n                            if (_this.features.cib && features.indexOf('cib') < 0) {\r\n                                _this.debug('createImageBitmap() resize supported, but disabled by config');\r\n                                return;\r\n                            }\r\n                            if (features.indexOf('cib') >= 0)\r\n                                _this.features.cib = status;\r\n                        });\r\n                    }\r\n                    CAN_USE_CANVAS_GET_IMAGE_DATA = utils.can_use_canvas(this.options.createCanvas);\r\n                    var checkOffscreenCanvas;\r\n                    if (CAN_CREATE_IMAGE_BITMAP && CAN_NEW_IMAGE_DATA && features.indexOf('ww') !== -1) {\r\n                        checkOffscreenCanvas = utils.worker_offscreen_canvas_support();\r\n                    }\r\n                    else {\r\n                        checkOffscreenCanvas = Promise.resolve(false);\r\n                    }\r\n                    checkOffscreenCanvas = checkOffscreenCanvas.then(function (result) {\r\n                        CAN_USE_OFFSCREEN_CANVAS = result;\r\n                    }); // we use createImageBitmap to crop image data and pass it to workers,\r\n                    // so need to check whether function works correctly;\r\n                    // https://bugs.chromium.org/p/chromium/issues/detail?id=1220671\r\n                    var checkCibRegion = utils.cib_can_use_region().then(function (result) {\r\n                        CAN_USE_CIB_REGION_FOR_IMAGE = result;\r\n                    }); // Init math lib. That's async because can load some\r\n                    this.__initPromise = Promise.all([initMath, checkCibResize, checkOffscreenCanvas, checkCibRegion]).then(function () {\r\n                        return _this;\r\n                    });\r\n                    return this.__initPromise;\r\n                }; // Call resizer in webworker or locally, depending on config\r\n                Pica.prototype.__invokeResize = function (tileOpts, opts) {\r\n                    var _this2 = this;\r\n                    // Share cache between calls:\r\n                    //\r\n                    // - wasm instance\r\n                    // - wasm memory object\r\n                    //\r\n                    opts.__mathCache = opts.__mathCache || {};\r\n                    return Promise.resolve().then(function () {\r\n                        if (!_this2.features.ww) {\r\n                            // not possible to have ImageBitmap here if user disabled WW\r\n                            return {\r\n                                data: _this2.__mathlib.resizeAndUnsharp(tileOpts, opts.__mathCache)\r\n                            };\r\n                        }\r\n                        return new Promise(function (resolve, reject) {\r\n                            var w = _this2.__workersPool.acquire();\r\n                            if (opts.cancelToken)\r\n                                opts.cancelToken[\"catch\"](function (err) {\r\n                                    return reject(err);\r\n                                });\r\n                            w.value.onmessage = function (ev) {\r\n                                w.release();\r\n                                if (ev.data.err)\r\n                                    reject(ev.data.err);\r\n                                else\r\n                                    resolve(ev.data);\r\n                            };\r\n                            var transfer = [];\r\n                            if (tileOpts.src)\r\n                                transfer.push(tileOpts.src.buffer);\r\n                            if (tileOpts.srcBitmap)\r\n                                transfer.push(tileOpts.srcBitmap);\r\n                            w.value.postMessage({\r\n                                opts: tileOpts,\r\n                                features: _this2.__requested_features,\r\n                                preload: {\r\n                                    wasm_nodule: _this2.__mathlib.__\r\n                                }\r\n                            }, transfer);\r\n                        });\r\n                    });\r\n                }; // this function can return promise if createImageBitmap is used\r\n                Pica.prototype.__extractTileData = function (tile, from, opts, stageEnv, extractTo) {\r\n                    if (this.features.ww && CAN_USE_OFFSCREEN_CANVAS && ( // createImageBitmap doesn't work for images (Image, ImageBitmap) with Exif orientation in Chrome,\r\n                    // can use canvas because canvas doesn't have orientation;\r\n                    // see https://bugs.chromium.org/p/chromium/issues/detail?id=1220671\r\n                    utils.isCanvas(from) || CAN_USE_CIB_REGION_FOR_IMAGE)) {\r\n                        this.debug('Create tile for OffscreenCanvas');\r\n                        return createImageBitmap(stageEnv.srcImageBitmap || from, tile.x, tile.y, tile.width, tile.height).then(function (bitmap) {\r\n                            extractTo.srcBitmap = bitmap;\r\n                            return extractTo;\r\n                        });\r\n                    } // Extract tile RGBA buffer, depending on input type\r\n                    if (utils.isCanvas(from)) {\r\n                        if (!stageEnv.srcCtx)\r\n                            stageEnv.srcCtx = from.getContext('2d', {\r\n                                alpha: Boolean(opts.alpha)\r\n                            }); // If input is Canvas - extract region data directly\r\n                        this.debug('Get tile pixel data');\r\n                        extractTo.src = stageEnv.srcCtx.getImageData(tile.x, tile.y, tile.width, tile.height).data;\r\n                        return extractTo;\r\n                    } // If input is Image or decoded to ImageBitmap,\r\n                    // draw region to temporary canvas and extract data from it\r\n                    //\r\n                    // Note! Attempt to reuse this canvas causes significant slowdown in chrome\r\n                    //\r\n                    this.debug('Draw tile imageBitmap/image to temporary canvas');\r\n                    var tmpCanvas = this.options.createCanvas(tile.width, tile.height);\r\n                    var tmpCtx = tmpCanvas.getContext('2d', {\r\n                        alpha: Boolean(opts.alpha)\r\n                    });\r\n                    tmpCtx.globalCompositeOperation = 'copy';\r\n                    tmpCtx.drawImage(stageEnv.srcImageBitmap || from, tile.x, tile.y, tile.width, tile.height, 0, 0, tile.width, tile.height);\r\n                    this.debug('Get tile pixel data');\r\n                    extractTo.src = tmpCtx.getImageData(0, 0, tile.width, tile.height).data; // Safari 12 workaround\r\n                    // https://github.com/nodeca/pica/issues/199\r\n                    tmpCanvas.width = tmpCanvas.height = 0;\r\n                    return extractTo;\r\n                };\r\n                Pica.prototype.__landTileData = function (tile, result, stageEnv) {\r\n                    var toImageData;\r\n                    this.debug('Convert raw rgba tile result to ImageData');\r\n                    if (result.bitmap) {\r\n                        stageEnv.toCtx.drawImage(result.bitmap, tile.toX, tile.toY);\r\n                        return null;\r\n                    }\r\n                    if (CAN_NEW_IMAGE_DATA) {\r\n                        // this branch is for modern browsers\r\n                        // If `new ImageData()` & Uint8ClampedArray suported\r\n                        toImageData = new ImageData(new Uint8ClampedArray(result.data), tile.toWidth, tile.toHeight);\r\n                    }\r\n                    else {\r\n                        // fallback for `node-canvas` and old browsers\r\n                        // (IE11 has ImageData but does not support `new ImageData()`)\r\n                        toImageData = stageEnv.toCtx.createImageData(tile.toWidth, tile.toHeight);\r\n                        if (toImageData.data.set) {\r\n                            toImageData.data.set(result.data);\r\n                        }\r\n                        else {\r\n                            // IE9 don't have `.set()`\r\n                            for (var i = toImageData.data.length - 1; i >= 0; i--) {\r\n                                toImageData.data[i] = result.data[i];\r\n                            }\r\n                        }\r\n                    }\r\n                    this.debug('Draw tile');\r\n                    if (NEED_SAFARI_FIX) {\r\n                        // Safari draws thin white stripes between tiles without this fix\r\n                        stageEnv.toCtx.putImageData(toImageData, tile.toX, tile.toY, tile.toInnerX - tile.toX, tile.toInnerY - tile.toY, tile.toInnerWidth + 1e-5, tile.toInnerHeight + 1e-5);\r\n                    }\r\n                    else {\r\n                        stageEnv.toCtx.putImageData(toImageData, tile.toX, tile.toY, tile.toInnerX - tile.toX, tile.toInnerY - tile.toY, tile.toInnerWidth, tile.toInnerHeight);\r\n                    }\r\n                    return null;\r\n                };\r\n                Pica.prototype.__tileAndResize = function (from, to, opts) {\r\n                    var _this3 = this;\r\n                    var stageEnv = {\r\n                        srcCtx: null,\r\n                        srcImageBitmap: null,\r\n                        isImageBitmapReused: false,\r\n                        toCtx: null\r\n                    };\r\n                    var processTile = function processTile(tile) {\r\n                        return _this3.__limit(function () {\r\n                            if (opts.canceled)\r\n                                return opts.cancelToken;\r\n                            var tileOpts = {\r\n                                width: tile.width,\r\n                                height: tile.height,\r\n                                toWidth: tile.toWidth,\r\n                                toHeight: tile.toHeight,\r\n                                scaleX: tile.scaleX,\r\n                                scaleY: tile.scaleY,\r\n                                offsetX: tile.offsetX,\r\n                                offsetY: tile.offsetY,\r\n                                quality: opts.quality,\r\n                                alpha: opts.alpha,\r\n                                unsharpAmount: opts.unsharpAmount,\r\n                                unsharpRadius: opts.unsharpRadius,\r\n                                unsharpThreshold: opts.unsharpThreshold\r\n                            };\r\n                            _this3.debug('Invoke resize math');\r\n                            return Promise.resolve(tileOpts).then(function (tileOpts) {\r\n                                return _this3.__extractTileData(tile, from, opts, stageEnv, tileOpts);\r\n                            }).then(function (tileOpts) {\r\n                                _this3.debug('Invoke resize math');\r\n                                return _this3.__invokeResize(tileOpts, opts);\r\n                            }).then(function (result) {\r\n                                if (opts.canceled)\r\n                                    return opts.cancelToken;\r\n                                stageEnv.srcImageData = null;\r\n                                return _this3.__landTileData(tile, result, stageEnv);\r\n                            });\r\n                        });\r\n                    }; // Need to normalize data source first. It can be canvas or image.\r\n                    // If image - try to decode in background if possible\r\n                    return Promise.resolve().then(function () {\r\n                        stageEnv.toCtx = to.getContext('2d', {\r\n                            alpha: Boolean(opts.alpha)\r\n                        });\r\n                        if (utils.isCanvas(from))\r\n                            return null;\r\n                        if (utils.isImageBitmap(from)) {\r\n                            stageEnv.srcImageBitmap = from;\r\n                            stageEnv.isImageBitmapReused = true;\r\n                            return null;\r\n                        }\r\n                        if (utils.isImage(from)) {\r\n                            // try do decode image in background for faster next operations;\r\n                            // if we're using offscreen canvas, cib is called per tile, so not needed here\r\n                            if (!CAN_CREATE_IMAGE_BITMAP)\r\n                                return null;\r\n                            _this3.debug('Decode image via createImageBitmap');\r\n                            return createImageBitmap(from).then(function (imageBitmap) {\r\n                                stageEnv.srcImageBitmap = imageBitmap;\r\n                            }) // Suppress error to use fallback, if method fails\r\n                            // https://github.com/nodeca/pica/issues/190\r\n                            /* eslint-disable no-unused-vars */\r\n                            [\"catch\"](function (e) {\r\n                                return null;\r\n                            });\r\n                        }\r\n                        throw new Error('Pica: \".from\" should be Image, Canvas or ImageBitmap');\r\n                    }).then(function () {\r\n                        if (opts.canceled)\r\n                            return opts.cancelToken;\r\n                        _this3.debug('Calculate tiles'); //\r\n                        // Here we are with \"normalized\" source,\r\n                        // follow to tiling\r\n                        //\r\n                        var regions = createRegions({\r\n                            width: opts.width,\r\n                            height: opts.height,\r\n                            srcTileSize: _this3.options.tile,\r\n                            toWidth: opts.toWidth,\r\n                            toHeight: opts.toHeight,\r\n                            destTileBorder: opts.__destTileBorder\r\n                        });\r\n                        var jobs = regions.map(function (tile) {\r\n                            return processTile(tile);\r\n                        });\r\n                        function cleanup(stageEnv) {\r\n                            if (stageEnv.srcImageBitmap) {\r\n                                if (!stageEnv.isImageBitmapReused)\r\n                                    stageEnv.srcImageBitmap.close();\r\n                                stageEnv.srcImageBitmap = null;\r\n                            }\r\n                        }\r\n                        _this3.debug('Process tiles');\r\n                        return Promise.all(jobs).then(function () {\r\n                            _this3.debug('Finished!');\r\n                            cleanup(stageEnv);\r\n                            return to;\r\n                        }, function (err) {\r\n                            cleanup(stageEnv);\r\n                            throw err;\r\n                        });\r\n                    });\r\n                };\r\n                Pica.prototype.__processStages = function (stages, from, to, opts) {\r\n                    var _this4 = this;\r\n                    if (opts.canceled)\r\n                        return opts.cancelToken;\r\n                    var _stages$shift = stages.shift(), _stages$shift2 = _slicedToArray(_stages$shift, 2), toWidth = _stages$shift2[0], toHeight = _stages$shift2[1];\r\n                    var isLastStage = stages.length === 0;\r\n                    opts = assign({}, opts, {\r\n                        toWidth: toWidth,\r\n                        toHeight: toHeight,\r\n                        // only use user-defined quality for the last stage,\r\n                        // use simpler (Hamming) filter for the first stages where\r\n                        // scale factor is large enough (more than 2-3)\r\n                        quality: isLastStage ? opts.quality : Math.min(1, opts.quality)\r\n                    });\r\n                    var tmpCanvas;\r\n                    if (!isLastStage) {\r\n                        // create temporary canvas\r\n                        tmpCanvas = this.options.createCanvas(toWidth, toHeight);\r\n                    }\r\n                    return this.__tileAndResize(from, isLastStage ? to : tmpCanvas, opts).then(function () {\r\n                        if (isLastStage)\r\n                            return to;\r\n                        opts.width = toWidth;\r\n                        opts.height = toHeight;\r\n                        return _this4.__processStages(stages, tmpCanvas, to, opts);\r\n                    }).then(function (res) {\r\n                        if (tmpCanvas) {\r\n                            // Safari 12 workaround\r\n                            // https://github.com/nodeca/pica/issues/199\r\n                            tmpCanvas.width = tmpCanvas.height = 0;\r\n                        }\r\n                        return res;\r\n                    });\r\n                };\r\n                Pica.prototype.__resizeViaCreateImageBitmap = function (from, to, opts) {\r\n                    var _this5 = this;\r\n                    var toCtx = to.getContext('2d', {\r\n                        alpha: Boolean(opts.alpha)\r\n                    });\r\n                    this.debug('Resize via createImageBitmap()');\r\n                    return createImageBitmap(from, {\r\n                        resizeWidth: opts.toWidth,\r\n                        resizeHeight: opts.toHeight,\r\n                        resizeQuality: utils.cib_quality_name(opts.quality)\r\n                    }).then(function (imageBitmap) {\r\n                        if (opts.canceled)\r\n                            return opts.cancelToken; // if no unsharp - draw directly to output canvas\r\n                        if (!opts.unsharpAmount) {\r\n                            toCtx.drawImage(imageBitmap, 0, 0);\r\n                            imageBitmap.close();\r\n                            toCtx = null;\r\n                            _this5.debug('Finished!');\r\n                            return to;\r\n                        }\r\n                        _this5.debug('Unsharp result');\r\n                        var tmpCanvas = _this5.options.createCanvas(opts.toWidth, opts.toHeight);\r\n                        var tmpCtx = tmpCanvas.getContext('2d', {\r\n                            alpha: Boolean(opts.alpha)\r\n                        });\r\n                        tmpCtx.drawImage(imageBitmap, 0, 0);\r\n                        imageBitmap.close();\r\n                        var iData = tmpCtx.getImageData(0, 0, opts.toWidth, opts.toHeight);\r\n                        _this5.__mathlib.unsharp_mask(iData.data, opts.toWidth, opts.toHeight, opts.unsharpAmount, opts.unsharpRadius, opts.unsharpThreshold);\r\n                        toCtx.putImageData(iData, 0, 0); // Safari 12 workaround\r\n                        // https://github.com/nodeca/pica/issues/199\r\n                        tmpCanvas.width = tmpCanvas.height = 0;\r\n                        iData = tmpCtx = tmpCanvas = toCtx = null;\r\n                        _this5.debug('Finished!');\r\n                        return to;\r\n                    });\r\n                };\r\n                Pica.prototype.resize = function (from, to, options) {\r\n                    var _this6 = this;\r\n                    this.debug('Start resize...');\r\n                    var opts = assign({}, DEFAULT_RESIZE_OPTS);\r\n                    if (!isNaN(options)) {\r\n                        opts = assign(opts, {\r\n                            quality: options\r\n                        });\r\n                    }\r\n                    else if (options) {\r\n                        opts = assign(opts, options);\r\n                    }\r\n                    opts.toWidth = to.width;\r\n                    opts.toHeight = to.height;\r\n                    opts.width = from.naturalWidth || from.width;\r\n                    opts.height = from.naturalHeight || from.height; // Prevent stepper from infinite loop\r\n                    if (to.width === 0 || to.height === 0) {\r\n                        return Promise.reject(new Error(\"Invalid output size: \".concat(to.width, \"x\").concat(to.height)));\r\n                    }\r\n                    if (opts.unsharpRadius > 2)\r\n                        opts.unsharpRadius = 2;\r\n                    opts.canceled = false;\r\n                    if (opts.cancelToken) {\r\n                        // Wrap cancelToken to avoid successive resolve & set flag\r\n                        opts.cancelToken = opts.cancelToken.then(function (data) {\r\n                            opts.canceled = true;\r\n                            throw data;\r\n                        }, function (err) {\r\n                            opts.canceled = true;\r\n                            throw err;\r\n                        });\r\n                    }\r\n                    var DEST_TILE_BORDER = 3; // Max possible filter window size\r\n                    opts.__destTileBorder = Math.ceil(Math.max(DEST_TILE_BORDER, 2.5 * opts.unsharpRadius | 0));\r\n                    return this.init().then(function () {\r\n                        if (opts.canceled)\r\n                            return opts.cancelToken; // if createImageBitmap supports resize, just do it and return\r\n                        if (_this6.features.cib) {\r\n                            return _this6.__resizeViaCreateImageBitmap(from, to, opts);\r\n                        }\r\n                        if (!CAN_USE_CANVAS_GET_IMAGE_DATA) {\r\n                            var err = new Error('Pica: cannot use getImageData on canvas, ' + \"make sure fingerprinting protection isn't enabled\");\r\n                            err.code = 'ERR_GET_IMAGE_DATA';\r\n                            throw err;\r\n                        } //\r\n                        // No easy way, let's resize manually via arrays\r\n                        //\r\n                        var stages = createStages(opts.width, opts.height, opts.toWidth, opts.toHeight, _this6.options.tile, opts.__destTileBorder);\r\n                        return _this6.__processStages(stages, from, to, opts);\r\n                    });\r\n                }; // RGBA buffer resize\r\n                //\r\n                Pica.prototype.resizeBuffer = function (options) {\r\n                    var _this7 = this;\r\n                    var opts = assign({}, DEFAULT_RESIZE_OPTS, options);\r\n                    return this.init().then(function () {\r\n                        return _this7.__mathlib.resizeAndUnsharp(opts);\r\n                    });\r\n                };\r\n                Pica.prototype.toBlob = function (canvas, mimeType, quality) {\r\n                    mimeType = mimeType || 'image/png';\r\n                    return new Promise(function (resolve) {\r\n                        if (canvas.toBlob) {\r\n                            canvas.toBlob(function (blob) {\r\n                                return resolve(blob);\r\n                            }, mimeType, quality);\r\n                            return;\r\n                        }\r\n                        if (canvas.convertToBlob) {\r\n                            resolve(canvas.convertToBlob({\r\n                                type: mimeType,\r\n                                quality: quality\r\n                            }));\r\n                            return;\r\n                        } // Fallback for old browsers\r\n                        var asString = atob(canvas.toDataURL(mimeType, quality).split(',')[1]);\r\n                        var len = asString.length;\r\n                        var asBuffer = new Uint8Array(len);\r\n                        for (var i = 0; i < len; i++) {\r\n                            asBuffer[i] = asString.charCodeAt(i);\r\n                        }\r\n                        resolve(new Blob([asBuffer], {\r\n                            type: mimeType\r\n                        }));\r\n                    });\r\n                };\r\n                Pica.prototype.debug = function () { };\r\n                module.exports = Pica;\r\n            }, { \"./lib/mathlib\": 1, \"./lib/pool\": 13, \"./lib/stepper\": 14, \"./lib/tiler\": 15, \"./lib/utils\": 16, \"./lib/worker\": 17, \"object-assign\": 23, \"webworkify\": 24 }] }, {}, [])(\"/index.js\");\r\n});\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../../node_modules/pica/dist/pica.js\n");

/***/ }),

/***/ "../../../node_modules/browser-fs-access/dist/directory-open-01563666.js":
/*!*******************************************************************************!*\
  !*** ../../../node_modules/browser-fs-access/dist/directory-open-01563666.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ e)\n/* harmony export */ });\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar e = (e = [{}]) => __awaiter(void 0, void 0, void 0, function* () { return (Array.isArray(e) || (e = [e]), e[0].recursive = e[0].recursive || !1, new Promise((t, r) => { const i = document.createElement(\"input\"); i.type = \"file\", i.webkitdirectory = !0; const c = e => { \"function\" == typeof a && a(), t(e); }, a = e[0].legacySetup && e[0].legacySetup(c, () => a(r), i); i.addEventListener(\"change\", () => { let t = Array.from(i.files); e[0].recursive ? e[0].recursive && e[0].skipDirectory && (t = t.filter(t => t.webkitRelativePath.split(\"/\").every(t => !e[0].skipDirectory({ name: t, kind: \"directory\" })))) : t = t.filter(e => 2 === e.webkitRelativePath.split(\"/\").length), c(t); }), i.click(); })); });\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Jyb3dzZXItZnMtYWNjZXNzL2Rpc3QvZGlyZWN0b3J5LW9wZW4tMDE1NjM2NjYuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUFBLElBQUksQ0FBQyxHQUFDLENBQU0sQ0FBQyxHQUFDLENBQUMsRUFBRSxDQUFDLEVBQUMsRUFBRSwwREFBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFFLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLElBQUUsQ0FBQyxDQUFDLEVBQUMsSUFBSSxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLEVBQUUsR0FBQyxNQUFNLENBQUMsR0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQUMsQ0FBQyxJQUFJLEdBQUMsTUFBTSxFQUFDLENBQUMsQ0FBQyxlQUFlLEdBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTSxDQUFDLEdBQUMsQ0FBQyxHQUFFLEdBQUMsVUFBVSxJQUFFLE9BQU8sQ0FBQyxJQUFFLENBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxFQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxJQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxFQUFDLEdBQUUsRUFBRSxFQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLGdCQUFnQixDQUFDLFFBQVEsRUFBQyxHQUFFLEVBQUUsR0FBQyxJQUFJLENBQUMsR0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxFQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLElBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLGFBQWEsSUFBRSxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRSxFQUFDLENBQUMsa0JBQWtCLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUUsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLEVBQUMsSUFBSSxFQUFDLENBQUMsRUFBQyxJQUFJLEVBQUMsV0FBVyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxFQUFDLEdBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUUsRUFBQyxLQUFHLENBQUMsQ0FBQyxrQkFBa0IsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsS0FBSyxFQUFFLEdBQUMsQ0FBQyxDQUFDLEtBQUM7QUFBcUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Jyb3dzZXItZnMtYWNjZXNzL2Rpc3QvZGlyZWN0b3J5LW9wZW4tMDE1NjM2NjYuanM/ZDEzNCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZT1hc3luYyhlPVt7fV0pPT4oQXJyYXkuaXNBcnJheShlKXx8KGU9W2VdKSxlWzBdLnJlY3Vyc2l2ZT1lWzBdLnJlY3Vyc2l2ZXx8ITEsbmV3IFByb21pc2UoKHQscik9Pntjb25zdCBpPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtpLnR5cGU9XCJmaWxlXCIsaS53ZWJraXRkaXJlY3Rvcnk9ITA7Y29uc3QgYz1lPT57XCJmdW5jdGlvblwiPT10eXBlb2YgYSYmYSgpLHQoZSl9LGE9ZVswXS5sZWdhY3lTZXR1cCYmZVswXS5sZWdhY3lTZXR1cChjLCgpPT5hKHIpLGkpO2kuYWRkRXZlbnRMaXN0ZW5lcihcImNoYW5nZVwiLCgpPT57bGV0IHQ9QXJyYXkuZnJvbShpLmZpbGVzKTtlWzBdLnJlY3Vyc2l2ZT9lWzBdLnJlY3Vyc2l2ZSYmZVswXS5za2lwRGlyZWN0b3J5JiYodD10LmZpbHRlcih0PT50LndlYmtpdFJlbGF0aXZlUGF0aC5zcGxpdChcIi9cIikuZXZlcnkodD0+IWVbMF0uc2tpcERpcmVjdG9yeSh7bmFtZTp0LGtpbmQ6XCJkaXJlY3RvcnlcIn0pKSkpOnQ9dC5maWx0ZXIoZT0+Mj09PWUud2Via2l0UmVsYXRpdmVQYXRoLnNwbGl0KFwiL1wiKS5sZW5ndGgpLGModCl9KSxpLmNsaWNrKCl9KSk7ZXhwb3J0e2UgYXMgZGVmYXVsdH07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../../../node_modules/browser-fs-access/dist/directory-open-01563666.js\n");

/***/ }),

/***/ "../../../node_modules/browser-fs-access/dist/directory-open-4ed118d0.js":
/*!*******************************************************************************!*\
  !*** ../../../node_modules/browser-fs-access/dist/directory-open-4ed118d0.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ t)\n/* harmony export */ });\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nfunction e(r) { function t(e) { if (Object(e) !== e)\r\n    return Promise.reject(new TypeError(e + \" is not an object.\")); var r = e.done; return Promise.resolve(e.value).then(function (e) { return { value: e, done: r }; }); } return e = function (e) { this.s = e, this.n = e.next; }, e.prototype = { s: null, n: null, next: function () { return t(this.n.apply(this.s, arguments)); }, return: function (e) { var r = this.s.return; return void 0 === r ? Promise.resolve({ value: e, done: !0 }) : t(r.apply(this.s, arguments)); }, throw: function (e) { var r = this.s.return; return void 0 === r ? Promise.reject(e) : t(r.apply(this.s, arguments)); } }, new e(r); }\r\nconst r = (t, n, i = t.name, a) => __awaiter(void 0, void 0, void 0, function* () { const o = [], l = []; var s, u = !1, c = !1; try {\r\n    for (var y, f = function (r) { var t, n, i, a = 2; for (\"undefined\" != typeof Symbol && (n = Symbol.asyncIterator, i = Symbol.iterator); a--;) {\r\n        if (n && null != (t = r[n]))\r\n            return t.call(r);\r\n        if (i && null != (t = r[i]))\r\n            return new e(t.call(r));\r\n        n = \"@@asyncIterator\", i = \"@@iterator\";\r\n    } throw new TypeError(\"Object is not async iterable\"); }(t.values()); u = !(y = yield f.next()).done; u = !1) {\r\n        const e = y.value, s = `${i}/${e.name}`;\r\n        \"file\" === e.kind ? l.push(e.getFile().then(r => (r.directoryHandle = t, r.handle = e, Object.defineProperty(r, \"webkitRelativePath\", { configurable: !0, enumerable: !0, get: () => s })))) : \"directory\" !== e.kind || !n || a && a(e) || o.push(r(e, n, s, a));\r\n    }\r\n}\r\ncatch (e) {\r\n    c = !0, s = e;\r\n}\r\nfinally {\r\n    try {\r\n        u && null != f.return && (yield f.return());\r\n    }\r\n    finally {\r\n        if (c)\r\n            throw s;\r\n    }\r\n} return [...(yield Promise.all(o)).flat(), ...yield Promise.all(l)]; });\r\nvar t = (e = {}) => __awaiter(void 0, void 0, void 0, function* () { e.recursive = e.recursive || !1; const t = yield window.showDirectoryPicker({ id: e.id, startIn: e.startIn }); return r(t, e.recursive, void 0, e.skipDirectory); });\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Jyb3dzZXItZnMtYWNjZXNzL2Rpc3QvZGlyZWN0b3J5LW9wZW4tNGVkMTE4ZDAuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUFBLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFDLElBQUUsSUFBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLEtBQUcsQ0FBQztJQUFDLE9BQU8sT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLFNBQVMsQ0FBQyxDQUFDLEdBQUMsb0JBQW9CLENBQUMsQ0FBQyxDQUFDLEtBQUksQ0FBQyxHQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBTyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBUyxDQUFDLElBQUUsT0FBTSxFQUFDLEtBQUssRUFBQyxDQUFDLEVBQUMsSUFBSSxFQUFDLENBQUMsRUFBQyxHQUFDLENBQUMsR0FBQyxRQUFPLENBQUMsR0FBQyxVQUFTLENBQUMsSUFBRSxJQUFJLENBQUMsQ0FBQyxHQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxJQUFJLEdBQUMsRUFBQyxDQUFDLENBQUMsU0FBUyxHQUFDLEVBQUMsQ0FBQyxFQUFDLElBQUksRUFBQyxDQUFDLEVBQUMsSUFBSSxFQUFDLElBQUksRUFBQyxjQUFXLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUMsU0FBUyxDQUFDLENBQUMsR0FBQyxFQUFDLE1BQU0sRUFBQyxVQUFTLENBQUMsSUFBRSxJQUFJLENBQUMsR0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxRQUFPLEtBQUssQ0FBQyxLQUFHLENBQUMsRUFBQyxRQUFPLENBQUMsT0FBTyxDQUFDLEVBQUMsS0FBSyxFQUFDLENBQUMsRUFBQyxJQUFJLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUMsU0FBUyxDQUFDLENBQUMsR0FBQyxFQUFDLEtBQUssRUFBQyxVQUFTLENBQUMsSUFBRSxJQUFJLENBQUMsR0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxRQUFPLEtBQUssQ0FBQyxLQUFHLENBQUMsRUFBQyxRQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUMsU0FBUyxDQUFDLENBQUMsR0FBQyxFQUFDLEVBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUM7QUFBQSxNQUFNLENBQUMsR0FBQyxDQUFNLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUMsQ0FBQyxFQUFDLEVBQUUsa0RBQUMsTUFBTSxDQUFDLEdBQUMsRUFBRSxFQUFDLENBQUMsR0FBQyxFQUFFLENBQUMsS0FBSSxDQUFDLEVBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFHO0lBQUMsS0FBSSxJQUFJLENBQUMsRUFBQyxDQUFDLEdBQUMsVUFBUyxDQUFDLElBQUUsSUFBSSxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLE1BQUksV0FBVyxJQUFFLE9BQU8sTUFBTSxJQUFFLENBQUMsQ0FBQyxHQUFDLE1BQU0sQ0FBQyxhQUFhLEVBQUMsQ0FBQyxHQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsRUFBQyxDQUFDLEVBQUUsR0FBRTtRQUFDLElBQUcsQ0FBQyxJQUFFLElBQUksSUFBRSxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFBQSxJQUFHLENBQUMsSUFBRSxJQUFJLElBQUUsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQUMsT0FBTyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFBQSxDQUFDLEdBQUMsaUJBQWlCLEVBQUMsQ0FBQyxHQUFDLFlBQVk7S0FBQyxPQUFNLElBQUksU0FBUyxDQUFDLDhCQUE4QixDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLElBQUksRUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLEVBQUM7UUFBQyxNQUFNLENBQUMsR0FBQyxDQUFDLENBQUMsS0FBSyxFQUFDLENBQUMsR0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7UUFBQSxNQUFNLEtBQUcsQ0FBQyxDQUFDLElBQUksRUFBQyxFQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFFLEVBQUMsQ0FBQyxDQUFDLGVBQWUsR0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLE1BQU0sR0FBQyxDQUFDLEVBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxDQUFDLEVBQUMsb0JBQW9CLEVBQUMsRUFBQyxZQUFZLEVBQUMsQ0FBQyxDQUFDLEVBQUMsVUFBVSxFQUFDLENBQUMsQ0FBQyxFQUFDLEdBQUcsRUFBQyxHQUFFLEVBQUUsRUFBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxZQUFXLEtBQUcsQ0FBQyxDQUFDLElBQUksSUFBRSxDQUFDLENBQUMsSUFBRSxDQUFDLElBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDO0tBQUM7Q0FBQztBQUFBLE9BQU0sQ0FBQyxFQUFDO0lBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsR0FBQyxDQUFDO0NBQUM7UUFBTztJQUFDLElBQUc7UUFBQyxDQUFDLElBQUUsSUFBSSxJQUFFLENBQUMsQ0FBQyxNQUFNLEtBQUUsTUFBTSxDQUFDLENBQUMsTUFBTSxFQUFFO0tBQUM7WUFBTztRQUFDLElBQUcsQ0FBQztZQUFDLE1BQU0sQ0FBQztLQUFDO0NBQUMsUUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBQyxHQUFHLE1BQU0sT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLEVBQUM7QUFBQSxJQUFJLENBQUMsR0FBQyxDQUFNLENBQUMsR0FBQyxFQUFFLEVBQUMsRUFBRSxrREFBQyxDQUFDLENBQUMsU0FBUyxHQUFDLENBQUMsQ0FBQyxTQUFTLElBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTSxDQUFDLEdBQUMsTUFBTSxNQUFNLENBQUMsbUJBQW1CLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBQyxPQUFPLEVBQUMsQ0FBQyxDQUFDLE9BQU8sRUFBQyxDQUFDLENBQUMsUUFBTyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxTQUFTLEVBQUMsS0FBSyxDQUFDLEVBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxHQUFDLEVBQUM7QUFBcUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Jyb3dzZXItZnMtYWNjZXNzL2Rpc3QvZGlyZWN0b3J5LW9wZW4tNGVkMTE4ZDAuanM/MGY0MSJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBlKHIpe2Z1bmN0aW9uIHQoZSl7aWYoT2JqZWN0KGUpIT09ZSlyZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IFR5cGVFcnJvcihlK1wiIGlzIG5vdCBhbiBvYmplY3QuXCIpKTt2YXIgcj1lLmRvbmU7cmV0dXJuIFByb21pc2UucmVzb2x2ZShlLnZhbHVlKS50aGVuKGZ1bmN0aW9uKGUpe3JldHVybnt2YWx1ZTplLGRvbmU6cn19KX1yZXR1cm4gZT1mdW5jdGlvbihlKXt0aGlzLnM9ZSx0aGlzLm49ZS5uZXh0fSxlLnByb3RvdHlwZT17czpudWxsLG46bnVsbCxuZXh0OmZ1bmN0aW9uKCl7cmV0dXJuIHQodGhpcy5uLmFwcGx5KHRoaXMucyxhcmd1bWVudHMpKX0scmV0dXJuOmZ1bmN0aW9uKGUpe3ZhciByPXRoaXMucy5yZXR1cm47cmV0dXJuIHZvaWQgMD09PXI/UHJvbWlzZS5yZXNvbHZlKHt2YWx1ZTplLGRvbmU6ITB9KTp0KHIuYXBwbHkodGhpcy5zLGFyZ3VtZW50cykpfSx0aHJvdzpmdW5jdGlvbihlKXt2YXIgcj10aGlzLnMucmV0dXJuO3JldHVybiB2b2lkIDA9PT1yP1Byb21pc2UucmVqZWN0KGUpOnQoci5hcHBseSh0aGlzLnMsYXJndW1lbnRzKSl9fSxuZXcgZShyKX1jb25zdCByPWFzeW5jKHQsbixpPXQubmFtZSxhKT0+e2NvbnN0IG89W10sbD1bXTt2YXIgcyx1PSExLGM9ITE7dHJ5e2Zvcih2YXIgeSxmPWZ1bmN0aW9uKHIpe3ZhciB0LG4saSxhPTI7Zm9yKFwidW5kZWZpbmVkXCIhPXR5cGVvZiBTeW1ib2wmJihuPVN5bWJvbC5hc3luY0l0ZXJhdG9yLGk9U3ltYm9sLml0ZXJhdG9yKTthLS07KXtpZihuJiZudWxsIT0odD1yW25dKSlyZXR1cm4gdC5jYWxsKHIpO2lmKGkmJm51bGwhPSh0PXJbaV0pKXJldHVybiBuZXcgZSh0LmNhbGwocikpO249XCJAQGFzeW5jSXRlcmF0b3JcIixpPVwiQEBpdGVyYXRvclwifXRocm93IG5ldyBUeXBlRXJyb3IoXCJPYmplY3QgaXMgbm90IGFzeW5jIGl0ZXJhYmxlXCIpfSh0LnZhbHVlcygpKTt1PSEoeT1hd2FpdCBmLm5leHQoKSkuZG9uZTt1PSExKXtjb25zdCBlPXkudmFsdWUscz1gJHtpfS8ke2UubmFtZX1gO1wiZmlsZVwiPT09ZS5raW5kP2wucHVzaChlLmdldEZpbGUoKS50aGVuKHI9PihyLmRpcmVjdG9yeUhhbmRsZT10LHIuaGFuZGxlPWUsT2JqZWN0LmRlZmluZVByb3BlcnR5KHIsXCJ3ZWJraXRSZWxhdGl2ZVBhdGhcIix7Y29uZmlndXJhYmxlOiEwLGVudW1lcmFibGU6ITAsZ2V0OigpPT5zfSkpKSk6XCJkaXJlY3RvcnlcIiE9PWUua2luZHx8IW58fGEmJmEoZSl8fG8ucHVzaChyKGUsbixzLGEpKX19Y2F0Y2goZSl7Yz0hMCxzPWV9ZmluYWxseXt0cnl7dSYmbnVsbCE9Zi5yZXR1cm4mJmF3YWl0IGYucmV0dXJuKCl9ZmluYWxseXtpZihjKXRocm93IHN9fXJldHVyblsuLi4oYXdhaXQgUHJvbWlzZS5hbGwobykpLmZsYXQoKSwuLi5hd2FpdCBQcm9taXNlLmFsbChsKV19O3ZhciB0PWFzeW5jKGU9e30pPT57ZS5yZWN1cnNpdmU9ZS5yZWN1cnNpdmV8fCExO2NvbnN0IHQ9YXdhaXQgd2luZG93LnNob3dEaXJlY3RvcnlQaWNrZXIoe2lkOmUuaWQsc3RhcnRJbjplLnN0YXJ0SW59KTtyZXR1cm4gcih0LGUucmVjdXJzaXZlLHZvaWQgMCxlLnNraXBEaXJlY3RvcnkpfTtleHBvcnR7dCBhcyBkZWZhdWx0fTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../../../node_modules/browser-fs-access/dist/directory-open-4ed118d0.js\n");

/***/ }),

/***/ "../../../node_modules/browser-fs-access/dist/file-open-002ab408.js":
/*!**************************************************************************!*\
  !*** ../../../node_modules/browser-fs-access/dist/file-open-002ab408.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ t)\n/* harmony export */ });\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nconst e = (e) => __awaiter(void 0, void 0, void 0, function* () { const t = yield e.getFile(); return t.handle = e, t; });\r\nvar t = (t = [{}]) => __awaiter(void 0, void 0, void 0, function* () { Array.isArray(t) || (t = [t]); const i = []; t.forEach((e, t) => { i[t] = { description: e.description || \"\", accept: {} }, e.mimeTypes ? e.mimeTypes.map(a => { i[t].accept[a] = e.extensions || []; }) : i[t].accept[\"*/*\"] = e.extensions || []; }); const a = yield window.showOpenFilePicker({ id: t[0].id, startIn: t[0].startIn, types: i, multiple: t[0].multiple || !1, excludeAcceptAllOption: t[0].excludeAcceptAllOption || !1 }), c = yield Promise.all(a.map(e)); return t[0].multiple ? c : c[0]; });\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Jyb3dzZXItZnMtYWNjZXNzL2Rpc3QvZmlsZS1vcGVuLTAwMmFiNDA4LmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBQSxNQUFNLENBQUMsR0FBQyxDQUFNLENBQUMsSUFBRSxrREFBQyxNQUFNLENBQUMsR0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxRQUFPLENBQUMsQ0FBQyxNQUFNLEdBQUMsQ0FBQyxFQUFDLENBQUMsR0FBQyxFQUFDO0FBQUEsSUFBSSxDQUFDLEdBQUMsQ0FBTSxDQUFDLEdBQUMsQ0FBQyxFQUFFLENBQUMsRUFBQyxFQUFFLGtEQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUUsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU0sQ0FBQyxHQUFDLEVBQUUsQ0FBQyxFQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxFQUFFLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLEVBQUMsV0FBVyxFQUFDLENBQUMsQ0FBQyxXQUFXLElBQUUsRUFBRSxFQUFDLE1BQU0sRUFBQyxFQUFFLEVBQUMsRUFBQyxDQUFDLENBQUMsU0FBUyxFQUFDLEVBQUMsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRSxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLFVBQVUsSUFBRSxFQUFFLEdBQUMsQ0FBQyxFQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUMsQ0FBQyxDQUFDLFVBQVUsSUFBRSxFQUFFLEdBQUMsQ0FBQyxDQUFDLE9BQU0sQ0FBQyxHQUFDLE1BQU0sTUFBTSxDQUFDLGtCQUFrQixDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUMsT0FBTyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUMsS0FBSyxFQUFDLENBQUMsRUFBQyxRQUFRLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsSUFBRSxDQUFDLENBQUMsRUFBQyxzQkFBc0IsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsc0JBQXNCLElBQUUsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsR0FBQyxNQUFNLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBQyxFQUFDLEVBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLEVBQUM7QUFBcUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Jyb3dzZXItZnMtYWNjZXNzL2Rpc3QvZmlsZS1vcGVuLTAwMmFiNDA4LmpzPzk2ODgiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgZT1hc3luYyBlPT57Y29uc3QgdD1hd2FpdCBlLmdldEZpbGUoKTtyZXR1cm4gdC5oYW5kbGU9ZSx0fTt2YXIgdD1hc3luYyh0PVt7fV0pPT57QXJyYXkuaXNBcnJheSh0KXx8KHQ9W3RdKTtjb25zdCBpPVtdO3QuZm9yRWFjaCgoZSx0KT0+e2lbdF09e2Rlc2NyaXB0aW9uOmUuZGVzY3JpcHRpb258fFwiXCIsYWNjZXB0Ont9fSxlLm1pbWVUeXBlcz9lLm1pbWVUeXBlcy5tYXAoYT0+e2lbdF0uYWNjZXB0W2FdPWUuZXh0ZW5zaW9uc3x8W119KTppW3RdLmFjY2VwdFtcIiovKlwiXT1lLmV4dGVuc2lvbnN8fFtdfSk7Y29uc3QgYT1hd2FpdCB3aW5kb3cuc2hvd09wZW5GaWxlUGlja2VyKHtpZDp0WzBdLmlkLHN0YXJ0SW46dFswXS5zdGFydEluLHR5cGVzOmksbXVsdGlwbGU6dFswXS5tdWx0aXBsZXx8ITEsZXhjbHVkZUFjY2VwdEFsbE9wdGlvbjp0WzBdLmV4Y2x1ZGVBY2NlcHRBbGxPcHRpb258fCExfSksYz1hd2FpdCBQcm9taXNlLmFsbChhLm1hcChlKSk7cmV0dXJuIHRbMF0ubXVsdGlwbGU/YzpjWzBdfTtleHBvcnR7dCBhcyBkZWZhdWx0fTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../../../node_modules/browser-fs-access/dist/file-open-002ab408.js\n");

/***/ }),

/***/ "../../../node_modules/browser-fs-access/dist/file-open-7c801643.js":
/*!**************************************************************************!*\
  !*** ../../../node_modules/browser-fs-access/dist/file-open-7c801643.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ e)\n/* harmony export */ });\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar e = (e = [{}]) => __awaiter(void 0, void 0, void 0, function* () { return (Array.isArray(e) || (e = [e]), new Promise((t, n) => { const a = document.createElement(\"input\"); a.type = \"file\"; const i = [...e.map(e => e.mimeTypes || []), ...e.map(e => e.extensions || [])].join(); a.multiple = e[0].multiple || !1, a.accept = i || \"\"; const c = e => { \"function\" == typeof l && l(), t(e); }, l = e[0].legacySetup && e[0].legacySetup(c, () => l(n), a); a.addEventListener(\"change\", () => { c(a.multiple ? Array.from(a.files) : a.files[0]); }), a.click(); })); });\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Jyb3dzZXItZnMtYWNjZXNzL2Rpc3QvZmlsZS1vcGVuLTdjODAxNjQzLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBQSxJQUFJLENBQUMsR0FBQyxDQUFNLENBQUMsR0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUUsMERBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBRSxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsSUFBSSxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLEVBQUUsR0FBQyxNQUFNLENBQUMsR0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQUMsQ0FBQyxJQUFJLEdBQUMsTUFBTSxDQUFDLE9BQU0sQ0FBQyxHQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRSxFQUFDLENBQUMsU0FBUyxJQUFFLEVBQUUsQ0FBQyxFQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUUsRUFBQyxDQUFDLFVBQVUsSUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLEVBQUMsQ0FBQyxRQUFRLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsSUFBRSxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsTUFBTSxHQUFDLENBQUMsSUFBRSxFQUFFLENBQUMsT0FBTSxDQUFDLEdBQUMsQ0FBQyxHQUFFLEdBQUMsVUFBVSxJQUFFLE9BQU8sQ0FBQyxJQUFFLENBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxFQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxJQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxFQUFDLEdBQUUsRUFBRSxFQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLGdCQUFnQixDQUFDLFFBQVEsRUFBQyxHQUFFLEVBQUUsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBQyxNQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsRUFBQyxFQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsR0FBQyxDQUFDLENBQUMsS0FBQztBQUFxQiIsInNvdXJjZXMiOlsid2VicGFjazovLy8uLi8uLi8uLi9ub2RlX21vZHVsZXMvYnJvd3Nlci1mcy1hY2Nlc3MvZGlzdC9maWxlLW9wZW4tN2M4MDE2NDMuanM/YjRkZCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZT1hc3luYyhlPVt7fV0pPT4oQXJyYXkuaXNBcnJheShlKXx8KGU9W2VdKSxuZXcgUHJvbWlzZSgodCxuKT0+e2NvbnN0IGE9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO2EudHlwZT1cImZpbGVcIjtjb25zdCBpPVsuLi5lLm1hcChlPT5lLm1pbWVUeXBlc3x8W10pLC4uLmUubWFwKGU9PmUuZXh0ZW5zaW9uc3x8W10pXS5qb2luKCk7YS5tdWx0aXBsZT1lWzBdLm11bHRpcGxlfHwhMSxhLmFjY2VwdD1pfHxcIlwiO2NvbnN0IGM9ZT0+e1wiZnVuY3Rpb25cIj09dHlwZW9mIGwmJmwoKSx0KGUpfSxsPWVbMF0ubGVnYWN5U2V0dXAmJmVbMF0ubGVnYWN5U2V0dXAoYywoKT0+bChuKSxhKTthLmFkZEV2ZW50TGlzdGVuZXIoXCJjaGFuZ2VcIiwoKT0+e2MoYS5tdWx0aXBsZT9BcnJheS5mcm9tKGEuZmlsZXMpOmEuZmlsZXNbMF0pfSksYS5jbGljaygpfSkpO2V4cG9ydHtlIGFzIGRlZmF1bHR9O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../../../node_modules/browser-fs-access/dist/file-open-7c801643.js\n");

/***/ }),

/***/ "../../../node_modules/browser-fs-access/dist/file-save-3189631c.js":
/*!**************************************************************************!*\
  !*** ../../../node_modules/browser-fs-access/dist/file-save-3189631c.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ e)\n/* harmony export */ });\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar e = (e, t = {}) => __awaiter(void 0, void 0, void 0, function* () { Array.isArray(t) && (t = t[0]); const n = document.createElement(\"a\"); let a = e; \"body\" in e && (a = yield function (e, t) {\r\n    return __awaiter(this, void 0, void 0, function* () { const n = e.getReader(), a = new ReadableStream({ start: e => function t() {\r\n            return __awaiter(this, void 0, void 0, function* () { return n.read().then(({ done: n, value: a }) => { if (!n)\r\n                return e.enqueue(a), t(); e.close(); }); });\r\n        }() }), r = new Response(a), c = yield r.blob(); return n.releaseLock(), new Blob([c], { type: t }); });\r\n}(e.body, e.headers.get(\"content-type\"))), n.download = t.fileName || \"Untitled\", n.href = URL.createObjectURL(yield a); const r = () => { \"function\" == typeof c && c(); }, c = t.legacySetup && t.legacySetup(r, () => c(reject), n); return n.addEventListener(\"click\", () => { setTimeout(() => URL.revokeObjectURL(n.href), 3e4), r(); }), n.click(), null; });\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Jyb3dzZXItZnMtYWNjZXNzL2Rpc3QvZmlsZS1zYXZlLTMxODk2MzFjLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBQSxJQUFJLENBQUMsR0FBQyxDQUFNLENBQUMsRUFBQyxDQUFDLEdBQUMsRUFBRSxFQUFDLEVBQUUsa0RBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBRSxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFNLENBQUMsR0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUksQ0FBQyxHQUFDLENBQUMsQ0FBQyxPQUFNLElBQUcsQ0FBQyxJQUFFLENBQUMsQ0FBQyxHQUFDLE1BQU0sVUFBZSxDQUFDLEVBQUMsQ0FBQzswREFBRSxNQUFNLENBQUMsR0FBQyxDQUFDLENBQUMsU0FBUyxFQUFFLEVBQUMsQ0FBQyxHQUFDLElBQUksY0FBYyxDQUFDLEVBQUMsS0FBSyxFQUFDLENBQUMsR0FBRSxVQUFlLENBQUM7a0VBQUcsT0FBTyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBQyxJQUFJLEVBQUMsQ0FBQyxFQUFDLEtBQUssRUFBQyxDQUFDLEVBQUMsRUFBQyxFQUFFLEdBQUMsSUFBRyxDQUFDLENBQUM7Z0JBQUMsT0FBTyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBRSxDQUFDLEVBQUMsQ0FBQyxLQUFLLEVBQUUsR0FBQyxDQUFDLEdBQUM7U0FBQSxFQUFFLEVBQUMsQ0FBQyxFQUFDLENBQUMsR0FBQyxJQUFJLFFBQVEsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEdBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsUUFBTyxDQUFDLENBQUMsV0FBVyxFQUFFLEVBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxFQUFDLElBQUksRUFBQyxDQUFDLEVBQUMsQ0FBQyxHQUFDO0NBQUEsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsUUFBUSxHQUFDLENBQUMsQ0FBQyxRQUFRLElBQUUsVUFBVSxFQUFDLENBQUMsQ0FBQyxJQUFJLEdBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLE9BQU0sQ0FBQyxHQUFDLEdBQUUsRUFBRSxHQUFDLFVBQVUsSUFBRSxPQUFPLENBQUMsSUFBRSxDQUFDLEVBQUUsR0FBQyxFQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsV0FBVyxJQUFFLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxFQUFDLEdBQUUsRUFBRSxFQUFDLENBQUMsTUFBTSxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsUUFBTyxDQUFDLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxFQUFDLEdBQUUsRUFBRSxHQUFDLFVBQVUsQ0FBQyxHQUFFLEVBQUUsSUFBRyxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUMsR0FBRyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEdBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBQyxJQUFJLEdBQUMsRUFBQztBQUFxQiIsInNvdXJjZXMiOlsid2VicGFjazovLy8uLi8uLi8uLi9ub2RlX21vZHVsZXMvYnJvd3Nlci1mcy1hY2Nlc3MvZGlzdC9maWxlLXNhdmUtMzE4OTYzMWMuanM/ZWJhOSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZT1hc3luYyhlLHQ9e30pPT57QXJyYXkuaXNBcnJheSh0KSYmKHQ9dFswXSk7Y29uc3Qgbj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYVwiKTtsZXQgYT1lO1wiYm9keVwiaW4gZSYmKGE9YXdhaXQgYXN5bmMgZnVuY3Rpb24oZSx0KXtjb25zdCBuPWUuZ2V0UmVhZGVyKCksYT1uZXcgUmVhZGFibGVTdHJlYW0oe3N0YXJ0OmU9PmFzeW5jIGZ1bmN0aW9uIHQoKXtyZXR1cm4gbi5yZWFkKCkudGhlbigoe2RvbmU6bix2YWx1ZTphfSk9PntpZighbilyZXR1cm4gZS5lbnF1ZXVlKGEpLHQoKTtlLmNsb3NlKCl9KX0oKX0pLHI9bmV3IFJlc3BvbnNlKGEpLGM9YXdhaXQgci5ibG9iKCk7cmV0dXJuIG4ucmVsZWFzZUxvY2soKSxuZXcgQmxvYihbY10se3R5cGU6dH0pfShlLmJvZHksZS5oZWFkZXJzLmdldChcImNvbnRlbnQtdHlwZVwiKSkpLG4uZG93bmxvYWQ9dC5maWxlTmFtZXx8XCJVbnRpdGxlZFwiLG4uaHJlZj1VUkwuY3JlYXRlT2JqZWN0VVJMKGF3YWl0IGEpO2NvbnN0IHI9KCk9PntcImZ1bmN0aW9uXCI9PXR5cGVvZiBjJiZjKCl9LGM9dC5sZWdhY3lTZXR1cCYmdC5sZWdhY3lTZXR1cChyLCgpPT5jKHJlamVjdCksbik7cmV0dXJuIG4uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsKCk9PntzZXRUaW1lb3V0KCgpPT5VUkwucmV2b2tlT2JqZWN0VVJMKG4uaHJlZiksM2U0KSxyKCl9KSxuLmNsaWNrKCksbnVsbH07ZXhwb3J0e2UgYXMgZGVmYXVsdH07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../../../node_modules/browser-fs-access/dist/file-save-3189631c.js\n");

/***/ }),

/***/ "../../../node_modules/browser-fs-access/dist/file-save-745eba88.js":
/*!**************************************************************************!*\
  !*** ../../../node_modules/browser-fs-access/dist/file-save-745eba88.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ e)\n/* harmony export */ });\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar e = (e, t = [{}], a = null, i = !1, n = null) => __awaiter(void 0, void 0, void 0, function* () { Array.isArray(t) || (t = [t]), t[0].fileName = t[0].fileName || \"Untitled\"; const s = []; let c = null; if (e instanceof Blob && e.type ? c = e.type : e.headers && e.headers.get(\"content-type\") && (c = e.headers.get(\"content-type\")), t.forEach((e, t) => { s[t] = { description: e.description || \"\", accept: {} }, e.mimeTypes ? (0 === t && c && e.mimeTypes.push(c), e.mimeTypes.map(a => { s[t].accept[a] = e.extensions || []; })) : c && (s[t].accept[c] = e.extensions || []); }), a)\r\n    try {\r\n        yield a.getFile();\r\n    }\r\n    catch (e) {\r\n        if (a = null, i)\r\n            throw e;\r\n    } const r = a || (yield window.showSaveFilePicker({ suggestedName: t[0].fileName, id: t[0].id, startIn: t[0].startIn, types: s, excludeAcceptAllOption: t[0].excludeAcceptAllOption || !1 })); !a && n && n(); const l = yield r.createWritable(); if (\"stream\" in e) {\r\n    const t = e.stream();\r\n    return yield t.pipeTo(l), r;\r\n} return \"body\" in e ? (yield e.body.pipeTo(l), r) : (yield l.write(yield e), yield l.close(), r); });\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Jyb3dzZXItZnMtYWNjZXNzL2Rpc3QvZmlsZS1zYXZlLTc0NWViYTg4LmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBQSxJQUFJLENBQUMsR0FBQyxDQUFNLENBQUMsRUFBQyxDQUFDLEdBQUMsQ0FBQyxFQUFFLENBQUMsRUFBQyxDQUFDLEdBQUMsSUFBSSxFQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEdBQUMsSUFBSSxFQUFDLEVBQUUsa0RBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBRSxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxJQUFFLFVBQVUsQ0FBQyxPQUFNLENBQUMsR0FBQyxFQUFFLENBQUMsS0FBSSxDQUFDLEdBQUMsSUFBSSxDQUFDLEtBQUcsQ0FBQyxZQUFZLElBQUksSUFBRSxDQUFDLENBQUMsSUFBSSxFQUFDLEVBQUMsR0FBQyxDQUFDLENBQUMsSUFBSSxFQUFDLEVBQUMsQ0FBQyxPQUFPLElBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLElBQUUsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxFQUFFLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLEVBQUMsV0FBVyxFQUFDLENBQUMsQ0FBQyxXQUFXLElBQUUsRUFBRSxFQUFDLE1BQU0sRUFBQyxFQUFFLEVBQUMsRUFBQyxDQUFDLENBQUMsU0FBUyxFQUFDLEVBQUMsQ0FBQyxLQUFHLENBQUMsSUFBRSxDQUFDLElBQUUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFFLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsVUFBVSxJQUFFLEVBQUUsR0FBQyxDQUFDLENBQUMsRUFBQyxFQUFDLElBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxVQUFVLElBQUUsRUFBRSxDQUFDLEdBQUMsQ0FBQyxFQUFDLENBQUM7SUFBQyxJQUFHO1FBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxFQUFFO0tBQUM7SUFBQSxPQUFNLENBQUMsRUFBQztRQUFDLElBQUcsQ0FBQyxHQUFDLElBQUksRUFBQyxDQUFDO1lBQUMsTUFBTSxDQUFDO0tBQUMsT0FBTSxDQUFDLEdBQUMsQ0FBQyxLQUFFLE1BQU0sTUFBTSxDQUFDLGtCQUFrQixDQUFDLEVBQUMsYUFBYSxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUMsT0FBTyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUMsS0FBSyxFQUFDLENBQUMsRUFBQyxzQkFBc0IsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsc0JBQXNCLElBQUUsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLEVBQUMsQ0FBQyxJQUFFLENBQUMsSUFBRSxDQUFDLEVBQUUsQ0FBQyxPQUFNLENBQUMsR0FBQyxNQUFNLENBQUMsQ0FBQyxjQUFjLEVBQUUsQ0FBQyxLQUFHLFFBQVEsSUFBRyxDQUFDLEVBQUM7SUFBQyxNQUFNLENBQUMsR0FBQyxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUM7SUFBQSxPQUFPLE1BQU0sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDO0NBQUMsUUFBTSxNQUFNLElBQUcsQ0FBQyxFQUFDLEVBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFDLE1BQU0sQ0FBQyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFDLE1BQU0sQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFDLENBQUMsQ0FBQyxHQUFDLEVBQUM7QUFBcUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Jyb3dzZXItZnMtYWNjZXNzL2Rpc3QvZmlsZS1zYXZlLTc0NWViYTg4LmpzPzhhMjQiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGU9YXN5bmMoZSx0PVt7fV0sYT1udWxsLGk9ITEsbj1udWxsKT0+e0FycmF5LmlzQXJyYXkodCl8fCh0PVt0XSksdFswXS5maWxlTmFtZT10WzBdLmZpbGVOYW1lfHxcIlVudGl0bGVkXCI7Y29uc3Qgcz1bXTtsZXQgYz1udWxsO2lmKGUgaW5zdGFuY2VvZiBCbG9iJiZlLnR5cGU/Yz1lLnR5cGU6ZS5oZWFkZXJzJiZlLmhlYWRlcnMuZ2V0KFwiY29udGVudC10eXBlXCIpJiYoYz1lLmhlYWRlcnMuZ2V0KFwiY29udGVudC10eXBlXCIpKSx0LmZvckVhY2goKGUsdCk9PntzW3RdPXtkZXNjcmlwdGlvbjplLmRlc2NyaXB0aW9ufHxcIlwiLGFjY2VwdDp7fX0sZS5taW1lVHlwZXM/KDA9PT10JiZjJiZlLm1pbWVUeXBlcy5wdXNoKGMpLGUubWltZVR5cGVzLm1hcChhPT57c1t0XS5hY2NlcHRbYV09ZS5leHRlbnNpb25zfHxbXX0pKTpjJiYoc1t0XS5hY2NlcHRbY109ZS5leHRlbnNpb25zfHxbXSl9KSxhKXRyeXthd2FpdCBhLmdldEZpbGUoKX1jYXRjaChlKXtpZihhPW51bGwsaSl0aHJvdyBlfWNvbnN0IHI9YXx8YXdhaXQgd2luZG93LnNob3dTYXZlRmlsZVBpY2tlcih7c3VnZ2VzdGVkTmFtZTp0WzBdLmZpbGVOYW1lLGlkOnRbMF0uaWQsc3RhcnRJbjp0WzBdLnN0YXJ0SW4sdHlwZXM6cyxleGNsdWRlQWNjZXB0QWxsT3B0aW9uOnRbMF0uZXhjbHVkZUFjY2VwdEFsbE9wdGlvbnx8ITF9KTshYSYmbiYmbigpO2NvbnN0IGw9YXdhaXQgci5jcmVhdGVXcml0YWJsZSgpO2lmKFwic3RyZWFtXCJpbiBlKXtjb25zdCB0PWUuc3RyZWFtKCk7cmV0dXJuIGF3YWl0IHQucGlwZVRvKGwpLHJ9cmV0dXJuXCJib2R5XCJpbiBlPyhhd2FpdCBlLmJvZHkucGlwZVRvKGwpLHIpOihhd2FpdCBsLndyaXRlKGF3YWl0IGUpLGF3YWl0IGwuY2xvc2UoKSxyKX07ZXhwb3J0e2UgYXMgZGVmYXVsdH07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../../../node_modules/browser-fs-access/dist/file-save-745eba88.js\n");

/***/ }),

/***/ "../../../node_modules/image-blob-reduce/dist/image-blob-reduce.esm.mjs":
/*!******************************************************************************!*\
  !*** ../../../node_modules/image-blob-reduce/dist/image-blob-reduce.esm.mjs ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/*! image-blob-reduce 3.0.1 https://github.com/nodeca/image-blob-reduce @license MIT */\r\nvar assign$1 = function assign(to) {\r\n    var from;\r\n    for (var s = 1; s < arguments.length; s++) {\r\n        from = Object(arguments[s]);\r\n        for (var key in from) {\r\n            if (Object.prototype.hasOwnProperty.call(from, key))\r\n                to[key] = from[key];\r\n        }\r\n    }\r\n    return to;\r\n};\r\nfunction pick(from, props) {\r\n    var to = {};\r\n    props.forEach(function (key) {\r\n        if (Object.prototype.hasOwnProperty.call(from, key))\r\n            to[key] = from[key];\r\n    });\r\n    return to;\r\n}\r\nfunction pick_pica_resize_options(from) {\r\n    return pick(from, [\r\n        'alpha',\r\n        'unsharpAmount',\r\n        'unsharpRadius',\r\n        'unsharpThreshold',\r\n        'cancelToken'\r\n    ]);\r\n}\r\nvar pick_1 = pick;\r\nvar pick_pica_resize_options_1 = pick_pica_resize_options;\r\nvar utils = {\r\n    assign: assign$1,\r\n    pick: pick_1,\r\n    pick_pica_resize_options: pick_pica_resize_options_1\r\n};\r\nfunction createCommonjsModule(fn) {\r\n    var module = { exports: {} };\r\n    return fn(module, module.exports), module.exports;\r\n}\r\nfunction commonjsRequire(target) {\r\n    throw new Error('Could not dynamically require \"' + target + '\". Please configure the dynamicRequireTargets option of @rollup/plugin-commonjs appropriately for this require call to behave properly.');\r\n}\r\n/*!\r\n\r\npica\r\nhttps://github.com/nodeca/pica\r\n\r\n*/\r\nvar pica = createCommonjsModule(function (module, exports) {\r\n    (function (f) { {\r\n        module.exports = f();\r\n    } })(function () {\r\n        return (function () { function r(e, n, t) { function o(i, f) { if (!n[i]) {\r\n            if (!e[i]) {\r\n                var c = \"function\" == typeof commonjsRequire && commonjsRequire;\r\n                if (!f && c)\r\n                    return c(i, !0);\r\n                if (u)\r\n                    return u(i, !0);\r\n                var a = new Error(\"Cannot find module '\" + i + \"'\");\r\n                throw a.code = \"MODULE_NOT_FOUND\", a;\r\n            }\r\n            var p = n[i] = { exports: {} };\r\n            e[i][0].call(p.exports, function (r) { var n = e[i][1][r]; return o(n || r); }, p, p.exports, r, e, n, t);\r\n        } return n[i].exports; } for (var u = \"function\" == typeof commonjsRequire && commonjsRequire, i = 0; i < t.length; i++)\r\n            o(t[i]); return o; } return r; })()({ 1: [function (_dereq_, module, exports) {\r\n                    var inherits = _dereq_('inherits');\r\n                    var Multimath = _dereq_('multimath');\r\n                    var mm_unsharp_mask = _dereq_('./mm_unsharp_mask');\r\n                    var mm_resize = _dereq_('./mm_resize');\r\n                    function MathLib(requested_features) {\r\n                        var __requested_features = requested_features || [];\r\n                        var features = {\r\n                            js: __requested_features.indexOf('js') >= 0,\r\n                            wasm: __requested_features.indexOf('wasm') >= 0\r\n                        };\r\n                        Multimath.call(this, features);\r\n                        this.features = {\r\n                            js: features.js,\r\n                            wasm: features.wasm && this.has_wasm()\r\n                        };\r\n                        this.use(mm_unsharp_mask);\r\n                        this.use(mm_resize);\r\n                    }\r\n                    inherits(MathLib, Multimath);\r\n                    MathLib.prototype.resizeAndUnsharp = function resizeAndUnsharp(options, cache) {\r\n                        var result = this.resize(options, cache);\r\n                        if (options.unsharpAmount) {\r\n                            this.unsharp_mask(result, options.toWidth, options.toHeight, options.unsharpAmount, options.unsharpRadius, options.unsharpThreshold);\r\n                        }\r\n                        return result;\r\n                    };\r\n                    module.exports = MathLib;\r\n                }, { \"./mm_resize\": 4, \"./mm_unsharp_mask\": 9, \"inherits\": 19, \"multimath\": 20 }], 2: [function (_dereq_, module, exports) {\r\n                    //var FIXED_FRAC_BITS = 14;\r\n                    function clampTo8(i) {\r\n                        return i < 0 ? 0 : i > 255 ? 255 : i;\r\n                    } // Convolve image in horizontal directions and transpose output. In theory,\r\n                    // transpose allow:\r\n                    //\r\n                    // - use the same convolver for both passes (this fails due different\r\n                    //   types of input array and temporary buffer)\r\n                    // - making vertical pass by horisonltal lines inprove CPU cache use.\r\n                    //\r\n                    // But in real life this doesn't work :)\r\n                    //\r\n                    function convolveHorizontally(src, dest, srcW, srcH, destW, filters) {\r\n                        var r, g, b, a;\r\n                        var filterPtr, filterShift, filterSize;\r\n                        var srcPtr, srcY, destX, filterVal;\r\n                        var srcOffset = 0, destOffset = 0; // For each row\r\n                        for (srcY = 0; srcY < srcH; srcY++) {\r\n                            filterPtr = 0; // Apply precomputed filters to each destination row point\r\n                            for (destX = 0; destX < destW; destX++) {\r\n                                // Get the filter that determines the current output pixel.\r\n                                filterShift = filters[filterPtr++];\r\n                                filterSize = filters[filterPtr++];\r\n                                srcPtr = srcOffset + filterShift * 4 | 0;\r\n                                r = g = b = a = 0; // Apply the filter to the row to get the destination pixel r, g, b, a\r\n                                for (; filterSize > 0; filterSize--) {\r\n                                    filterVal = filters[filterPtr++]; // Use reverse order to workaround deopts in old v8 (node v.10)\r\n                                    // Big thanks to @mraleph (Vyacheslav Egorov) for the tip.\r\n                                    a = a + filterVal * src[srcPtr + 3] | 0;\r\n                                    b = b + filterVal * src[srcPtr + 2] | 0;\r\n                                    g = g + filterVal * src[srcPtr + 1] | 0;\r\n                                    r = r + filterVal * src[srcPtr] | 0;\r\n                                    srcPtr = srcPtr + 4 | 0;\r\n                                } // Bring this value back in range. All of the filter scaling factors\r\n                                // are in fixed point with FIXED_FRAC_BITS bits of fractional part.\r\n                                //\r\n                                // (!) Add 1/2 of value before clamping to get proper rounding. In other\r\n                                // case brightness loss will be noticeable if you resize image with white\r\n                                // border and place it on white background.\r\n                                //\r\n                                dest[destOffset + 3] = clampTo8(a + (1 << 13) >> 14\r\n                                /*FIXED_FRAC_BITS*/\r\n                                );\r\n                                dest[destOffset + 2] = clampTo8(b + (1 << 13) >> 14\r\n                                /*FIXED_FRAC_BITS*/\r\n                                );\r\n                                dest[destOffset + 1] = clampTo8(g + (1 << 13) >> 14\r\n                                /*FIXED_FRAC_BITS*/\r\n                                );\r\n                                dest[destOffset] = clampTo8(r + (1 << 13) >> 14\r\n                                /*FIXED_FRAC_BITS*/\r\n                                );\r\n                                destOffset = destOffset + srcH * 4 | 0;\r\n                            }\r\n                            destOffset = (srcY + 1) * 4 | 0;\r\n                            srcOffset = (srcY + 1) * srcW * 4 | 0;\r\n                        }\r\n                    } // Technically, convolvers are the same. But input array and temporary\r\n                    // buffer can be of different type (especially, in old browsers). So,\r\n                    // keep code in separate functions to avoid deoptimizations & speed loss.\r\n                    function convolveVertically(src, dest, srcW, srcH, destW, filters) {\r\n                        var r, g, b, a;\r\n                        var filterPtr, filterShift, filterSize;\r\n                        var srcPtr, srcY, destX, filterVal;\r\n                        var srcOffset = 0, destOffset = 0; // For each row\r\n                        for (srcY = 0; srcY < srcH; srcY++) {\r\n                            filterPtr = 0; // Apply precomputed filters to each destination row point\r\n                            for (destX = 0; destX < destW; destX++) {\r\n                                // Get the filter that determines the current output pixel.\r\n                                filterShift = filters[filterPtr++];\r\n                                filterSize = filters[filterPtr++];\r\n                                srcPtr = srcOffset + filterShift * 4 | 0;\r\n                                r = g = b = a = 0; // Apply the filter to the row to get the destination pixel r, g, b, a\r\n                                for (; filterSize > 0; filterSize--) {\r\n                                    filterVal = filters[filterPtr++]; // Use reverse order to workaround deopts in old v8 (node v.10)\r\n                                    // Big thanks to @mraleph (Vyacheslav Egorov) for the tip.\r\n                                    a = a + filterVal * src[srcPtr + 3] | 0;\r\n                                    b = b + filterVal * src[srcPtr + 2] | 0;\r\n                                    g = g + filterVal * src[srcPtr + 1] | 0;\r\n                                    r = r + filterVal * src[srcPtr] | 0;\r\n                                    srcPtr = srcPtr + 4 | 0;\r\n                                } // Bring this value back in range. All of the filter scaling factors\r\n                                // are in fixed point with FIXED_FRAC_BITS bits of fractional part.\r\n                                //\r\n                                // (!) Add 1/2 of value before clamping to get proper rounding. In other\r\n                                // case brightness loss will be noticeable if you resize image with white\r\n                                // border and place it on white background.\r\n                                //\r\n                                dest[destOffset + 3] = clampTo8(a + (1 << 13) >> 14\r\n                                /*FIXED_FRAC_BITS*/\r\n                                );\r\n                                dest[destOffset + 2] = clampTo8(b + (1 << 13) >> 14\r\n                                /*FIXED_FRAC_BITS*/\r\n                                );\r\n                                dest[destOffset + 1] = clampTo8(g + (1 << 13) >> 14\r\n                                /*FIXED_FRAC_BITS*/\r\n                                );\r\n                                dest[destOffset] = clampTo8(r + (1 << 13) >> 14\r\n                                /*FIXED_FRAC_BITS*/\r\n                                );\r\n                                destOffset = destOffset + srcH * 4 | 0;\r\n                            }\r\n                            destOffset = (srcY + 1) * 4 | 0;\r\n                            srcOffset = (srcY + 1) * srcW * 4 | 0;\r\n                        }\r\n                    }\r\n                    module.exports = {\r\n                        convolveHorizontally: convolveHorizontally,\r\n                        convolveVertically: convolveVertically\r\n                    };\r\n                }, {}], 3: [function (_dereq_, module, exports) {\r\n                    /* eslint-disable max-len */\r\n                    module.exports = 'AGFzbQEAAAAADAZkeWxpbmsAAAAAAAEXA2AAAGAGf39/f39/AGAHf39/f39/fwACDwEDZW52Bm1lbW9yeQIAAAMEAwABAgYGAX8AQQALB1cFEV9fd2FzbV9jYWxsX2N0b3JzAAAIY29udm9sdmUAAQpjb252b2x2ZUhWAAIMX19kc29faGFuZGxlAwAYX193YXNtX2FwcGx5X2RhdGFfcmVsb2NzAAAK7AMDAwABC8YDAQ9/AkAgA0UNACAERQ0AA0AgDCENQQAhE0EAIQcDQCAHQQJqIQYCfyAHQQF0IAVqIgcuAQIiFEUEQEGAwAAhCEGAwAAhCUGAwAAhCkGAwAAhCyAGDAELIBIgBy4BAGohCEEAIQsgFCEHQQAhDiAGIQlBACEPQQAhEANAIAUgCUEBdGouAQAiESAAIAhBAnRqKAIAIgpBGHZsIBBqIRAgCkH/AXEgEWwgC2ohCyAKQRB2Qf8BcSARbCAPaiEPIApBCHZB/wFxIBFsIA5qIQ4gCEEBaiEIIAlBAWohCSAHQQFrIgcNAAsgC0GAQGshCCAOQYBAayEJIA9BgEBrIQogEEGAQGshCyAGIBRqCyEHIAEgDUECdGogCUEOdSIGQf8BIAZB/wFIGyIGQQAgBkEAShtBCHRBgP4DcSAKQQ51IgZB/wEgBkH/AUgbIgZBACAGQQBKG0EQdEGAgPwHcSALQQ51IgZB/wEgBkH/AUgbIgZBACAGQQBKG0EYdHJyIAhBDnUiBkH/ASAGQf8BSBsiBkEAIAZBAEobcjYCACADIA1qIQ0gE0EBaiITIARHDQALIAxBAWoiDCACbCESIAMgDEcNAAsLCx4AQQAgAiADIAQgBSAAEAEgAkEAIAQgBSAGIAEQAQs=';\r\n                }, {}], 4: [function (_dereq_, module, exports) {\r\n                    module.exports = {\r\n                        name: 'resize',\r\n                        fn: _dereq_('./resize'),\r\n                        wasm_fn: _dereq_('./resize_wasm'),\r\n                        wasm_src: _dereq_('./convolve_wasm_base64')\r\n                    };\r\n                }, { \"./convolve_wasm_base64\": 3, \"./resize\": 5, \"./resize_wasm\": 8 }], 5: [function (_dereq_, module, exports) {\r\n                    var createFilters = _dereq_('./resize_filter_gen');\r\n                    var convolveHorizontally = _dereq_('./convolve').convolveHorizontally;\r\n                    var convolveVertically = _dereq_('./convolve').convolveVertically;\r\n                    function resetAlpha(dst, width, height) {\r\n                        var ptr = 3, len = width * height * 4 | 0;\r\n                        while (ptr < len) {\r\n                            dst[ptr] = 0xFF;\r\n                            ptr = ptr + 4 | 0;\r\n                        }\r\n                    }\r\n                    module.exports = function resize(options) {\r\n                        var src = options.src;\r\n                        var srcW = options.width;\r\n                        var srcH = options.height;\r\n                        var destW = options.toWidth;\r\n                        var destH = options.toHeight;\r\n                        var scaleX = options.scaleX || options.toWidth / options.width;\r\n                        var scaleY = options.scaleY || options.toHeight / options.height;\r\n                        var offsetX = options.offsetX || 0;\r\n                        var offsetY = options.offsetY || 0;\r\n                        var dest = options.dest || new Uint8Array(destW * destH * 4);\r\n                        var quality = typeof options.quality === 'undefined' ? 3 : options.quality;\r\n                        var alpha = options.alpha || false;\r\n                        var filtersX = createFilters(quality, srcW, destW, scaleX, offsetX), filtersY = createFilters(quality, srcH, destH, scaleY, offsetY);\r\n                        var tmp = new Uint8Array(destW * srcH * 4); // To use single function we need src & tmp of the same type.\r\n                        // But src can be CanvasPixelArray, and tmp - Uint8Array. So, keep\r\n                        // vertical and horizontal passes separately to avoid deoptimization.\r\n                        convolveHorizontally(src, tmp, srcW, srcH, destW, filtersX);\r\n                        convolveVertically(tmp, dest, srcH, destW, destH, filtersY); // That's faster than doing checks in convolver.\r\n                        // !!! Note, canvas data is not premultipled. We don't need other\r\n                        // alpha corrections.\r\n                        if (!alpha)\r\n                            resetAlpha(dest, destW, destH);\r\n                        return dest;\r\n                    };\r\n                }, { \"./convolve\": 2, \"./resize_filter_gen\": 6 }], 6: [function (_dereq_, module, exports) {\r\n                    var FILTER_INFO = _dereq_('./resize_filter_info'); // Precision of fixed FP values\r\n                    var FIXED_FRAC_BITS = 14;\r\n                    function toFixedPoint(num) {\r\n                        return Math.round(num * ((1 << FIXED_FRAC_BITS) - 1));\r\n                    }\r\n                    module.exports = function resizeFilterGen(quality, srcSize, destSize, scale, offset) {\r\n                        var filterFunction = FILTER_INFO[quality].filter;\r\n                        var scaleInverted = 1.0 / scale;\r\n                        var scaleClamped = Math.min(1.0, scale); // For upscale\r\n                        // Filter window (averaging interval), scaled to src image\r\n                        var srcWindow = FILTER_INFO[quality].win / scaleClamped;\r\n                        var destPixel, srcPixel, srcFirst, srcLast, filterElementSize, floatFilter, fxpFilter, total, pxl, idx, floatVal, filterTotal, filterVal;\r\n                        var leftNotEmpty, rightNotEmpty, filterShift, filterSize;\r\n                        var maxFilterElementSize = Math.floor((srcWindow + 1) * 2);\r\n                        var packedFilter = new Int16Array((maxFilterElementSize + 2) * destSize);\r\n                        var packedFilterPtr = 0;\r\n                        var slowCopy = !packedFilter.subarray || !packedFilter.set; // For each destination pixel calculate source range and built filter values\r\n                        for (destPixel = 0; destPixel < destSize; destPixel++) {\r\n                            // Scaling should be done relative to central pixel point\r\n                            srcPixel = (destPixel + 0.5) * scaleInverted + offset;\r\n                            srcFirst = Math.max(0, Math.floor(srcPixel - srcWindow));\r\n                            srcLast = Math.min(srcSize - 1, Math.ceil(srcPixel + srcWindow));\r\n                            filterElementSize = srcLast - srcFirst + 1;\r\n                            floatFilter = new Float32Array(filterElementSize);\r\n                            fxpFilter = new Int16Array(filterElementSize);\r\n                            total = 0.0; // Fill filter values for calculated range\r\n                            for (pxl = srcFirst, idx = 0; pxl <= srcLast; pxl++, idx++) {\r\n                                floatVal = filterFunction((pxl + 0.5 - srcPixel) * scaleClamped);\r\n                                total += floatVal;\r\n                                floatFilter[idx] = floatVal;\r\n                            } // Normalize filter, convert to fixed point and accumulate conversion error\r\n                            filterTotal = 0;\r\n                            for (idx = 0; idx < floatFilter.length; idx++) {\r\n                                filterVal = floatFilter[idx] / total;\r\n                                filterTotal += filterVal;\r\n                                fxpFilter[idx] = toFixedPoint(filterVal);\r\n                            } // Compensate normalization error, to minimize brightness drift\r\n                            fxpFilter[destSize >> 1] += toFixedPoint(1.0 - filterTotal); //\r\n                            // Now pack filter to useable form\r\n                            //\r\n                            // 1. Trim heading and tailing zero values, and compensate shitf/length\r\n                            // 2. Put all to single array in this format:\r\n                            //\r\n                            //    [ pos shift, data length, value1, value2, value3, ... ]\r\n                            //\r\n                            leftNotEmpty = 0;\r\n                            while (leftNotEmpty < fxpFilter.length && fxpFilter[leftNotEmpty] === 0) {\r\n                                leftNotEmpty++;\r\n                            }\r\n                            if (leftNotEmpty < fxpFilter.length) {\r\n                                rightNotEmpty = fxpFilter.length - 1;\r\n                                while (rightNotEmpty > 0 && fxpFilter[rightNotEmpty] === 0) {\r\n                                    rightNotEmpty--;\r\n                                }\r\n                                filterShift = srcFirst + leftNotEmpty;\r\n                                filterSize = rightNotEmpty - leftNotEmpty + 1;\r\n                                packedFilter[packedFilterPtr++] = filterShift; // shift\r\n                                packedFilter[packedFilterPtr++] = filterSize; // size\r\n                                if (!slowCopy) {\r\n                                    packedFilter.set(fxpFilter.subarray(leftNotEmpty, rightNotEmpty + 1), packedFilterPtr);\r\n                                    packedFilterPtr += filterSize;\r\n                                }\r\n                                else {\r\n                                    // fallback for old IE < 11, without subarray/set methods\r\n                                    for (idx = leftNotEmpty; idx <= rightNotEmpty; idx++) {\r\n                                        packedFilter[packedFilterPtr++] = fxpFilter[idx];\r\n                                    }\r\n                                }\r\n                            }\r\n                            else {\r\n                                // zero data, write header only\r\n                                packedFilter[packedFilterPtr++] = 0; // shift\r\n                                packedFilter[packedFilterPtr++] = 0; // size\r\n                            }\r\n                        }\r\n                        return packedFilter;\r\n                    };\r\n                }, { \"./resize_filter_info\": 7 }], 7: [function (_dereq_, module, exports) {\r\n                    module.exports = [{\r\n                            // Nearest neibor (Box)\r\n                            win: 0.5,\r\n                            filter: function filter(x) {\r\n                                return x >= -0.5 && x < 0.5 ? 1.0 : 0.0;\r\n                            }\r\n                        }, {\r\n                            // Hamming\r\n                            win: 1.0,\r\n                            filter: function filter(x) {\r\n                                if (x <= -1.0 || x >= 1.0) {\r\n                                    return 0.0;\r\n                                }\r\n                                if (x > -1.19209290E-07 && x < 1.19209290E-07) {\r\n                                    return 1.0;\r\n                                }\r\n                                var xpi = x * Math.PI;\r\n                                return Math.sin(xpi) / xpi * (0.54 + 0.46 * Math.cos(xpi / 1.0));\r\n                            }\r\n                        }, {\r\n                            // Lanczos, win = 2\r\n                            win: 2.0,\r\n                            filter: function filter(x) {\r\n                                if (x <= -2.0 || x >= 2.0) {\r\n                                    return 0.0;\r\n                                }\r\n                                if (x > -1.19209290E-07 && x < 1.19209290E-07) {\r\n                                    return 1.0;\r\n                                }\r\n                                var xpi = x * Math.PI;\r\n                                return Math.sin(xpi) / xpi * Math.sin(xpi / 2.0) / (xpi / 2.0);\r\n                            }\r\n                        }, {\r\n                            // Lanczos, win = 3\r\n                            win: 3.0,\r\n                            filter: function filter(x) {\r\n                                if (x <= -3.0 || x >= 3.0) {\r\n                                    return 0.0;\r\n                                }\r\n                                if (x > -1.19209290E-07 && x < 1.19209290E-07) {\r\n                                    return 1.0;\r\n                                }\r\n                                var xpi = x * Math.PI;\r\n                                return Math.sin(xpi) / xpi * Math.sin(xpi / 3.0) / (xpi / 3.0);\r\n                            }\r\n                        }];\r\n                }, {}], 8: [function (_dereq_, module, exports) {\r\n                    var createFilters = _dereq_('./resize_filter_gen');\r\n                    function resetAlpha(dst, width, height) {\r\n                        var ptr = 3, len = width * height * 4 | 0;\r\n                        while (ptr < len) {\r\n                            dst[ptr] = 0xFF;\r\n                            ptr = ptr + 4 | 0;\r\n                        }\r\n                    }\r\n                    function asUint8Array(src) {\r\n                        return new Uint8Array(src.buffer, 0, src.byteLength);\r\n                    }\r\n                    var IS_LE = true; // should not crash everything on module load in old browsers\r\n                    try {\r\n                        IS_LE = new Uint32Array(new Uint8Array([1, 0, 0, 0]).buffer)[0] === 1;\r\n                    }\r\n                    catch (__) { }\r\n                    function copyInt16asLE(src, target, target_offset) {\r\n                        if (IS_LE) {\r\n                            target.set(asUint8Array(src), target_offset);\r\n                            return;\r\n                        }\r\n                        for (var ptr = target_offset, i = 0; i < src.length; i++) {\r\n                            var data = src[i];\r\n                            target[ptr++] = data & 0xFF;\r\n                            target[ptr++] = data >> 8 & 0xFF;\r\n                        }\r\n                    }\r\n                    module.exports = function resize_wasm(options) {\r\n                        var src = options.src;\r\n                        var srcW = options.width;\r\n                        var srcH = options.height;\r\n                        var destW = options.toWidth;\r\n                        var destH = options.toHeight;\r\n                        var scaleX = options.scaleX || options.toWidth / options.width;\r\n                        var scaleY = options.scaleY || options.toHeight / options.height;\r\n                        var offsetX = options.offsetX || 0.0;\r\n                        var offsetY = options.offsetY || 0.0;\r\n                        var dest = options.dest || new Uint8Array(destW * destH * 4);\r\n                        var quality = typeof options.quality === 'undefined' ? 3 : options.quality;\r\n                        var alpha = options.alpha || false;\r\n                        var filtersX = createFilters(quality, srcW, destW, scaleX, offsetX), filtersY = createFilters(quality, srcH, destH, scaleY, offsetY); // destination is 0 too.\r\n                        var src_offset = 0; // buffer between convolve passes\r\n                        var tmp_offset = this.__align(src_offset + Math.max(src.byteLength, dest.byteLength));\r\n                        var filtersX_offset = this.__align(tmp_offset + srcH * destW * 4);\r\n                        var filtersY_offset = this.__align(filtersX_offset + filtersX.byteLength);\r\n                        var alloc_bytes = filtersY_offset + filtersY.byteLength;\r\n                        var instance = this.__instance('resize', alloc_bytes); //\r\n                        // Fill memory block with data to process\r\n                        //\r\n                        var mem = new Uint8Array(this.__memory.buffer);\r\n                        var mem32 = new Uint32Array(this.__memory.buffer); // 32-bit copy is much faster in chrome\r\n                        var src32 = new Uint32Array(src.buffer);\r\n                        mem32.set(src32); // We should guarantee LE bytes order. Filters are not big, so\r\n                        // speed difference is not significant vs direct .set()\r\n                        copyInt16asLE(filtersX, mem, filtersX_offset);\r\n                        copyInt16asLE(filtersY, mem, filtersY_offset); //\r\n                        // Now call webassembly method\r\n                        // emsdk does method names with '_'\r\n                        var fn = instance.exports.convolveHV || instance.exports._convolveHV;\r\n                        fn(filtersX_offset, filtersY_offset, tmp_offset, srcW, srcH, destW, destH); //\r\n                        // Copy data back to typed array\r\n                        //\r\n                        // 32-bit copy is much faster in chrome\r\n                        var dest32 = new Uint32Array(dest.buffer);\r\n                        dest32.set(new Uint32Array(this.__memory.buffer, 0, destH * destW)); // That's faster than doing checks in convolver.\r\n                        // !!! Note, canvas data is not premultipled. We don't need other\r\n                        // alpha corrections.\r\n                        if (!alpha)\r\n                            resetAlpha(dest, destW, destH);\r\n                        return dest;\r\n                    };\r\n                }, { \"./resize_filter_gen\": 6 }], 9: [function (_dereq_, module, exports) {\r\n                    module.exports = {\r\n                        name: 'unsharp_mask',\r\n                        fn: _dereq_('./unsharp_mask'),\r\n                        wasm_fn: _dereq_('./unsharp_mask_wasm'),\r\n                        wasm_src: _dereq_('./unsharp_mask_wasm_base64')\r\n                    };\r\n                }, { \"./unsharp_mask\": 10, \"./unsharp_mask_wasm\": 11, \"./unsharp_mask_wasm_base64\": 12 }], 10: [function (_dereq_, module, exports) {\r\n                    var glur_mono16 = _dereq_('glur/mono16');\r\n                    function hsv_v16(img, width, height) {\r\n                        var size = width * height;\r\n                        var out = new Uint16Array(size);\r\n                        var r, g, b, max;\r\n                        for (var i = 0; i < size; i++) {\r\n                            r = img[4 * i];\r\n                            g = img[4 * i + 1];\r\n                            b = img[4 * i + 2];\r\n                            max = r >= g && r >= b ? r : g >= b && g >= r ? g : b;\r\n                            out[i] = max << 8;\r\n                        }\r\n                        return out;\r\n                    }\r\n                    module.exports = function unsharp(img, width, height, amount, radius, threshold) {\r\n                        var v1, v2, vmul;\r\n                        var diff, iTimes4;\r\n                        if (amount === 0 || radius < 0.5) {\r\n                            return;\r\n                        }\r\n                        if (radius > 2.0) {\r\n                            radius = 2.0;\r\n                        }\r\n                        var brightness = hsv_v16(img, width, height);\r\n                        var blured = new Uint16Array(brightness); // copy, because blur modify src\r\n                        glur_mono16(blured, width, height, radius);\r\n                        var amountFp = amount / 100 * 0x1000 + 0.5 | 0;\r\n                        var thresholdFp = threshold << 8;\r\n                        var size = width * height;\r\n                        /* eslint-disable indent */\r\n                        for (var i = 0; i < size; i++) {\r\n                            v1 = brightness[i];\r\n                            diff = v1 - blured[i];\r\n                            if (Math.abs(diff) >= thresholdFp) {\r\n                                // add unsharp mask to the brightness channel\r\n                                v2 = v1 + (amountFp * diff + 0x800 >> 12); // Both v1 and v2 are within [0.0 .. 255.0] (0000-FF00) range, never going into\r\n                                // [255.003 .. 255.996] (FF01-FFFF). This allows to round this value as (x+.5)|0\r\n                                // later without overflowing.\r\n                                v2 = v2 > 0xff00 ? 0xff00 : v2;\r\n                                v2 = v2 < 0x0000 ? 0x0000 : v2; // Avoid division by 0. V=0 means rgb(0,0,0), unsharp with unsharpAmount>0 cannot\r\n                                // change this value (because diff between colors gets inflated), so no need to verify correctness.\r\n                                v1 = v1 !== 0 ? v1 : 1; // Multiplying V in HSV model by a constant is equivalent to multiplying each component\r\n                                // in RGB by the same constant (same for HSL), see also:\r\n                                // https://beesbuzz.biz/code/16-hsv-color-transforms\r\n                                vmul = (v2 << 12) / v1 | 0; // Result will be in [0..255] range because:\r\n                                //  - all numbers are positive\r\n                                //  - r,g,b <= (v1/256)\r\n                                //  - r,g,b,(v1/256),(v2/256) <= 255\r\n                                // So highest this number can get is X*255/X+0.5=255.5 which is < 256 and rounds down.\r\n                                iTimes4 = i * 4;\r\n                                img[iTimes4] = img[iTimes4] * vmul + 0x800 >> 12; // R\r\n                                img[iTimes4 + 1] = img[iTimes4 + 1] * vmul + 0x800 >> 12; // G\r\n                                img[iTimes4 + 2] = img[iTimes4 + 2] * vmul + 0x800 >> 12; // B\r\n                            }\r\n                        }\r\n                    };\r\n                }, { \"glur/mono16\": 18 }], 11: [function (_dereq_, module, exports) {\r\n                    module.exports = function unsharp(img, width, height, amount, radius, threshold) {\r\n                        if (amount === 0 || radius < 0.5) {\r\n                            return;\r\n                        }\r\n                        if (radius > 2.0) {\r\n                            radius = 2.0;\r\n                        }\r\n                        var pixels = width * height;\r\n                        var img_bytes_cnt = pixels * 4;\r\n                        var hsv_bytes_cnt = pixels * 2;\r\n                        var blur_bytes_cnt = pixels * 2;\r\n                        var blur_line_byte_cnt = Math.max(width, height) * 4; // float32 array\r\n                        var blur_coeffs_byte_cnt = 8 * 4; // float32 array\r\n                        var img_offset = 0;\r\n                        var hsv_offset = img_bytes_cnt;\r\n                        var blur_offset = hsv_offset + hsv_bytes_cnt;\r\n                        var blur_tmp_offset = blur_offset + blur_bytes_cnt;\r\n                        var blur_line_offset = blur_tmp_offset + blur_bytes_cnt;\r\n                        var blur_coeffs_offset = blur_line_offset + blur_line_byte_cnt;\r\n                        var instance = this.__instance('unsharp_mask', img_bytes_cnt + hsv_bytes_cnt + blur_bytes_cnt * 2 + blur_line_byte_cnt + blur_coeffs_byte_cnt, {\r\n                            exp: Math.exp\r\n                        }); // 32-bit copy is much faster in chrome\r\n                        var img32 = new Uint32Array(img.buffer);\r\n                        var mem32 = new Uint32Array(this.__memory.buffer);\r\n                        mem32.set(img32); // HSL\r\n                        var fn = instance.exports.hsv_v16 || instance.exports._hsv_v16;\r\n                        fn(img_offset, hsv_offset, width, height); // BLUR\r\n                        fn = instance.exports.blurMono16 || instance.exports._blurMono16;\r\n                        fn(hsv_offset, blur_offset, blur_tmp_offset, blur_line_offset, blur_coeffs_offset, width, height, radius); // UNSHARP\r\n                        fn = instance.exports.unsharp || instance.exports._unsharp;\r\n                        fn(img_offset, img_offset, hsv_offset, blur_offset, width, height, amount, threshold); // 32-bit copy is much faster in chrome\r\n                        img32.set(new Uint32Array(this.__memory.buffer, 0, pixels));\r\n                    };\r\n                }, {}], 12: [function (_dereq_, module, exports) {\r\n                    /* eslint-disable max-len */\r\n                    module.exports = 'AGFzbQEAAAAADAZkeWxpbmsAAAAAAAE0B2AAAGAEf39/fwBgBn9/f39/fwBgCH9/f39/f39/AGAIf39/f39/f30AYAJ9fwBgAXwBfAIZAgNlbnYDZXhwAAYDZW52Bm1lbW9yeQIAAAMHBgAFAgQBAwYGAX8AQQALB4oBCBFfX3dhc21fY2FsbF9jdG9ycwABFl9fYnVpbGRfZ2F1c3NpYW5fY29lZnMAAg5fX2dhdXNzMTZfbGluZQADCmJsdXJNb25vMTYABAdoc3ZfdjE2AAUHdW5zaGFycAAGDF9fZHNvX2hhbmRsZQMAGF9fd2FzbV9hcHBseV9kYXRhX3JlbG9jcwABCsUMBgMAAQvWAQEHfCABRNuGukOCGvs/IAC7oyICRAAAAAAAAADAohAAIgW2jDgCFCABIAKaEAAiAyADoCIGtjgCECABRAAAAAAAAPA/IAOhIgQgBKIgAyACIAKgokQAAAAAAADwP6AgBaGjIgS2OAIAIAEgBSAEmqIiB7Y4AgwgASADIAJEAAAAAAAA8D+gIASioiIItjgCCCABIAMgAkQAAAAAAADwv6AgBKKiIgK2OAIEIAEgByAIoCAFRAAAAAAAAPA/IAahoCIDo7Y4AhwgASAEIAKgIAOjtjgCGAuGBQMGfwl8An0gAyoCDCEVIAMqAgghFiADKgIUuyERIAMqAhC7IRACQCAEQQFrIghBAEgiCQRAIAIhByAAIQYMAQsgAiAALwEAuCIPIAMqAhi7oiIMIBGiIg0gDCAQoiAPIAMqAgS7IhOiIhQgAyoCALsiEiAPoqCgoCIOtjgCACACQQRqIQcgAEECaiEGIAhFDQAgCEEBIAhBAUgbIgpBf3MhCwJ/IAQgCmtBAXFFBEAgDiENIAgMAQsgAiANIA4gEKIgFCASIAAvAQK4Ig+ioKCgIg22OAIEIAJBCGohByAAQQRqIQYgDiEMIARBAmsLIQIgC0EAIARrRg0AA0AgByAMIBGiIA0gEKIgDyAToiASIAYvAQC4Ig6ioKCgIgy2OAIAIAcgDSARoiAMIBCiIA4gE6IgEiAGLwECuCIPoqCgoCINtjgCBCAHQQhqIQcgBkEEaiEGIAJBAkohACACQQJrIQIgAA0ACwsCQCAJDQAgASAFIAhsQQF0aiIAAn8gBkECay8BACICuCINIBW7IhKiIA0gFrsiE6KgIA0gAyoCHLuiIgwgEKKgIAwgEaKgIg8gB0EEayIHKgIAu6AiDkQAAAAAAADwQWMgDkQAAAAAAAAAAGZxBEAgDqsMAQtBAAs7AQAgCEUNACAGQQRrIQZBACAFa0EBdCEBA0ACfyANIBKiIAJB//8DcbgiDSAToqAgDyIOIBCioCAMIBGioCIPIAdBBGsiByoCALugIgxEAAAAAAAA8EFjIAxEAAAAAAAAAABmcQRAIAyrDAELQQALIQMgBi8BACECIAAgAWoiACADOwEAIAZBAmshBiAIQQFKIQMgDiEMIAhBAWshCCADDQALCwvRAgIBfwd8AkAgB0MAAAAAWw0AIARE24a6Q4Ia+z8gB0MAAAA/l7ujIglEAAAAAAAAAMCiEAAiDLaMOAIUIAQgCZoQACIKIAqgIg22OAIQIAREAAAAAAAA8D8gCqEiCyALoiAKIAkgCaCiRAAAAAAAAPA/oCAMoaMiC7Y4AgAgBCAMIAuaoiIOtjgCDCAEIAogCUQAAAAAAADwP6AgC6KiIg+2OAIIIAQgCiAJRAAAAAAAAPC/oCALoqIiCbY4AgQgBCAOIA+gIAxEAAAAAAAA8D8gDaGgIgqjtjgCHCAEIAsgCaAgCqO2OAIYIAYEQANAIAAgBSAIbEEBdGogAiAIQQF0aiADIAQgBSAGEAMgCEEBaiIIIAZHDQALCyAFRQ0AQQAhCANAIAIgBiAIbEEBdGogASAIQQF0aiADIAQgBiAFEAMgCEEBaiIIIAVHDQALCwtxAQN/IAIgA2wiBQRAA0AgASAAKAIAIgRBEHZB/wFxIgIgAiAEQQh2Qf8BcSIDIAMgBEH/AXEiBEkbIAIgA0sbIgYgBiAEIAIgBEsbIAMgBEsbQQh0OwEAIAFBAmohASAAQQRqIQAgBUEBayIFDQALCwuZAgIDfwF8IAQgBWwhBAJ/IAazQwAAgEWUQwAAyEKVu0QAAAAAAADgP6AiC5lEAAAAAAAA4EFjBEAgC6oMAQtBgICAgHgLIQUgBARAIAdBCHQhCUEAIQYDQCAJIAIgBkEBdCIHai8BACIBIAMgB2ovAQBrIgcgB0EfdSIIaiAIc00EQCAAIAZBAnQiCGoiCiAFIAdsQYAQakEMdSABaiIHQYD+AyAHQYD+A0gbIgdBACAHQQBKG0EMdCABQQEgARtuIgEgCi0AAGxBgBBqQQx2OgAAIAAgCEEBcmoiByABIActAABsQYAQakEMdjoAACAAIAhBAnJqIgcgASAHLQAAbEGAEGpBDHY6AAALIAZBAWoiBiAERw0ACwsL';\r\n                }, {}], 13: [function (_dereq_, module, exports) {\r\n                    var GC_INTERVAL = 100;\r\n                    function Pool(create, idle) {\r\n                        this.create = create;\r\n                        this.available = [];\r\n                        this.acquired = {};\r\n                        this.lastId = 1;\r\n                        this.timeoutId = 0;\r\n                        this.idle = idle || 2000;\r\n                    }\r\n                    Pool.prototype.acquire = function () {\r\n                        var _this = this;\r\n                        var resource;\r\n                        if (this.available.length !== 0) {\r\n                            resource = this.available.pop();\r\n                        }\r\n                        else {\r\n                            resource = this.create();\r\n                            resource.id = this.lastId++;\r\n                            resource.release = function () {\r\n                                return _this.release(resource);\r\n                            };\r\n                        }\r\n                        this.acquired[resource.id] = resource;\r\n                        return resource;\r\n                    };\r\n                    Pool.prototype.release = function (resource) {\r\n                        var _this2 = this;\r\n                        delete this.acquired[resource.id];\r\n                        resource.lastUsed = Date.now();\r\n                        this.available.push(resource);\r\n                        if (this.timeoutId === 0) {\r\n                            this.timeoutId = setTimeout(function () {\r\n                                return _this2.gc();\r\n                            }, GC_INTERVAL);\r\n                        }\r\n                    };\r\n                    Pool.prototype.gc = function () {\r\n                        var _this3 = this;\r\n                        var now = Date.now();\r\n                        this.available = this.available.filter(function (resource) {\r\n                            if (now - resource.lastUsed > _this3.idle) {\r\n                                resource.destroy();\r\n                                return false;\r\n                            }\r\n                            return true;\r\n                        });\r\n                        if (this.available.length !== 0) {\r\n                            this.timeoutId = setTimeout(function () {\r\n                                return _this3.gc();\r\n                            }, GC_INTERVAL);\r\n                        }\r\n                        else {\r\n                            this.timeoutId = 0;\r\n                        }\r\n                    };\r\n                    module.exports = Pool;\r\n                }, {}], 14: [function (_dereq_, module, exports) {\r\n                    // min size = 1 can consume large amount of memory\r\n                    var MIN_INNER_TILE_SIZE = 2;\r\n                    module.exports = function createStages(fromWidth, fromHeight, toWidth, toHeight, srcTileSize, destTileBorder) {\r\n                        var scaleX = toWidth / fromWidth;\r\n                        var scaleY = toHeight / fromHeight; // derived from createRegions equation:\r\n                        // innerTileWidth = pixelFloor(srcTileSize * scaleX) - 2 * destTileBorder;\r\n                        var minScale = (2 * destTileBorder + MIN_INNER_TILE_SIZE + 1) / srcTileSize; // refuse to scale image multiple times by less than twice each time,\r\n                        // it could only happen because of invalid options\r\n                        if (minScale > 0.5)\r\n                            return [[toWidth, toHeight]];\r\n                        var stageCount = Math.ceil(Math.log(Math.min(scaleX, scaleY)) / Math.log(minScale)); // no additional resizes are necessary,\r\n                        // stageCount can be zero or be negative when enlarging the image\r\n                        if (stageCount <= 1)\r\n                            return [[toWidth, toHeight]];\r\n                        var result = [];\r\n                        for (var i = 0; i < stageCount; i++) {\r\n                            var width = Math.round(Math.pow(Math.pow(fromWidth, stageCount - i - 1) * Math.pow(toWidth, i + 1), 1 / stageCount));\r\n                            var height = Math.round(Math.pow(Math.pow(fromHeight, stageCount - i - 1) * Math.pow(toHeight, i + 1), 1 / stageCount));\r\n                            result.push([width, height]);\r\n                        }\r\n                        return result;\r\n                    };\r\n                }, {}], 15: [function (_dereq_, module, exports) {\r\n                    /*\r\n                     * pixelFloor and pixelCeil are modified versions of Math.floor and Math.ceil\r\n                     * functions which take into account floating point arithmetic errors.\r\n                     * Those errors can cause undesired increments/decrements of sizes and offsets:\r\n                     * Math.ceil(36 / (36 / 500)) = 501\r\n                     * pixelCeil(36 / (36 / 500)) = 500\r\n                     */\r\n                    var PIXEL_EPSILON = 1e-5;\r\n                    function pixelFloor(x) {\r\n                        var nearest = Math.round(x);\r\n                        if (Math.abs(x - nearest) < PIXEL_EPSILON) {\r\n                            return nearest;\r\n                        }\r\n                        return Math.floor(x);\r\n                    }\r\n                    function pixelCeil(x) {\r\n                        var nearest = Math.round(x);\r\n                        if (Math.abs(x - nearest) < PIXEL_EPSILON) {\r\n                            return nearest;\r\n                        }\r\n                        return Math.ceil(x);\r\n                    }\r\n                    module.exports = function createRegions(options) {\r\n                        var scaleX = options.toWidth / options.width;\r\n                        var scaleY = options.toHeight / options.height;\r\n                        var innerTileWidth = pixelFloor(options.srcTileSize * scaleX) - 2 * options.destTileBorder;\r\n                        var innerTileHeight = pixelFloor(options.srcTileSize * scaleY) - 2 * options.destTileBorder; // prevent infinite loop, this should never happen\r\n                        if (innerTileWidth < 1 || innerTileHeight < 1) {\r\n                            throw new Error('Internal error in pica: target tile width/height is too small.');\r\n                        }\r\n                        var x, y;\r\n                        var innerX, innerY, toTileWidth, toTileHeight;\r\n                        var tiles = [];\r\n                        var tile; // we go top-to-down instead of left-to-right to make image displayed from top to\r\n                        // doesn in the browser\r\n                        for (innerY = 0; innerY < options.toHeight; innerY += innerTileHeight) {\r\n                            for (innerX = 0; innerX < options.toWidth; innerX += innerTileWidth) {\r\n                                x = innerX - options.destTileBorder;\r\n                                if (x < 0) {\r\n                                    x = 0;\r\n                                }\r\n                                toTileWidth = innerX + innerTileWidth + options.destTileBorder - x;\r\n                                if (x + toTileWidth >= options.toWidth) {\r\n                                    toTileWidth = options.toWidth - x;\r\n                                }\r\n                                y = innerY - options.destTileBorder;\r\n                                if (y < 0) {\r\n                                    y = 0;\r\n                                }\r\n                                toTileHeight = innerY + innerTileHeight + options.destTileBorder - y;\r\n                                if (y + toTileHeight >= options.toHeight) {\r\n                                    toTileHeight = options.toHeight - y;\r\n                                }\r\n                                tile = {\r\n                                    toX: x,\r\n                                    toY: y,\r\n                                    toWidth: toTileWidth,\r\n                                    toHeight: toTileHeight,\r\n                                    toInnerX: innerX,\r\n                                    toInnerY: innerY,\r\n                                    toInnerWidth: innerTileWidth,\r\n                                    toInnerHeight: innerTileHeight,\r\n                                    offsetX: x / scaleX - pixelFloor(x / scaleX),\r\n                                    offsetY: y / scaleY - pixelFloor(y / scaleY),\r\n                                    scaleX: scaleX,\r\n                                    scaleY: scaleY,\r\n                                    x: pixelFloor(x / scaleX),\r\n                                    y: pixelFloor(y / scaleY),\r\n                                    width: pixelCeil(toTileWidth / scaleX),\r\n                                    height: pixelCeil(toTileHeight / scaleY)\r\n                                };\r\n                                tiles.push(tile);\r\n                            }\r\n                        }\r\n                        return tiles;\r\n                    };\r\n                }, {}], 16: [function (_dereq_, module, exports) {\r\n                    function objClass(obj) {\r\n                        return Object.prototype.toString.call(obj);\r\n                    }\r\n                    module.exports.isCanvas = function isCanvas(element) {\r\n                        var cname = objClass(element);\r\n                        return cname === '[object HTMLCanvasElement]'\r\n                            /* browser */\r\n                            || cname === '[object OffscreenCanvas]' || cname === '[object Canvas]';\r\n                    };\r\n                    module.exports.isImage = function isImage(element) {\r\n                        return objClass(element) === '[object HTMLImageElement]';\r\n                    };\r\n                    module.exports.isImageBitmap = function isImageBitmap(element) {\r\n                        return objClass(element) === '[object ImageBitmap]';\r\n                    };\r\n                    module.exports.limiter = function limiter(concurrency) {\r\n                        var active = 0, queue = [];\r\n                        function roll() {\r\n                            if (active < concurrency && queue.length) {\r\n                                active++;\r\n                                queue.shift()();\r\n                            }\r\n                        }\r\n                        return function limit(fn) {\r\n                            return new Promise(function (resolve, reject) {\r\n                                queue.push(function () {\r\n                                    fn().then(function (result) {\r\n                                        resolve(result);\r\n                                        active--;\r\n                                        roll();\r\n                                    }, function (err) {\r\n                                        reject(err);\r\n                                        active--;\r\n                                        roll();\r\n                                    });\r\n                                });\r\n                                roll();\r\n                            });\r\n                        };\r\n                    };\r\n                    module.exports.cib_quality_name = function cib_quality_name(num) {\r\n                        switch (num) {\r\n                            case 0:\r\n                                return 'pixelated';\r\n                            case 1:\r\n                                return 'low';\r\n                            case 2:\r\n                                return 'medium';\r\n                        }\r\n                        return 'high';\r\n                    };\r\n                    module.exports.cib_support = function cib_support(createCanvas) {\r\n                        return Promise.resolve().then(function () {\r\n                            if (typeof createImageBitmap === 'undefined') {\r\n                                return false;\r\n                            }\r\n                            var c = createCanvas(100, 100);\r\n                            return createImageBitmap(c, 0, 0, 100, 100, {\r\n                                resizeWidth: 10,\r\n                                resizeHeight: 10,\r\n                                resizeQuality: 'high'\r\n                            }).then(function (bitmap) {\r\n                                var status = bitmap.width === 10; // Branch below is filtered on upper level. We do not call resize\r\n                                // detection for basic ImageBitmap.\r\n                                //\r\n                                // https://developer.mozilla.org/en-US/docs/Web/API/ImageBitmap\r\n                                // old Crome 51 has ImageBitmap without .close(). Then this code\r\n                                // will throw and return 'false' as expected.\r\n                                //\r\n                                bitmap.close();\r\n                                c = null;\r\n                                return status;\r\n                            });\r\n                        })[\"catch\"](function () {\r\n                            return false;\r\n                        });\r\n                    };\r\n                    module.exports.worker_offscreen_canvas_support = function worker_offscreen_canvas_support() {\r\n                        return new Promise(function (resolve, reject) {\r\n                            if (typeof OffscreenCanvas === 'undefined') {\r\n                                // if OffscreenCanvas is present, we assume browser supports Worker and built-in Promise as well\r\n                                resolve(false);\r\n                                return;\r\n                            }\r\n                            function workerPayload(self) {\r\n                                if (typeof createImageBitmap === 'undefined') {\r\n                                    self.postMessage(false);\r\n                                    return;\r\n                                }\r\n                                Promise.resolve().then(function () {\r\n                                    var canvas = new OffscreenCanvas(10, 10); // test that 2d context can be used in worker\r\n                                    var ctx = canvas.getContext('2d');\r\n                                    ctx.rect(0, 0, 1, 1); // test that cib can be used to return image bitmap from worker\r\n                                    return createImageBitmap(canvas, 0, 0, 1, 1);\r\n                                }).then(function () {\r\n                                    return self.postMessage(true);\r\n                                }, function () {\r\n                                    return self.postMessage(false);\r\n                                });\r\n                            }\r\n                            var code = btoa(\"(\".concat(workerPayload.toString(), \")(self);\"));\r\n                            var w = new Worker(\"data:text/javascript;base64,\".concat(code));\r\n                            w.onmessage = function (ev) {\r\n                                return resolve(ev.data);\r\n                            };\r\n                            w.onerror = reject;\r\n                        }).then(function (result) {\r\n                            return result;\r\n                        }, function () {\r\n                            return false;\r\n                        });\r\n                    }; // Check if canvas.getContext('2d').getImageData can be used,\r\n                    // FireFox randomizes the output of that function in `privacy.resistFingerprinting` mode\r\n                    module.exports.can_use_canvas = function can_use_canvas(createCanvas) {\r\n                        var usable = false;\r\n                        try {\r\n                            var canvas = createCanvas(2, 1);\r\n                            var ctx = canvas.getContext('2d');\r\n                            var d = ctx.createImageData(2, 1);\r\n                            d.data[0] = 12;\r\n                            d.data[1] = 23;\r\n                            d.data[2] = 34;\r\n                            d.data[3] = 255;\r\n                            d.data[4] = 45;\r\n                            d.data[5] = 56;\r\n                            d.data[6] = 67;\r\n                            d.data[7] = 255;\r\n                            ctx.putImageData(d, 0, 0);\r\n                            d = null;\r\n                            d = ctx.getImageData(0, 0, 2, 1);\r\n                            if (d.data[0] === 12 && d.data[1] === 23 && d.data[2] === 34 && d.data[3] === 255 && d.data[4] === 45 && d.data[5] === 56 && d.data[6] === 67 && d.data[7] === 255) {\r\n                                usable = true;\r\n                            }\r\n                        }\r\n                        catch (err) { }\r\n                        return usable;\r\n                    }; // Check if createImageBitmap(img, sx, sy, sw, sh) signature works correctly\r\n                    // with JPEG images oriented with Exif;\r\n                    // https://bugs.chromium.org/p/chromium/issues/detail?id=1220671\r\n                    // TODO: remove after it's fixed in chrome for at least 2 releases\r\n                    module.exports.cib_can_use_region = function cib_can_use_region() {\r\n                        return new Promise(function (resolve) {\r\n                            if (typeof createImageBitmap === 'undefined') {\r\n                                resolve(false);\r\n                                return;\r\n                            }\r\n                            var image = new Image();\r\n                            image.src = 'data:image/jpeg;base64,' + '/9j/4QBiRXhpZgAATU0AKgAAAAgABQESAAMAAAABAAYAAAEaAAUAAAABAAAASgEbAAUAA' + 'AABAAAAUgEoAAMAAAABAAIAAAITAAMAAAABAAEAAAAAAAAAAABIAAAAAQAAAEgAAAAB/9' + 'sAQwAEAwMEAwMEBAMEBQQEBQYKBwYGBgYNCQoICg8NEBAPDQ8OERMYFBESFxIODxUcFRc' + 'ZGRsbGxAUHR8dGh8YGhsa/9sAQwEEBQUGBQYMBwcMGhEPERoaGhoaGhoaGhoaGhoaGhoa' + 'GhoaGhoaGhoaGhoaGhoaGhoaGhoaGhoaGhoaGhoaGhoa/8IAEQgAAQACAwERAAIRAQMRA' + 'f/EABQAAQAAAAAAAAAAAAAAAAAAAAf/xAAUAQEAAAAAAAAAAAAAAAAAAAAA/9oADAMBAA' + 'IQAxAAAAF/P//EABQQAQAAAAAAAAAAAAAAAAAAAAD/2gAIAQEAAQUCf//EABQRAQAAAAA' + 'AAAAAAAAAAAAAAAD/2gAIAQMBAT8Bf//EABQRAQAAAAAAAAAAAAAAAAAAAAD/2gAIAQIB' + 'AT8Bf//EABQQAQAAAAAAAAAAAAAAAAAAAAD/2gAIAQEABj8Cf//EABQQAQAAAAAAAAAAA' + 'AAAAAAAAAD/2gAIAQEAAT8hf//aAAwDAQACAAMAAAAQH//EABQRAQAAAAAAAAAAAAAAAA' + 'AAAAD/2gAIAQMBAT8Qf//EABQRAQAAAAAAAAAAAAAAAAAAAAD/2gAIAQIBAT8Qf//EABQ' + 'QAQAAAAAAAAAAAAAAAAAAAAD/2gAIAQEAAT8Qf//Z';\r\n                            image.onload = function () {\r\n                                createImageBitmap(image, 0, 0, image.width, image.height).then(function (bitmap) {\r\n                                    if (bitmap.width === image.width && bitmap.height === image.height) {\r\n                                        resolve(true);\r\n                                    }\r\n                                    else {\r\n                                        resolve(false);\r\n                                    }\r\n                                }, function () {\r\n                                    return resolve(false);\r\n                                });\r\n                            };\r\n                            image.onerror = function () {\r\n                                return resolve(false);\r\n                            };\r\n                        });\r\n                    };\r\n                }, {}], 17: [function (_dereq_, module, exports) {\r\n                    module.exports = function () {\r\n                        var MathLib = _dereq_('./mathlib');\r\n                        var mathLib;\r\n                        /* eslint-disable no-undef */\r\n                        onmessage = function onmessage(ev) {\r\n                            var tileOpts = ev.data.opts;\r\n                            var returnBitmap = false;\r\n                            if (!tileOpts.src && tileOpts.srcBitmap) {\r\n                                var canvas = new OffscreenCanvas(tileOpts.width, tileOpts.height);\r\n                                var ctx = canvas.getContext('2d', {\r\n                                    alpha: Boolean(tileOpts.alpha)\r\n                                });\r\n                                ctx.drawImage(tileOpts.srcBitmap, 0, 0);\r\n                                tileOpts.src = ctx.getImageData(0, 0, tileOpts.width, tileOpts.height).data;\r\n                                canvas.width = canvas.height = 0;\r\n                                canvas = null;\r\n                                tileOpts.srcBitmap.close();\r\n                                tileOpts.srcBitmap = null;\r\n                                returnBitmap = true;\r\n                            }\r\n                            if (!mathLib)\r\n                                mathLib = new MathLib(ev.data.features); // Use multimath's sync auto-init. Avoid Promise use in old browsers,\r\n                            // because polyfills are not propagated to webworker.\r\n                            var data = mathLib.resizeAndUnsharp(tileOpts);\r\n                            if (returnBitmap) {\r\n                                var toImageData = new ImageData(new Uint8ClampedArray(data), tileOpts.toWidth, tileOpts.toHeight);\r\n                                var _canvas = new OffscreenCanvas(tileOpts.toWidth, tileOpts.toHeight);\r\n                                var _ctx = _canvas.getContext('2d', {\r\n                                    alpha: Boolean(tileOpts.alpha)\r\n                                });\r\n                                _ctx.putImageData(toImageData, 0, 0);\r\n                                createImageBitmap(_canvas).then(function (bitmap) {\r\n                                    postMessage({\r\n                                        bitmap: bitmap\r\n                                    }, [bitmap]);\r\n                                });\r\n                            }\r\n                            else {\r\n                                postMessage({\r\n                                    data: data\r\n                                }, [data.buffer]);\r\n                            }\r\n                        };\r\n                    };\r\n                }, { \"./mathlib\": 1 }], 18: [function (_dereq_, module, exports) {\r\n                    // Calculate Gaussian blur of an image using IIR filter\r\n                    // The method is taken from Intel's white paper and code example attached to it:\r\n                    // https://software.intel.com/en-us/articles/iir-gaussian-blur-filter\r\n                    // -implementation-using-intel-advanced-vector-extensions\r\n                    var a0, a1, a2, a3, b1, b2, left_corner, right_corner;\r\n                    function gaussCoef(sigma) {\r\n                        if (sigma < 0.5) {\r\n                            sigma = 0.5;\r\n                        }\r\n                        var a = Math.exp(0.726 * 0.726) / sigma, g1 = Math.exp(-a), g2 = Math.exp(-2 * a), k = (1 - g1) * (1 - g1) / (1 + 2 * a * g1 - g2);\r\n                        a0 = k;\r\n                        a1 = k * (a - 1) * g1;\r\n                        a2 = k * (a + 1) * g1;\r\n                        a3 = -k * g2;\r\n                        b1 = 2 * g1;\r\n                        b2 = -g2;\r\n                        left_corner = (a0 + a1) / (1 - b1 - b2);\r\n                        right_corner = (a2 + a3) / (1 - b1 - b2);\r\n                        // Attempt to force type to FP32.\r\n                        return new Float32Array([a0, a1, a2, a3, b1, b2, left_corner, right_corner]);\r\n                    }\r\n                    function convolveMono16(src, out, line, coeff, width, height) {\r\n                        // takes src image and writes the blurred and transposed result into out\r\n                        var prev_src, curr_src, curr_out, prev_out, prev_prev_out;\r\n                        var src_index, out_index, line_index;\r\n                        var i, j;\r\n                        var coeff_a0, coeff_a1, coeff_b1, coeff_b2;\r\n                        for (i = 0; i < height; i++) {\r\n                            src_index = i * width;\r\n                            out_index = i;\r\n                            line_index = 0;\r\n                            // left to right\r\n                            prev_src = src[src_index];\r\n                            prev_prev_out = prev_src * coeff[6];\r\n                            prev_out = prev_prev_out;\r\n                            coeff_a0 = coeff[0];\r\n                            coeff_a1 = coeff[1];\r\n                            coeff_b1 = coeff[4];\r\n                            coeff_b2 = coeff[5];\r\n                            for (j = 0; j < width; j++) {\r\n                                curr_src = src[src_index];\r\n                                curr_out = curr_src * coeff_a0 +\r\n                                    prev_src * coeff_a1 +\r\n                                    prev_out * coeff_b1 +\r\n                                    prev_prev_out * coeff_b2;\r\n                                prev_prev_out = prev_out;\r\n                                prev_out = curr_out;\r\n                                prev_src = curr_src;\r\n                                line[line_index] = prev_out;\r\n                                line_index++;\r\n                                src_index++;\r\n                            }\r\n                            src_index--;\r\n                            line_index--;\r\n                            out_index += height * (width - 1);\r\n                            // right to left\r\n                            prev_src = src[src_index];\r\n                            prev_prev_out = prev_src * coeff[7];\r\n                            prev_out = prev_prev_out;\r\n                            curr_src = prev_src;\r\n                            coeff_a0 = coeff[2];\r\n                            coeff_a1 = coeff[3];\r\n                            for (j = width - 1; j >= 0; j--) {\r\n                                curr_out = curr_src * coeff_a0 +\r\n                                    prev_src * coeff_a1 +\r\n                                    prev_out * coeff_b1 +\r\n                                    prev_prev_out * coeff_b2;\r\n                                prev_prev_out = prev_out;\r\n                                prev_out = curr_out;\r\n                                prev_src = curr_src;\r\n                                curr_src = src[src_index];\r\n                                out[out_index] = line[line_index] + prev_out;\r\n                                src_index--;\r\n                                line_index--;\r\n                                out_index -= height;\r\n                            }\r\n                        }\r\n                    }\r\n                    function blurMono16(src, width, height, radius) {\r\n                        // Quick exit on zero radius\r\n                        if (!radius) {\r\n                            return;\r\n                        }\r\n                        var out = new Uint16Array(src.length), tmp_line = new Float32Array(Math.max(width, height));\r\n                        var coeff = gaussCoef(radius);\r\n                        convolveMono16(src, out, tmp_line, coeff, width, height);\r\n                        convolveMono16(out, src, tmp_line, coeff, height, width);\r\n                    }\r\n                    module.exports = blurMono16;\r\n                }, {}], 19: [function (_dereq_, module, exports) {\r\n                    if (typeof Object.create === 'function') {\r\n                        // implementation from standard node.js 'util' module\r\n                        module.exports = function inherits(ctor, superCtor) {\r\n                            if (superCtor) {\r\n                                ctor.super_ = superCtor;\r\n                                ctor.prototype = Object.create(superCtor.prototype, {\r\n                                    constructor: {\r\n                                        value: ctor,\r\n                                        enumerable: false,\r\n                                        writable: true,\r\n                                        configurable: true\r\n                                    }\r\n                                });\r\n                            }\r\n                        };\r\n                    }\r\n                    else {\r\n                        // old school shim for old browsers\r\n                        module.exports = function inherits(ctor, superCtor) {\r\n                            if (superCtor) {\r\n                                ctor.super_ = superCtor;\r\n                                var TempCtor = function () { };\r\n                                TempCtor.prototype = superCtor.prototype;\r\n                                ctor.prototype = new TempCtor();\r\n                                ctor.prototype.constructor = ctor;\r\n                            }\r\n                        };\r\n                    }\r\n                }, {}], 20: [function (_dereq_, module, exports) {\r\n                    var assign = _dereq_('object-assign');\r\n                    var base64decode = _dereq_('./lib/base64decode');\r\n                    var hasWebAssembly = _dereq_('./lib/wa_detect');\r\n                    var DEFAULT_OPTIONS = {\r\n                        js: true,\r\n                        wasm: true\r\n                    };\r\n                    function MultiMath(options) {\r\n                        if (!(this instanceof MultiMath))\r\n                            return new MultiMath(options);\r\n                        var opts = assign({}, DEFAULT_OPTIONS, options || {});\r\n                        this.options = opts;\r\n                        this.__cache = {};\r\n                        this.__init_promise = null;\r\n                        this.__modules = opts.modules || {};\r\n                        this.__memory = null;\r\n                        this.__wasm = {};\r\n                        this.__isLE = ((new Uint32Array((new Uint8Array([1, 0, 0, 0])).buffer))[0] === 1);\r\n                        if (!this.options.js && !this.options.wasm) {\r\n                            throw new Error('mathlib: at least \"js\" or \"wasm\" should be enabled');\r\n                        }\r\n                    }\r\n                    MultiMath.prototype.has_wasm = hasWebAssembly;\r\n                    MultiMath.prototype.use = function (module) {\r\n                        this.__modules[module.name] = module;\r\n                        // Pin the best possible implementation\r\n                        if (this.options.wasm && this.has_wasm() && module.wasm_fn) {\r\n                            this[module.name] = module.wasm_fn;\r\n                        }\r\n                        else {\r\n                            this[module.name] = module.fn;\r\n                        }\r\n                        return this;\r\n                    };\r\n                    MultiMath.prototype.init = function () {\r\n                        if (this.__init_promise)\r\n                            return this.__init_promise;\r\n                        if (!this.options.js && this.options.wasm && !this.has_wasm()) {\r\n                            return Promise.reject(new Error('mathlib: only \"wasm\" was enabled, but it\\'s not supported'));\r\n                        }\r\n                        var self = this;\r\n                        this.__init_promise = Promise.all(Object.keys(self.__modules).map(function (name) {\r\n                            var module = self.__modules[name];\r\n                            if (!self.options.wasm || !self.has_wasm() || !module.wasm_fn)\r\n                                return null;\r\n                            // If already compiled - exit\r\n                            if (self.__wasm[name])\r\n                                return null;\r\n                            // Compile wasm source\r\n                            return WebAssembly.compile(self.__base64decode(module.wasm_src))\r\n                                .then(function (m) { self.__wasm[name] = m; });\r\n                        }))\r\n                            .then(function () { return self; });\r\n                        return this.__init_promise;\r\n                    };\r\n                    ////////////////////////////////////////////////////////////////////////////////\r\n                    // Methods below are for internal use from plugins\r\n                    // Simple decode base64 to typed array. Useful to load embedded webassembly\r\n                    // code. You probably don't need to call this method directly.\r\n                    //\r\n                    MultiMath.prototype.__base64decode = base64decode;\r\n                    // Increase current memory to include specified number of bytes. Do nothing if\r\n                    // size is already ok. You probably don't need to call this method directly,\r\n                    // because it will be invoked from `.__instance()`.\r\n                    //\r\n                    MultiMath.prototype.__reallocate = function mem_grow_to(bytes) {\r\n                        if (!this.__memory) {\r\n                            this.__memory = new WebAssembly.Memory({\r\n                                initial: Math.ceil(bytes / (64 * 1024))\r\n                            });\r\n                            return this.__memory;\r\n                        }\r\n                        var mem_size = this.__memory.buffer.byteLength;\r\n                        if (mem_size < bytes) {\r\n                            this.__memory.grow(Math.ceil((bytes - mem_size) / (64 * 1024)));\r\n                        }\r\n                        return this.__memory;\r\n                    };\r\n                    // Returns instantinated webassembly item by name, with specified memory size\r\n                    // and environment.\r\n                    // - use cache if available\r\n                    // - do sync module init, if async init was not called earlier\r\n                    // - allocate memory if not enougth\r\n                    // - can export functions to webassembly via \"env_extra\",\r\n                    //   for example, { exp: Math.exp }\r\n                    //\r\n                    MultiMath.prototype.__instance = function instance(name, memsize, env_extra) {\r\n                        if (memsize)\r\n                            this.__reallocate(memsize);\r\n                        // If .init() was not called, do sync compile\r\n                        if (!this.__wasm[name]) {\r\n                            var module = this.__modules[name];\r\n                            this.__wasm[name] = new WebAssembly.Module(this.__base64decode(module.wasm_src));\r\n                        }\r\n                        if (!this.__cache[name]) {\r\n                            var env_base = {\r\n                                memoryBase: 0,\r\n                                memory: this.__memory,\r\n                                tableBase: 0,\r\n                                table: new WebAssembly.Table({ initial: 0, element: 'anyfunc' })\r\n                            };\r\n                            this.__cache[name] = new WebAssembly.Instance(this.__wasm[name], {\r\n                                env: assign(env_base, env_extra || {})\r\n                            });\r\n                        }\r\n                        return this.__cache[name];\r\n                    };\r\n                    // Helper to calculate memory aligh for pointers. Webassembly does not require\r\n                    // this, but you may wish to experiment. Default base = 8;\r\n                    //\r\n                    MultiMath.prototype.__align = function align(number, base) {\r\n                        base = base || 8;\r\n                        var reminder = number % base;\r\n                        return number + (reminder ? base - reminder : 0);\r\n                    };\r\n                    module.exports = MultiMath;\r\n                }, { \"./lib/base64decode\": 21, \"./lib/wa_detect\": 22, \"object-assign\": 23 }], 21: [function (_dereq_, module, exports) {\r\n                    var BASE64_MAP = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\r\n                    module.exports = function base64decode(str) {\r\n                        var input = str.replace(/[\\r\\n=]/g, ''), // remove CR/LF & padding to simplify scan\r\n                        max = input.length;\r\n                        var out = new Uint8Array((max * 3) >> 2);\r\n                        // Collect by 6*4 bits (3 bytes)\r\n                        var bits = 0;\r\n                        var ptr = 0;\r\n                        for (var idx = 0; idx < max; idx++) {\r\n                            if ((idx % 4 === 0) && idx) {\r\n                                out[ptr++] = (bits >> 16) & 0xFF;\r\n                                out[ptr++] = (bits >> 8) & 0xFF;\r\n                                out[ptr++] = bits & 0xFF;\r\n                            }\r\n                            bits = (bits << 6) | BASE64_MAP.indexOf(input.charAt(idx));\r\n                        }\r\n                        // Dump tail\r\n                        var tailbits = (max % 4) * 6;\r\n                        if (tailbits === 0) {\r\n                            out[ptr++] = (bits >> 16) & 0xFF;\r\n                            out[ptr++] = (bits >> 8) & 0xFF;\r\n                            out[ptr++] = bits & 0xFF;\r\n                        }\r\n                        else if (tailbits === 18) {\r\n                            out[ptr++] = (bits >> 10) & 0xFF;\r\n                            out[ptr++] = (bits >> 2) & 0xFF;\r\n                        }\r\n                        else if (tailbits === 12) {\r\n                            out[ptr++] = (bits >> 4) & 0xFF;\r\n                        }\r\n                        return out;\r\n                    };\r\n                }, {}], 22: [function (_dereq_, module, exports) {\r\n                    var wa;\r\n                    module.exports = function hasWebAssembly() {\r\n                        // use cache if called before;\r\n                        if (typeof wa !== 'undefined')\r\n                            return wa;\r\n                        wa = false;\r\n                        if (typeof WebAssembly === 'undefined')\r\n                            return wa;\r\n                        // If WebAssenbly is disabled, code can throw on compile\r\n                        try {\r\n                            // https://github.com/brion/min-wasm-fail/blob/master/min-wasm-fail.in.js\r\n                            // Additional check that WA internals are correct\r\n                            /* eslint-disable comma-spacing, max-len */\r\n                            var bin = new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 6, 1, 96, 1, 127, 1, 127, 3, 2, 1, 0, 5, 3, 1, 0, 1, 7, 8, 1, 4, 116, 101, 115, 116, 0, 0, 10, 16, 1, 14, 0, 32, 0, 65, 1, 54, 2, 0, 32, 0, 40, 2, 0, 11]);\r\n                            var module = new WebAssembly.Module(bin);\r\n                            var instance = new WebAssembly.Instance(module, {});\r\n                            // test storing to and loading from a non-zero location via a parameter.\r\n                            // Safari on iOS 11.2.5 returns 0 unexpectedly at non-zero locations\r\n                            if (instance.exports.test(4) !== 0)\r\n                                wa = true;\r\n                            return wa;\r\n                        }\r\n                        catch (__) { }\r\n                        return wa;\r\n                    };\r\n                }, {}], 23: [function (_dereq_, module, exports) {\r\n                    /* eslint-disable no-unused-vars */\r\n                    var getOwnPropertySymbols = Object.getOwnPropertySymbols;\r\n                    var hasOwnProperty = Object.prototype.hasOwnProperty;\r\n                    var propIsEnumerable = Object.prototype.propertyIsEnumerable;\r\n                    function toObject(val) {\r\n                        if (val === null || val === undefined) {\r\n                            throw new TypeError('Object.assign cannot be called with null or undefined');\r\n                        }\r\n                        return Object(val);\r\n                    }\r\n                    function shouldUseNative() {\r\n                        try {\r\n                            if (!Object.assign) {\r\n                                return false;\r\n                            }\r\n                            // Detect buggy property enumeration order in older V8 versions.\r\n                            // https://bugs.chromium.org/p/v8/issues/detail?id=4118\r\n                            var test1 = new String('abc'); // eslint-disable-line no-new-wrappers\r\n                            test1[5] = 'de';\r\n                            if (Object.getOwnPropertyNames(test1)[0] === '5') {\r\n                                return false;\r\n                            }\r\n                            // https://bugs.chromium.org/p/v8/issues/detail?id=3056\r\n                            var test2 = {};\r\n                            for (var i = 0; i < 10; i++) {\r\n                                test2['_' + String.fromCharCode(i)] = i;\r\n                            }\r\n                            var order2 = Object.getOwnPropertyNames(test2).map(function (n) {\r\n                                return test2[n];\r\n                            });\r\n                            if (order2.join('') !== '0123456789') {\r\n                                return false;\r\n                            }\r\n                            // https://bugs.chromium.org/p/v8/issues/detail?id=3056\r\n                            var test3 = {};\r\n                            'abcdefghijklmnopqrst'.split('').forEach(function (letter) {\r\n                                test3[letter] = letter;\r\n                            });\r\n                            if (Object.keys(Object.assign({}, test3)).join('') !==\r\n                                'abcdefghijklmnopqrst') {\r\n                                return false;\r\n                            }\r\n                            return true;\r\n                        }\r\n                        catch (err) {\r\n                            // We don't expect any of the above to throw, but better to be safe.\r\n                            return false;\r\n                        }\r\n                    }\r\n                    module.exports = shouldUseNative() ? Object.assign : function (target, source) {\r\n                        var from;\r\n                        var to = toObject(target);\r\n                        var symbols;\r\n                        for (var s = 1; s < arguments.length; s++) {\r\n                            from = Object(arguments[s]);\r\n                            for (var key in from) {\r\n                                if (hasOwnProperty.call(from, key)) {\r\n                                    to[key] = from[key];\r\n                                }\r\n                            }\r\n                            if (getOwnPropertySymbols) {\r\n                                symbols = getOwnPropertySymbols(from);\r\n                                for (var i = 0; i < symbols.length; i++) {\r\n                                    if (propIsEnumerable.call(from, symbols[i])) {\r\n                                        to[symbols[i]] = from[symbols[i]];\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        return to;\r\n                    };\r\n                }, {}], 24: [function (_dereq_, module, exports) {\r\n                    var bundleFn = arguments[3];\r\n                    var sources = arguments[4];\r\n                    var cache = arguments[5];\r\n                    var stringify = JSON.stringify;\r\n                    module.exports = function (fn, options) {\r\n                        var wkey;\r\n                        var cacheKeys = Object.keys(cache);\r\n                        for (var i = 0, l = cacheKeys.length; i < l; i++) {\r\n                            var key = cacheKeys[i];\r\n                            var exp = cache[key].exports;\r\n                            // Using babel as a transpiler to use esmodule, the export will always\r\n                            // be an object with the default export as a property of it. To ensure\r\n                            // the existing api and babel esmodule exports are both supported we\r\n                            // check for both\r\n                            if (exp === fn || exp && exp.default === fn) {\r\n                                wkey = key;\r\n                                break;\r\n                            }\r\n                        }\r\n                        if (!wkey) {\r\n                            wkey = Math.floor(Math.pow(16, 8) * Math.random()).toString(16);\r\n                            var wcache = {};\r\n                            for (var i = 0, l = cacheKeys.length; i < l; i++) {\r\n                                var key = cacheKeys[i];\r\n                                wcache[key] = key;\r\n                            }\r\n                            sources[wkey] = [\r\n                                'function(require,module,exports){' + fn + '(self); }',\r\n                                wcache\r\n                            ];\r\n                        }\r\n                        var skey = Math.floor(Math.pow(16, 8) * Math.random()).toString(16);\r\n                        var scache = {};\r\n                        scache[wkey] = wkey;\r\n                        sources[skey] = [\r\n                            'function(require,module,exports){' +\r\n                                // try to call default if defined to also support babel esmodule exports\r\n                                'var f = require(' + stringify(wkey) + ');' +\r\n                                '(f.default ? f.default : f)(self);' +\r\n                                '}',\r\n                            scache\r\n                        ];\r\n                        var workerSources = {};\r\n                        resolveSources(skey);\r\n                        function resolveSources(key) {\r\n                            workerSources[key] = true;\r\n                            for (var depPath in sources[key][1]) {\r\n                                var depKey = sources[key][1][depPath];\r\n                                if (!workerSources[depKey]) {\r\n                                    resolveSources(depKey);\r\n                                }\r\n                            }\r\n                        }\r\n                        var src = '(' + bundleFn + ')({'\r\n                            + Object.keys(workerSources).map(function (key) {\r\n                                return stringify(key) + ':['\r\n                                    + sources[key][0]\r\n                                    + ',' + stringify(sources[key][1]) + ']';\r\n                            }).join(',')\r\n                            + '},{},[' + stringify(skey) + '])';\r\n                        var URL = window.URL || window.webkitURL || window.mozURL || window.msURL;\r\n                        var blob = new Blob([src], { type: 'text/javascript' });\r\n                        if (options && options.bare) {\r\n                            return blob;\r\n                        }\r\n                        var workerUrl = URL.createObjectURL(blob);\r\n                        var worker = new Worker(workerUrl);\r\n                        worker.objectURL = workerUrl;\r\n                        return worker;\r\n                    };\r\n                }, {}], \"/index.js\": [function (_dereq_, module, exports) {\r\n                    function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\r\n                    function _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\r\n                    function _unsupportedIterableToArray(o, minLen) { if (!o)\r\n                        return; if (typeof o === \"string\")\r\n                        return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor)\r\n                        n = o.constructor.name; if (n === \"Map\" || n === \"Set\")\r\n                        return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))\r\n                        return _arrayLikeToArray(o, minLen); }\r\n                    function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length)\r\n                        len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) {\r\n                        arr2[i] = arr[i];\r\n                    } return arr2; }\r\n                    function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null)\r\n                        return; var _arr = []; var _n = true; var _d = false; var _s, _e; try {\r\n                        for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\r\n                            _arr.push(_s.value);\r\n                            if (i && _arr.length === i)\r\n                                break;\r\n                        }\r\n                    }\r\n                    catch (err) {\r\n                        _d = true;\r\n                        _e = err;\r\n                    }\r\n                    finally {\r\n                        try {\r\n                            if (!_n && _i[\"return\"] != null)\r\n                                _i[\"return\"]();\r\n                        }\r\n                        finally {\r\n                            if (_d)\r\n                                throw _e;\r\n                        }\r\n                    } return _arr; }\r\n                    function _arrayWithHoles(arr) { if (Array.isArray(arr))\r\n                        return arr; }\r\n                    var assign = _dereq_('object-assign');\r\n                    var webworkify = _dereq_('webworkify');\r\n                    var MathLib = _dereq_('./lib/mathlib');\r\n                    var Pool = _dereq_('./lib/pool');\r\n                    var utils = _dereq_('./lib/utils');\r\n                    var worker = _dereq_('./lib/worker');\r\n                    var createStages = _dereq_('./lib/stepper');\r\n                    var createRegions = _dereq_('./lib/tiler'); // Deduplicate pools & limiters with the same configs\r\n                    // when user creates multiple pica instances.\r\n                    var singletones = {};\r\n                    var NEED_SAFARI_FIX = false;\r\n                    try {\r\n                        if (typeof navigator !== 'undefined' && navigator.userAgent) {\r\n                            NEED_SAFARI_FIX = navigator.userAgent.indexOf('Safari') >= 0;\r\n                        }\r\n                    }\r\n                    catch (e) { }\r\n                    var concurrency = 1;\r\n                    if (typeof navigator !== 'undefined') {\r\n                        concurrency = Math.min(navigator.hardwareConcurrency || 1, 4);\r\n                    }\r\n                    var DEFAULT_PICA_OPTS = {\r\n                        tile: 1024,\r\n                        concurrency: concurrency,\r\n                        features: ['js', 'wasm', 'ww'],\r\n                        idle: 2000,\r\n                        createCanvas: function createCanvas(width, height) {\r\n                            var tmpCanvas = document.createElement('canvas');\r\n                            tmpCanvas.width = width;\r\n                            tmpCanvas.height = height;\r\n                            return tmpCanvas;\r\n                        }\r\n                    };\r\n                    var DEFAULT_RESIZE_OPTS = {\r\n                        quality: 3,\r\n                        alpha: false,\r\n                        unsharpAmount: 0,\r\n                        unsharpRadius: 0.0,\r\n                        unsharpThreshold: 0\r\n                    };\r\n                    var CAN_NEW_IMAGE_DATA = false;\r\n                    var CAN_CREATE_IMAGE_BITMAP = false;\r\n                    var CAN_USE_CANVAS_GET_IMAGE_DATA = false;\r\n                    var CAN_USE_OFFSCREEN_CANVAS = false;\r\n                    var CAN_USE_CIB_REGION_FOR_IMAGE = false;\r\n                    function workerFabric() {\r\n                        return {\r\n                            value: webworkify(worker),\r\n                            destroy: function destroy() {\r\n                                this.value.terminate();\r\n                                if (typeof window !== 'undefined') {\r\n                                    var url = window.URL || window.webkitURL || window.mozURL || window.msURL;\r\n                                    if (url && url.revokeObjectURL && this.value.objectURL) {\r\n                                        url.revokeObjectURL(this.value.objectURL);\r\n                                    }\r\n                                }\r\n                            }\r\n                        };\r\n                    } ////////////////////////////////////////////////////////////////////////////////\r\n                    // API methods\r\n                    function Pica(options) {\r\n                        if (!(this instanceof Pica))\r\n                            return new Pica(options);\r\n                        this.options = assign({}, DEFAULT_PICA_OPTS, options || {});\r\n                        var limiter_key = \"lk_\".concat(this.options.concurrency); // Share limiters to avoid multiple parallel workers when user creates\r\n                        // multiple pica instances.\r\n                        this.__limit = singletones[limiter_key] || utils.limiter(this.options.concurrency);\r\n                        if (!singletones[limiter_key])\r\n                            singletones[limiter_key] = this.__limit; // List of supported features, according to options & browser/node.js\r\n                        this.features = {\r\n                            js: false,\r\n                            // pure JS implementation, can be disabled for testing\r\n                            wasm: false,\r\n                            // webassembly implementation for heavy functions\r\n                            cib: false,\r\n                            // resize via createImageBitmap (only FF at this moment)\r\n                            ww: false // webworkers\r\n                        };\r\n                        this.__workersPool = null; // Store requested features for webworkers\r\n                        this.__requested_features = [];\r\n                        this.__mathlib = null;\r\n                    }\r\n                    Pica.prototype.init = function () {\r\n                        var _this = this;\r\n                        if (this.__initPromise)\r\n                            return this.__initPromise; // Test if we can create ImageData without canvas and memory copy\r\n                        if (typeof ImageData !== 'undefined' && typeof Uint8ClampedArray !== 'undefined') {\r\n                            try {\r\n                                /* eslint-disable no-new */\r\n                                new ImageData(new Uint8ClampedArray(400), 10, 10);\r\n                                CAN_NEW_IMAGE_DATA = true;\r\n                            }\r\n                            catch (__) { }\r\n                        } // ImageBitmap can be effective in 2 places:\r\n                        //\r\n                        // 1. Threaded jpeg unpack (basic)\r\n                        // 2. Built-in resize (blocked due problem in chrome, see issue #89)\r\n                        //\r\n                        // For basic use we also need ImageBitmap wo support .close() method,\r\n                        // see https://developer.mozilla.org/ru/docs/Web/API/ImageBitmap\r\n                        if (typeof ImageBitmap !== 'undefined') {\r\n                            if (ImageBitmap.prototype && ImageBitmap.prototype.close) {\r\n                                CAN_CREATE_IMAGE_BITMAP = true;\r\n                            }\r\n                            else {\r\n                                this.debug('ImageBitmap does not support .close(), disabled');\r\n                            }\r\n                        }\r\n                        var features = this.options.features.slice();\r\n                        if (features.indexOf('all') >= 0) {\r\n                            features = ['cib', 'wasm', 'js', 'ww'];\r\n                        }\r\n                        this.__requested_features = features;\r\n                        this.__mathlib = new MathLib(features); // Check WebWorker support if requested\r\n                        if (features.indexOf('ww') >= 0) {\r\n                            if (typeof window !== 'undefined' && 'Worker' in window) {\r\n                                // IE <= 11 don't allow to create webworkers from string. We should check it.\r\n                                // https://connect.microsoft.com/IE/feedback/details/801810/web-workers-from-blob-urls-in-ie-10-and-11\r\n                                try {\r\n                                    var wkr = _dereq_('webworkify')(function () { });\r\n                                    wkr.terminate();\r\n                                    this.features.ww = true; // pool uniqueness depends on pool config + webworker config\r\n                                    var wpool_key = \"wp_\".concat(JSON.stringify(this.options));\r\n                                    if (singletones[wpool_key]) {\r\n                                        this.__workersPool = singletones[wpool_key];\r\n                                    }\r\n                                    else {\r\n                                        this.__workersPool = new Pool(workerFabric, this.options.idle);\r\n                                        singletones[wpool_key] = this.__workersPool;\r\n                                    }\r\n                                }\r\n                                catch (__) { }\r\n                            }\r\n                        }\r\n                        var initMath = this.__mathlib.init().then(function (mathlib) {\r\n                            // Copy detected features\r\n                            assign(_this.features, mathlib.features);\r\n                        });\r\n                        var checkCibResize;\r\n                        if (!CAN_CREATE_IMAGE_BITMAP) {\r\n                            checkCibResize = Promise.resolve(false);\r\n                        }\r\n                        else {\r\n                            checkCibResize = utils.cib_support(this.options.createCanvas).then(function (status) {\r\n                                if (_this.features.cib && features.indexOf('cib') < 0) {\r\n                                    _this.debug('createImageBitmap() resize supported, but disabled by config');\r\n                                    return;\r\n                                }\r\n                                if (features.indexOf('cib') >= 0)\r\n                                    _this.features.cib = status;\r\n                            });\r\n                        }\r\n                        CAN_USE_CANVAS_GET_IMAGE_DATA = utils.can_use_canvas(this.options.createCanvas);\r\n                        var checkOffscreenCanvas;\r\n                        if (CAN_CREATE_IMAGE_BITMAP && CAN_NEW_IMAGE_DATA && features.indexOf('ww') !== -1) {\r\n                            checkOffscreenCanvas = utils.worker_offscreen_canvas_support();\r\n                        }\r\n                        else {\r\n                            checkOffscreenCanvas = Promise.resolve(false);\r\n                        }\r\n                        checkOffscreenCanvas = checkOffscreenCanvas.then(function (result) {\r\n                            CAN_USE_OFFSCREEN_CANVAS = result;\r\n                        }); // we use createImageBitmap to crop image data and pass it to workers,\r\n                        // so need to check whether function works correctly;\r\n                        // https://bugs.chromium.org/p/chromium/issues/detail?id=1220671\r\n                        var checkCibRegion = utils.cib_can_use_region().then(function (result) {\r\n                            CAN_USE_CIB_REGION_FOR_IMAGE = result;\r\n                        }); // Init math lib. That's async because can load some\r\n                        this.__initPromise = Promise.all([initMath, checkCibResize, checkOffscreenCanvas, checkCibRegion]).then(function () {\r\n                            return _this;\r\n                        });\r\n                        return this.__initPromise;\r\n                    }; // Call resizer in webworker or locally, depending on config\r\n                    Pica.prototype.__invokeResize = function (tileOpts, opts) {\r\n                        var _this2 = this;\r\n                        // Share cache between calls:\r\n                        //\r\n                        // - wasm instance\r\n                        // - wasm memory object\r\n                        //\r\n                        opts.__mathCache = opts.__mathCache || {};\r\n                        return Promise.resolve().then(function () {\r\n                            if (!_this2.features.ww) {\r\n                                // not possible to have ImageBitmap here if user disabled WW\r\n                                return {\r\n                                    data: _this2.__mathlib.resizeAndUnsharp(tileOpts, opts.__mathCache)\r\n                                };\r\n                            }\r\n                            return new Promise(function (resolve, reject) {\r\n                                var w = _this2.__workersPool.acquire();\r\n                                if (opts.cancelToken)\r\n                                    opts.cancelToken[\"catch\"](function (err) {\r\n                                        return reject(err);\r\n                                    });\r\n                                w.value.onmessage = function (ev) {\r\n                                    w.release();\r\n                                    if (ev.data.err)\r\n                                        reject(ev.data.err);\r\n                                    else\r\n                                        resolve(ev.data);\r\n                                };\r\n                                var transfer = [];\r\n                                if (tileOpts.src)\r\n                                    transfer.push(tileOpts.src.buffer);\r\n                                if (tileOpts.srcBitmap)\r\n                                    transfer.push(tileOpts.srcBitmap);\r\n                                w.value.postMessage({\r\n                                    opts: tileOpts,\r\n                                    features: _this2.__requested_features,\r\n                                    preload: {\r\n                                        wasm_nodule: _this2.__mathlib.__\r\n                                    }\r\n                                }, transfer);\r\n                            });\r\n                        });\r\n                    }; // this function can return promise if createImageBitmap is used\r\n                    Pica.prototype.__extractTileData = function (tile, from, opts, stageEnv, extractTo) {\r\n                        if (this.features.ww && CAN_USE_OFFSCREEN_CANVAS && ( // createImageBitmap doesn't work for images (Image, ImageBitmap) with Exif orientation in Chrome,\r\n                        // can use canvas because canvas doesn't have orientation;\r\n                        // see https://bugs.chromium.org/p/chromium/issues/detail?id=1220671\r\n                        utils.isCanvas(from) || CAN_USE_CIB_REGION_FOR_IMAGE)) {\r\n                            this.debug('Create tile for OffscreenCanvas');\r\n                            return createImageBitmap(stageEnv.srcImageBitmap || from, tile.x, tile.y, tile.width, tile.height).then(function (bitmap) {\r\n                                extractTo.srcBitmap = bitmap;\r\n                                return extractTo;\r\n                            });\r\n                        } // Extract tile RGBA buffer, depending on input type\r\n                        if (utils.isCanvas(from)) {\r\n                            if (!stageEnv.srcCtx)\r\n                                stageEnv.srcCtx = from.getContext('2d', {\r\n                                    alpha: Boolean(opts.alpha)\r\n                                }); // If input is Canvas - extract region data directly\r\n                            this.debug('Get tile pixel data');\r\n                            extractTo.src = stageEnv.srcCtx.getImageData(tile.x, tile.y, tile.width, tile.height).data;\r\n                            return extractTo;\r\n                        } // If input is Image or decoded to ImageBitmap,\r\n                        // draw region to temporary canvas and extract data from it\r\n                        //\r\n                        // Note! Attempt to reuse this canvas causes significant slowdown in chrome\r\n                        //\r\n                        this.debug('Draw tile imageBitmap/image to temporary canvas');\r\n                        var tmpCanvas = this.options.createCanvas(tile.width, tile.height);\r\n                        var tmpCtx = tmpCanvas.getContext('2d', {\r\n                            alpha: Boolean(opts.alpha)\r\n                        });\r\n                        tmpCtx.globalCompositeOperation = 'copy';\r\n                        tmpCtx.drawImage(stageEnv.srcImageBitmap || from, tile.x, tile.y, tile.width, tile.height, 0, 0, tile.width, tile.height);\r\n                        this.debug('Get tile pixel data');\r\n                        extractTo.src = tmpCtx.getImageData(0, 0, tile.width, tile.height).data; // Safari 12 workaround\r\n                        // https://github.com/nodeca/pica/issues/199\r\n                        tmpCanvas.width = tmpCanvas.height = 0;\r\n                        return extractTo;\r\n                    };\r\n                    Pica.prototype.__landTileData = function (tile, result, stageEnv) {\r\n                        var toImageData;\r\n                        this.debug('Convert raw rgba tile result to ImageData');\r\n                        if (result.bitmap) {\r\n                            stageEnv.toCtx.drawImage(result.bitmap, tile.toX, tile.toY);\r\n                            return null;\r\n                        }\r\n                        if (CAN_NEW_IMAGE_DATA) {\r\n                            // this branch is for modern browsers\r\n                            // If `new ImageData()` & Uint8ClampedArray suported\r\n                            toImageData = new ImageData(new Uint8ClampedArray(result.data), tile.toWidth, tile.toHeight);\r\n                        }\r\n                        else {\r\n                            // fallback for `node-canvas` and old browsers\r\n                            // (IE11 has ImageData but does not support `new ImageData()`)\r\n                            toImageData = stageEnv.toCtx.createImageData(tile.toWidth, tile.toHeight);\r\n                            if (toImageData.data.set) {\r\n                                toImageData.data.set(result.data);\r\n                            }\r\n                            else {\r\n                                // IE9 don't have `.set()`\r\n                                for (var i = toImageData.data.length - 1; i >= 0; i--) {\r\n                                    toImageData.data[i] = result.data[i];\r\n                                }\r\n                            }\r\n                        }\r\n                        this.debug('Draw tile');\r\n                        if (NEED_SAFARI_FIX) {\r\n                            // Safari draws thin white stripes between tiles without this fix\r\n                            stageEnv.toCtx.putImageData(toImageData, tile.toX, tile.toY, tile.toInnerX - tile.toX, tile.toInnerY - tile.toY, tile.toInnerWidth + 1e-5, tile.toInnerHeight + 1e-5);\r\n                        }\r\n                        else {\r\n                            stageEnv.toCtx.putImageData(toImageData, tile.toX, tile.toY, tile.toInnerX - tile.toX, tile.toInnerY - tile.toY, tile.toInnerWidth, tile.toInnerHeight);\r\n                        }\r\n                        return null;\r\n                    };\r\n                    Pica.prototype.__tileAndResize = function (from, to, opts) {\r\n                        var _this3 = this;\r\n                        var stageEnv = {\r\n                            srcCtx: null,\r\n                            srcImageBitmap: null,\r\n                            isImageBitmapReused: false,\r\n                            toCtx: null\r\n                        };\r\n                        var processTile = function processTile(tile) {\r\n                            return _this3.__limit(function () {\r\n                                if (opts.canceled)\r\n                                    return opts.cancelToken;\r\n                                var tileOpts = {\r\n                                    width: tile.width,\r\n                                    height: tile.height,\r\n                                    toWidth: tile.toWidth,\r\n                                    toHeight: tile.toHeight,\r\n                                    scaleX: tile.scaleX,\r\n                                    scaleY: tile.scaleY,\r\n                                    offsetX: tile.offsetX,\r\n                                    offsetY: tile.offsetY,\r\n                                    quality: opts.quality,\r\n                                    alpha: opts.alpha,\r\n                                    unsharpAmount: opts.unsharpAmount,\r\n                                    unsharpRadius: opts.unsharpRadius,\r\n                                    unsharpThreshold: opts.unsharpThreshold\r\n                                };\r\n                                _this3.debug('Invoke resize math');\r\n                                return Promise.resolve(tileOpts).then(function (tileOpts) {\r\n                                    return _this3.__extractTileData(tile, from, opts, stageEnv, tileOpts);\r\n                                }).then(function (tileOpts) {\r\n                                    _this3.debug('Invoke resize math');\r\n                                    return _this3.__invokeResize(tileOpts, opts);\r\n                                }).then(function (result) {\r\n                                    if (opts.canceled)\r\n                                        return opts.cancelToken;\r\n                                    stageEnv.srcImageData = null;\r\n                                    return _this3.__landTileData(tile, result, stageEnv);\r\n                                });\r\n                            });\r\n                        }; // Need to normalize data source first. It can be canvas or image.\r\n                        // If image - try to decode in background if possible\r\n                        return Promise.resolve().then(function () {\r\n                            stageEnv.toCtx = to.getContext('2d', {\r\n                                alpha: Boolean(opts.alpha)\r\n                            });\r\n                            if (utils.isCanvas(from))\r\n                                return null;\r\n                            if (utils.isImageBitmap(from)) {\r\n                                stageEnv.srcImageBitmap = from;\r\n                                stageEnv.isImageBitmapReused = true;\r\n                                return null;\r\n                            }\r\n                            if (utils.isImage(from)) {\r\n                                // try do decode image in background for faster next operations;\r\n                                // if we're using offscreen canvas, cib is called per tile, so not needed here\r\n                                if (!CAN_CREATE_IMAGE_BITMAP)\r\n                                    return null;\r\n                                _this3.debug('Decode image via createImageBitmap');\r\n                                return createImageBitmap(from).then(function (imageBitmap) {\r\n                                    stageEnv.srcImageBitmap = imageBitmap;\r\n                                }) // Suppress error to use fallback, if method fails\r\n                                // https://github.com/nodeca/pica/issues/190\r\n                                /* eslint-disable no-unused-vars */\r\n                                [\"catch\"](function (e) {\r\n                                    return null;\r\n                                });\r\n                            }\r\n                            throw new Error('Pica: \".from\" should be Image, Canvas or ImageBitmap');\r\n                        }).then(function () {\r\n                            if (opts.canceled)\r\n                                return opts.cancelToken;\r\n                            _this3.debug('Calculate tiles'); //\r\n                            // Here we are with \"normalized\" source,\r\n                            // follow to tiling\r\n                            //\r\n                            var regions = createRegions({\r\n                                width: opts.width,\r\n                                height: opts.height,\r\n                                srcTileSize: _this3.options.tile,\r\n                                toWidth: opts.toWidth,\r\n                                toHeight: opts.toHeight,\r\n                                destTileBorder: opts.__destTileBorder\r\n                            });\r\n                            var jobs = regions.map(function (tile) {\r\n                                return processTile(tile);\r\n                            });\r\n                            function cleanup(stageEnv) {\r\n                                if (stageEnv.srcImageBitmap) {\r\n                                    if (!stageEnv.isImageBitmapReused)\r\n                                        stageEnv.srcImageBitmap.close();\r\n                                    stageEnv.srcImageBitmap = null;\r\n                                }\r\n                            }\r\n                            _this3.debug('Process tiles');\r\n                            return Promise.all(jobs).then(function () {\r\n                                _this3.debug('Finished!');\r\n                                cleanup(stageEnv);\r\n                                return to;\r\n                            }, function (err) {\r\n                                cleanup(stageEnv);\r\n                                throw err;\r\n                            });\r\n                        });\r\n                    };\r\n                    Pica.prototype.__processStages = function (stages, from, to, opts) {\r\n                        var _this4 = this;\r\n                        if (opts.canceled)\r\n                            return opts.cancelToken;\r\n                        var _stages$shift = stages.shift(), _stages$shift2 = _slicedToArray(_stages$shift, 2), toWidth = _stages$shift2[0], toHeight = _stages$shift2[1];\r\n                        var isLastStage = stages.length === 0;\r\n                        opts = assign({}, opts, {\r\n                            toWidth: toWidth,\r\n                            toHeight: toHeight,\r\n                            // only use user-defined quality for the last stage,\r\n                            // use simpler (Hamming) filter for the first stages where\r\n                            // scale factor is large enough (more than 2-3)\r\n                            quality: isLastStage ? opts.quality : Math.min(1, opts.quality)\r\n                        });\r\n                        var tmpCanvas;\r\n                        if (!isLastStage) {\r\n                            // create temporary canvas\r\n                            tmpCanvas = this.options.createCanvas(toWidth, toHeight);\r\n                        }\r\n                        return this.__tileAndResize(from, isLastStage ? to : tmpCanvas, opts).then(function () {\r\n                            if (isLastStage)\r\n                                return to;\r\n                            opts.width = toWidth;\r\n                            opts.height = toHeight;\r\n                            return _this4.__processStages(stages, tmpCanvas, to, opts);\r\n                        }).then(function (res) {\r\n                            if (tmpCanvas) {\r\n                                // Safari 12 workaround\r\n                                // https://github.com/nodeca/pica/issues/199\r\n                                tmpCanvas.width = tmpCanvas.height = 0;\r\n                            }\r\n                            return res;\r\n                        });\r\n                    };\r\n                    Pica.prototype.__resizeViaCreateImageBitmap = function (from, to, opts) {\r\n                        var _this5 = this;\r\n                        var toCtx = to.getContext('2d', {\r\n                            alpha: Boolean(opts.alpha)\r\n                        });\r\n                        this.debug('Resize via createImageBitmap()');\r\n                        return createImageBitmap(from, {\r\n                            resizeWidth: opts.toWidth,\r\n                            resizeHeight: opts.toHeight,\r\n                            resizeQuality: utils.cib_quality_name(opts.quality)\r\n                        }).then(function (imageBitmap) {\r\n                            if (opts.canceled)\r\n                                return opts.cancelToken; // if no unsharp - draw directly to output canvas\r\n                            if (!opts.unsharpAmount) {\r\n                                toCtx.drawImage(imageBitmap, 0, 0);\r\n                                imageBitmap.close();\r\n                                toCtx = null;\r\n                                _this5.debug('Finished!');\r\n                                return to;\r\n                            }\r\n                            _this5.debug('Unsharp result');\r\n                            var tmpCanvas = _this5.options.createCanvas(opts.toWidth, opts.toHeight);\r\n                            var tmpCtx = tmpCanvas.getContext('2d', {\r\n                                alpha: Boolean(opts.alpha)\r\n                            });\r\n                            tmpCtx.drawImage(imageBitmap, 0, 0);\r\n                            imageBitmap.close();\r\n                            var iData = tmpCtx.getImageData(0, 0, opts.toWidth, opts.toHeight);\r\n                            _this5.__mathlib.unsharp_mask(iData.data, opts.toWidth, opts.toHeight, opts.unsharpAmount, opts.unsharpRadius, opts.unsharpThreshold);\r\n                            toCtx.putImageData(iData, 0, 0); // Safari 12 workaround\r\n                            // https://github.com/nodeca/pica/issues/199\r\n                            tmpCanvas.width = tmpCanvas.height = 0;\r\n                            iData = tmpCtx = tmpCanvas = toCtx = null;\r\n                            _this5.debug('Finished!');\r\n                            return to;\r\n                        });\r\n                    };\r\n                    Pica.prototype.resize = function (from, to, options) {\r\n                        var _this6 = this;\r\n                        this.debug('Start resize...');\r\n                        var opts = assign({}, DEFAULT_RESIZE_OPTS);\r\n                        if (!isNaN(options)) {\r\n                            opts = assign(opts, {\r\n                                quality: options\r\n                            });\r\n                        }\r\n                        else if (options) {\r\n                            opts = assign(opts, options);\r\n                        }\r\n                        opts.toWidth = to.width;\r\n                        opts.toHeight = to.height;\r\n                        opts.width = from.naturalWidth || from.width;\r\n                        opts.height = from.naturalHeight || from.height; // Prevent stepper from infinite loop\r\n                        if (to.width === 0 || to.height === 0) {\r\n                            return Promise.reject(new Error(\"Invalid output size: \".concat(to.width, \"x\").concat(to.height)));\r\n                        }\r\n                        if (opts.unsharpRadius > 2)\r\n                            opts.unsharpRadius = 2;\r\n                        opts.canceled = false;\r\n                        if (opts.cancelToken) {\r\n                            // Wrap cancelToken to avoid successive resolve & set flag\r\n                            opts.cancelToken = opts.cancelToken.then(function (data) {\r\n                                opts.canceled = true;\r\n                                throw data;\r\n                            }, function (err) {\r\n                                opts.canceled = true;\r\n                                throw err;\r\n                            });\r\n                        }\r\n                        var DEST_TILE_BORDER = 3; // Max possible filter window size\r\n                        opts.__destTileBorder = Math.ceil(Math.max(DEST_TILE_BORDER, 2.5 * opts.unsharpRadius | 0));\r\n                        return this.init().then(function () {\r\n                            if (opts.canceled)\r\n                                return opts.cancelToken; // if createImageBitmap supports resize, just do it and return\r\n                            if (_this6.features.cib) {\r\n                                return _this6.__resizeViaCreateImageBitmap(from, to, opts);\r\n                            }\r\n                            if (!CAN_USE_CANVAS_GET_IMAGE_DATA) {\r\n                                var err = new Error('Pica: cannot use getImageData on canvas, ' + \"make sure fingerprinting protection isn't enabled\");\r\n                                err.code = 'ERR_GET_IMAGE_DATA';\r\n                                throw err;\r\n                            } //\r\n                            // No easy way, let's resize manually via arrays\r\n                            //\r\n                            var stages = createStages(opts.width, opts.height, opts.toWidth, opts.toHeight, _this6.options.tile, opts.__destTileBorder);\r\n                            return _this6.__processStages(stages, from, to, opts);\r\n                        });\r\n                    }; // RGBA buffer resize\r\n                    //\r\n                    Pica.prototype.resizeBuffer = function (options) {\r\n                        var _this7 = this;\r\n                        var opts = assign({}, DEFAULT_RESIZE_OPTS, options);\r\n                        return this.init().then(function () {\r\n                            return _this7.__mathlib.resizeAndUnsharp(opts);\r\n                        });\r\n                    };\r\n                    Pica.prototype.toBlob = function (canvas, mimeType, quality) {\r\n                        mimeType = mimeType || 'image/png';\r\n                        return new Promise(function (resolve) {\r\n                            if (canvas.toBlob) {\r\n                                canvas.toBlob(function (blob) {\r\n                                    return resolve(blob);\r\n                                }, mimeType, quality);\r\n                                return;\r\n                            }\r\n                            if (canvas.convertToBlob) {\r\n                                resolve(canvas.convertToBlob({\r\n                                    type: mimeType,\r\n                                    quality: quality\r\n                                }));\r\n                                return;\r\n                            } // Fallback for old browsers\r\n                            var asString = atob(canvas.toDataURL(mimeType, quality).split(',')[1]);\r\n                            var len = asString.length;\r\n                            var asBuffer = new Uint8Array(len);\r\n                            for (var i = 0; i < len; i++) {\r\n                                asBuffer[i] = asString.charCodeAt(i);\r\n                            }\r\n                            resolve(new Blob([asBuffer], {\r\n                                type: mimeType\r\n                            }));\r\n                        });\r\n                    };\r\n                    Pica.prototype.debug = function () { };\r\n                    module.exports = Pica;\r\n                }, { \"./lib/mathlib\": 1, \"./lib/pool\": 13, \"./lib/stepper\": 14, \"./lib/tiler\": 15, \"./lib/utils\": 16, \"./lib/worker\": 17, \"object-assign\": 23, \"webworkify\": 24 }] }, {}, [])(\"/index.js\");\r\n    });\r\n});\r\nvar image_traverse = createCommonjsModule(function (module) {\r\n    //////////////////////////////////////////////////////////////////////////\r\n    // Helpers\r\n    //\r\n    function error(message, code) {\r\n        var err = new Error(message);\r\n        err.code = code;\r\n        return err;\r\n    }\r\n    // Convert number to 0xHH string\r\n    //\r\n    function to_hex(number) {\r\n        var n = number.toString(16).toUpperCase();\r\n        for (var i = 2 - n.length; i > 0; i--)\r\n            n = '0' + n;\r\n        return '0x' + n;\r\n    }\r\n    function utf8_encode(str) {\r\n        try {\r\n            return unescape(encodeURIComponent(str));\r\n        }\r\n        catch (_) {\r\n            return str;\r\n        }\r\n    }\r\n    function utf8_decode(str) {\r\n        try {\r\n            return decodeURIComponent(escape(str));\r\n        }\r\n        catch (_) {\r\n            return str;\r\n        }\r\n    }\r\n    // Check if input is a Uint8Array\r\n    //\r\n    function is_uint8array(bin) {\r\n        return Object.prototype.toString.call(bin) === '[object Uint8Array]';\r\n    }\r\n    //////////////////////////////////////////////////////////////////////////\r\n    // Exif parser\r\n    //\r\n    // Input:\r\n    //  - jpeg_bin:   Uint8Array - jpeg file\r\n    //  - exif_start: Number     - start of TIFF header (after Exif\\0\\0)\r\n    //  - exif_end:   Number     - end of Exif segment\r\n    //  - on_entry:   Number     - callback\r\n    //\r\n    function ExifParser(jpeg_bin, exif_start, exif_end) {\r\n        // Uint8Array, exif without signature (which isn't included in offsets)\r\n        this.input = jpeg_bin.subarray(exif_start, exif_end);\r\n        // offset correction for `on_entry` callback\r\n        this.start = exif_start;\r\n        // Check TIFF header (includes byte alignment and first IFD offset)\r\n        var sig = String.fromCharCode.apply(null, this.input.subarray(0, 4));\r\n        if (sig !== 'II\\x2A\\0' && sig !== 'MM\\0\\x2A') {\r\n            throw error('invalid TIFF signature', 'EBADDATA');\r\n        }\r\n        // true if motorola (big endian) byte alignment, false if intel\r\n        this.big_endian = sig[0] === 'M';\r\n    }\r\n    ExifParser.prototype.each = function (on_entry) {\r\n        // allow premature exit\r\n        this.aborted = false;\r\n        var offset = this.read_uint32(4);\r\n        this.ifds_to_read = [{\r\n                id: 0,\r\n                offset: offset\r\n            }];\r\n        while (this.ifds_to_read.length > 0 && !this.aborted) {\r\n            var i = this.ifds_to_read.shift();\r\n            if (!i.offset)\r\n                continue;\r\n            this.scan_ifd(i.id, i.offset, on_entry);\r\n        }\r\n    };\r\n    ExifParser.prototype.filter = function (on_entry) {\r\n        var ifds = {};\r\n        // make sure IFD0 always exists\r\n        ifds.ifd0 = { id: 0, entries: [] };\r\n        this.each(function (entry) {\r\n            if (on_entry(entry) === false && !entry.is_subifd_link)\r\n                return;\r\n            if (entry.is_subifd_link && entry.count !== 1 && entry.format !== 4)\r\n                return; // filter out bogus links\r\n            if (!ifds['ifd' + entry.ifd]) {\r\n                ifds['ifd' + entry.ifd] = { id: entry.ifd, entries: [] };\r\n            }\r\n            ifds['ifd' + entry.ifd].entries.push(entry);\r\n        });\r\n        // thumbnails are not supported just yet, so delete all information related to it\r\n        delete ifds.ifd1;\r\n        // Calculate output size\r\n        var length = 8;\r\n        Object.keys(ifds).forEach(function (ifd_no) {\r\n            length += 2;\r\n            ifds[ifd_no].entries.forEach(function (entry) {\r\n                length += 12 + (entry.data_length > 4 ? Math.ceil(entry.data_length / 2) * 2 : 0);\r\n            });\r\n            length += 4;\r\n        });\r\n        this.output = new Uint8Array(length);\r\n        this.output[0] = this.output[1] = (this.big_endian ? 'M' : 'I').charCodeAt(0);\r\n        this.write_uint16(2, 0x2A);\r\n        var offset = 8;\r\n        var self = this;\r\n        this.write_uint32(4, offset);\r\n        Object.keys(ifds).forEach(function (ifd_no) {\r\n            ifds[ifd_no].written_offset = offset;\r\n            var ifd_start = offset;\r\n            var ifd_end = ifd_start + 2 + ifds[ifd_no].entries.length * 12 + 4;\r\n            offset = ifd_end;\r\n            self.write_uint16(ifd_start, ifds[ifd_no].entries.length);\r\n            ifds[ifd_no].entries.sort(function (a, b) {\r\n                // IFD entries must be in order of increasing tag IDs\r\n                return a.tag - b.tag;\r\n            }).forEach(function (entry, idx) {\r\n                var entry_offset = ifd_start + 2 + idx * 12;\r\n                self.write_uint16(entry_offset, entry.tag);\r\n                self.write_uint16(entry_offset + 2, entry.format);\r\n                self.write_uint32(entry_offset + 4, entry.count);\r\n                if (entry.is_subifd_link) {\r\n                    // filled in later\r\n                    if (ifds['ifd' + entry.tag])\r\n                        ifds['ifd' + entry.tag].link_offset = entry_offset + 8;\r\n                }\r\n                else if (entry.data_length <= 4) {\r\n                    self.output.set(self.input.subarray(entry.data_offset - self.start, entry.data_offset - self.start + 4), entry_offset + 8);\r\n                }\r\n                else {\r\n                    self.write_uint32(entry_offset + 8, offset);\r\n                    self.output.set(self.input.subarray(entry.data_offset - self.start, entry.data_offset - self.start + entry.data_length), offset);\r\n                    offset += Math.ceil(entry.data_length / 2) * 2;\r\n                }\r\n            });\r\n            var next_ifd = ifds['ifd' + (ifds[ifd_no].id + 1)];\r\n            if (next_ifd)\r\n                next_ifd.link_offset = ifd_end - 4;\r\n        });\r\n        Object.keys(ifds).forEach(function (ifd_no) {\r\n            if (ifds[ifd_no].written_offset && ifds[ifd_no].link_offset) {\r\n                self.write_uint32(ifds[ifd_no].link_offset, ifds[ifd_no].written_offset);\r\n            }\r\n        });\r\n        if (this.output.length !== offset)\r\n            throw error('internal error: incorrect buffer size allocated');\r\n        return this.output;\r\n    };\r\n    ExifParser.prototype.read_uint16 = function (offset) {\r\n        var d = this.input;\r\n        if (offset + 2 > d.length)\r\n            throw error('unexpected EOF', 'EBADDATA');\r\n        return this.big_endian ?\r\n            d[offset] * 0x100 + d[offset + 1] :\r\n            d[offset] + d[offset + 1] * 0x100;\r\n    };\r\n    ExifParser.prototype.read_uint32 = function (offset) {\r\n        var d = this.input;\r\n        if (offset + 4 > d.length)\r\n            throw error('unexpected EOF', 'EBADDATA');\r\n        return this.big_endian ?\r\n            d[offset] * 0x1000000 + d[offset + 1] * 0x10000 + d[offset + 2] * 0x100 + d[offset + 3] :\r\n            d[offset] + d[offset + 1] * 0x100 + d[offset + 2] * 0x10000 + d[offset + 3] * 0x1000000;\r\n    };\r\n    ExifParser.prototype.write_uint16 = function (offset, value) {\r\n        var d = this.output;\r\n        if (this.big_endian) {\r\n            d[offset] = (value >>> 8) & 0xFF;\r\n            d[offset + 1] = value & 0xFF;\r\n        }\r\n        else {\r\n            d[offset] = value & 0xFF;\r\n            d[offset + 1] = (value >>> 8) & 0xFF;\r\n        }\r\n    };\r\n    ExifParser.prototype.write_uint32 = function (offset, value) {\r\n        var d = this.output;\r\n        if (this.big_endian) {\r\n            d[offset] = (value >>> 24) & 0xFF;\r\n            d[offset + 1] = (value >>> 16) & 0xFF;\r\n            d[offset + 2] = (value >>> 8) & 0xFF;\r\n            d[offset + 3] = value & 0xFF;\r\n        }\r\n        else {\r\n            d[offset] = value & 0xFF;\r\n            d[offset + 1] = (value >>> 8) & 0xFF;\r\n            d[offset + 2] = (value >>> 16) & 0xFF;\r\n            d[offset + 3] = (value >>> 24) & 0xFF;\r\n        }\r\n    };\r\n    ExifParser.prototype.is_subifd_link = function (ifd, tag) {\r\n        return (ifd === 0 && tag === 0x8769) || // SubIFD\r\n            (ifd === 0 && tag === 0x8825) || // GPS Info\r\n            (ifd === 0x8769 && tag === 0xA005); // Interop IFD\r\n    };\r\n    // Returns byte length of a single component of a given format\r\n    //\r\n    ExifParser.prototype.exif_format_length = function (format) {\r\n        switch (format) {\r\n            case 1: // byte\r\n            case 2: // ascii\r\n            case 6: // sbyte\r\n            case 7: // undefined\r\n                return 1;\r\n            case 3: // short\r\n            case 8: // sshort\r\n                return 2;\r\n            case 4: // long\r\n            case 9: // slong\r\n            case 11: // float\r\n                return 4;\r\n            case 5: // rational\r\n            case 10: // srational\r\n            case 12: // double\r\n                return 8;\r\n            default:\r\n                // unknown type\r\n                return 0;\r\n        }\r\n    };\r\n    // Reads Exif data\r\n    //\r\n    ExifParser.prototype.exif_format_read = function (format, offset) {\r\n        var v;\r\n        switch (format) {\r\n            case 1: // byte\r\n            case 2: // ascii\r\n                v = this.input[offset];\r\n                return v;\r\n            case 6: // sbyte\r\n                v = this.input[offset];\r\n                return v | (v & 0x80) * 0x1fffffe;\r\n            case 3: // short\r\n                v = this.read_uint16(offset);\r\n                return v;\r\n            case 8: // sshort\r\n                v = this.read_uint16(offset);\r\n                return v | (v & 0x8000) * 0x1fffe;\r\n            case 4: // long\r\n                v = this.read_uint32(offset);\r\n                return v;\r\n            case 9: // slong\r\n                v = this.read_uint32(offset);\r\n                return v | 0;\r\n            case 5: // rational\r\n            case 10: // srational\r\n            case 11: // float\r\n            case 12: // double\r\n                return null; // not implemented\r\n            case 7: // undefined\r\n                return null; // blob\r\n            default:\r\n                // unknown type\r\n                return null;\r\n        }\r\n    };\r\n    ExifParser.prototype.scan_ifd = function (ifd_no, offset, on_entry) {\r\n        var entry_count = this.read_uint16(offset);\r\n        offset += 2;\r\n        for (var i = 0; i < entry_count; i++) {\r\n            var tag = this.read_uint16(offset);\r\n            var format = this.read_uint16(offset + 2);\r\n            var count = this.read_uint32(offset + 4);\r\n            var comp_length = this.exif_format_length(format);\r\n            var data_length = count * comp_length;\r\n            var data_offset = data_length <= 4 ? offset + 8 : this.read_uint32(offset + 8);\r\n            var is_subifd_link = false;\r\n            if (data_offset + data_length > this.input.length) {\r\n                throw error('unexpected EOF', 'EBADDATA');\r\n            }\r\n            var value = [];\r\n            var comp_offset = data_offset;\r\n            for (var j = 0; j < count; j++, comp_offset += comp_length) {\r\n                var item = this.exif_format_read(format, comp_offset);\r\n                if (item === null) {\r\n                    value = null;\r\n                    break;\r\n                }\r\n                value.push(item);\r\n            }\r\n            if (Array.isArray(value) && format === 2) {\r\n                try {\r\n                    value = utf8_decode(String.fromCharCode.apply(null, value));\r\n                }\r\n                catch (_) {\r\n                    value = null;\r\n                }\r\n                if (value && value[value.length - 1] === '\\0')\r\n                    value = value.slice(0, -1);\r\n            }\r\n            if (this.is_subifd_link(ifd_no, tag)) {\r\n                if (Array.isArray(value) && Number.isInteger(value[0]) && value[0] > 0) {\r\n                    this.ifds_to_read.push({\r\n                        id: tag,\r\n                        offset: value[0]\r\n                    });\r\n                    is_subifd_link = true;\r\n                }\r\n            }\r\n            var entry = {\r\n                is_big_endian: this.big_endian,\r\n                ifd: ifd_no,\r\n                tag: tag,\r\n                format: format,\r\n                count: count,\r\n                entry_offset: offset + this.start,\r\n                data_length: data_length,\r\n                data_offset: data_offset + this.start,\r\n                value: value,\r\n                is_subifd_link: is_subifd_link\r\n            };\r\n            if (on_entry(entry) === false) {\r\n                this.aborted = true;\r\n                return;\r\n            }\r\n            offset += 12;\r\n        }\r\n        if (ifd_no === 0) {\r\n            this.ifds_to_read.push({\r\n                id: 1,\r\n                offset: this.read_uint32(offset)\r\n            });\r\n        }\r\n    };\r\n    // Check whether input is a JPEG image\r\n    //\r\n    // Input:\r\n    //  - jpeg_bin: Uint8Array - jpeg file\r\n    //\r\n    // Returns true if it is and false otherwise\r\n    //\r\n    module.exports.is_jpeg = function (jpeg_bin) {\r\n        return jpeg_bin.length >= 4 && jpeg_bin[0] === 0xFF && jpeg_bin[1] === 0xD8 && jpeg_bin[2] === 0xFF;\r\n    };\r\n    // Call an iterator on each segment in the given JPEG image\r\n    //\r\n    // Input:\r\n    //  - jpeg_bin:   Uint8Array - jpeg file\r\n    //  - on_segment: Function - callback executed on each JPEG marker segment\r\n    //    - segment:  Object\r\n    //      - code:   Number - marker type (2nd byte, e.g. 0xE0 for APP0)\r\n    //      - offset: Number - offset of the first byte (0xFF) relative to `jpeg_bin` start\r\n    //      - length: Number - length of the entire marker segment including first two bytes and length\r\n    //        - 2 for standalone markers\r\n    //        - 4+length for markers with data\r\n    //\r\n    // Iteration stops when `EOI` (0xFFD9) marker is reached or if `on_segment`\r\n    // function returns `false`.\r\n    //\r\n    module.exports.jpeg_segments_each = function (jpeg_bin, on_segment) {\r\n        if (!is_uint8array(jpeg_bin)) {\r\n            throw error('Invalid argument (jpeg_bin), Uint8Array expected', 'EINVAL');\r\n        }\r\n        if (typeof on_segment !== 'function') {\r\n            throw error('Invalid argument (on_segment), Function expected', 'EINVAL');\r\n        }\r\n        if (!module.exports.is_jpeg(jpeg_bin)) {\r\n            throw error('Unknown file format', 'ENOTJPEG');\r\n        }\r\n        var offset = 0, length = jpeg_bin.length, inside_scan = false;\r\n        for (;;) {\r\n            var segment_code, segment_length;\r\n            if (offset + 1 >= length)\r\n                throw error('Unexpected EOF', 'EBADDATA');\r\n            var byte1 = jpeg_bin[offset];\r\n            var byte2 = jpeg_bin[offset + 1];\r\n            if (byte1 === 0xFF && byte2 === 0xFF) {\r\n                // padding\r\n                segment_code = 0xFF;\r\n                segment_length = 1;\r\n            }\r\n            else if (byte1 === 0xFF && byte2 !== 0) {\r\n                // marker\r\n                segment_code = byte2;\r\n                segment_length = 2;\r\n                if ((0xD0 <= segment_code && segment_code <= 0xD9) || segment_code === 0x01)\r\n                    ;\r\n                else {\r\n                    if (offset + 3 >= length)\r\n                        throw error('Unexpected EOF', 'EBADDATA');\r\n                    segment_length += jpeg_bin[offset + 2] * 0x100 + jpeg_bin[offset + 3];\r\n                    if (segment_length < 2)\r\n                        throw error('Invalid segment length', 'EBADDATA');\r\n                    if (offset + segment_length - 1 >= length)\r\n                        throw error('Unexpected EOF', 'EBADDATA');\r\n                }\r\n                if (inside_scan) {\r\n                    if (segment_code >= 0xD0 && segment_code <= 0xD7)\r\n                        ;\r\n                    else {\r\n                        inside_scan = false;\r\n                    }\r\n                }\r\n                if (segment_code === 0xDA /* SOS */)\r\n                    inside_scan = true;\r\n            }\r\n            else if (inside_scan) {\r\n                // entropy-encoded segment\r\n                for (var pos = offset + 1;; pos++) {\r\n                    // scan until we find FF\r\n                    if (pos >= length)\r\n                        throw error('Unexpected EOF', 'EBADDATA');\r\n                    if (jpeg_bin[pos] === 0xFF) {\r\n                        if (pos + 1 >= length)\r\n                            throw error('Unexpected EOF', 'EBADDATA');\r\n                        if (jpeg_bin[pos + 1] !== 0) {\r\n                            segment_code = 0;\r\n                            segment_length = pos - offset;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                throw error('Unexpected byte at segment start: ' + to_hex(byte1) +\r\n                    ' (offset ' + to_hex(offset) + ')', 'EBADDATA');\r\n            }\r\n            if (on_segment({ code: segment_code, offset: offset, length: segment_length }) === false)\r\n                break;\r\n            if (segment_code === 0xD9 /* EOI */)\r\n                break;\r\n            offset += segment_length;\r\n        }\r\n    };\r\n    // Replace or remove segments in the given JPEG image\r\n    //\r\n    // Input:\r\n    //  - jpeg_bin:   Uint8Array - jpeg file\r\n    //  - on_segment: Function - callback executed on each JPEG marker segment\r\n    //    - segment:  Object\r\n    //      - code:   Number - marker type (2nd byte, e.g. 0xE0 for APP0)\r\n    //      - offset: Number - offset of the first byte (0xFF) relative to `jpeg_bin` start\r\n    //      - length: Number - length of the entire marker segment including first two bytes and length\r\n    //        - 2 for standalone markers\r\n    //        - 4+length for markers with data\r\n    //\r\n    // `on_segment` function should return one of the following:\r\n    //  - `false`        - segment is removed from the output\r\n    //  - Uint8Array     - segment is replaced with the new data\r\n    //  - [ Uint8Array ] - segment is replaced with the new data\r\n    //  - anything else  - segment is copied to the output as is\r\n    //\r\n    // Any data after `EOI` (0xFFD9) marker is removed.\r\n    //\r\n    module.exports.jpeg_segments_filter = function (jpeg_bin, on_segment) {\r\n        if (!is_uint8array(jpeg_bin)) {\r\n            throw error('Invalid argument (jpeg_bin), Uint8Array expected', 'EINVAL');\r\n        }\r\n        if (typeof on_segment !== 'function') {\r\n            throw error('Invalid argument (on_segment), Function expected', 'EINVAL');\r\n        }\r\n        var ranges = [];\r\n        var out_length = 0;\r\n        module.exports.jpeg_segments_each(jpeg_bin, function (segment) {\r\n            var new_segment = on_segment(segment);\r\n            if (is_uint8array(new_segment)) {\r\n                ranges.push({ data: new_segment });\r\n                out_length += new_segment.length;\r\n            }\r\n            else if (Array.isArray(new_segment)) {\r\n                new_segment.filter(is_uint8array).forEach(function (s) {\r\n                    ranges.push({ data: s });\r\n                    out_length += s.length;\r\n                });\r\n            }\r\n            else if (new_segment !== false) {\r\n                var new_range = { start: segment.offset, end: segment.offset + segment.length };\r\n                if (ranges.length > 0 && ranges[ranges.length - 1].end === new_range.start) {\r\n                    ranges[ranges.length - 1].end = new_range.end;\r\n                }\r\n                else {\r\n                    ranges.push(new_range);\r\n                }\r\n                out_length += segment.length;\r\n            }\r\n        });\r\n        var result = new Uint8Array(out_length);\r\n        var offset = 0;\r\n        ranges.forEach(function (range) {\r\n            var data = range.data || jpeg_bin.subarray(range.start, range.end);\r\n            result.set(data, offset);\r\n            offset += data.length;\r\n        });\r\n        return result;\r\n    };\r\n    // Call an iterator on each Exif entry in the given JPEG image\r\n    //\r\n    // Input:\r\n    //  - jpeg_bin: Uint8Array - jpeg file\r\n    //  - on_entry: Function - callback executed on each Exif entry\r\n    //    - entry:  Object\r\n    //      - is_big_endian:  Boolean - whether Exif uses big or little endian byte alignment\r\n    //      - ifd:            Number  - IFD identifier (0 for IFD0, 1 for IFD1, 0x8769 for SubIFD,\r\n    //                                 0x8825 for GPS Info, 0xA005 for Interop IFD)\r\n    //      - tag:            Number  - exif entry tag (0x0110 - camera name, 0x0112 - orientation, etc. - see Exif spec)\r\n    //      - format:         Number  - exif entry format (1 - byte, 2 - ascii, 3 - short, etc. - see Exif spec)\r\n    //      - count:          Number  - number of components of the given format inside data\r\n    //                                 (usually 1, or string length for ascii format)\r\n    //      - entry_offset:   Number  - start of Exif entry (entry length is always 12, so not included)\r\n    //      - data_offset:    Number  - start of data attached to Exif entry (will overlap with entry if length <= 4)\r\n    //      - data_length:    Number  - length of data attached to Exif entry\r\n    //      - value:          Array|String|Null - our best attempt at parsing data (not all formats supported right now)\r\n    //      - is_subifd_link: Boolean - whether this entry is recognized to be a link to subifd (can't filter these out)\r\n    //\r\n    // Iteration stops early if iterator returns `false`.\r\n    //\r\n    // If Exif wasn't found anywhere (before start of the image data, SOS),\r\n    // iterator is never executed.\r\n    //\r\n    module.exports.jpeg_exif_tags_each = function (jpeg_bin, on_exif_entry) {\r\n        if (!is_uint8array(jpeg_bin)) {\r\n            throw error('Invalid argument (jpeg_bin), Uint8Array expected', 'EINVAL');\r\n        }\r\n        if (typeof on_exif_entry !== 'function') {\r\n            throw error('Invalid argument (on_exif_entry), Function expected', 'EINVAL');\r\n        }\r\n        /* eslint-disable consistent-return */\r\n        module.exports.jpeg_segments_each(jpeg_bin, function (segment) {\r\n            if (segment.code === 0xDA /* SOS */)\r\n                return false;\r\n            // look for APP1 segment and compare header with 'Exif\\0\\0'\r\n            if (segment.code === 0xE1 && segment.length >= 10 &&\r\n                jpeg_bin[segment.offset + 4] === 0x45 && jpeg_bin[segment.offset + 5] === 0x78 &&\r\n                jpeg_bin[segment.offset + 6] === 0x69 && jpeg_bin[segment.offset + 7] === 0x66 &&\r\n                jpeg_bin[segment.offset + 8] === 0x00 && jpeg_bin[segment.offset + 9] === 0x00) {\r\n                new ExifParser(jpeg_bin, segment.offset + 10, segment.offset + segment.length).each(on_exif_entry);\r\n                return false;\r\n            }\r\n        });\r\n    };\r\n    // Remove Exif entries in the given JPEG image\r\n    //\r\n    // Input:\r\n    //  - jpeg_bin: Uint8Array - jpeg file\r\n    //  - on_entry: Function - callback executed on each Exif entry\r\n    //    - entry:  Object\r\n    //      - is_big_endian:  Boolean - whether Exif uses big or little endian byte alignment\r\n    //      - ifd:            Number  - IFD identifier (0 for IFD0, 1 for IFD1, 0x8769 for SubIFD,\r\n    //                                  0x8825 for GPS Info, 0xA005 for Interop IFD)\r\n    //      - tag:            Number  - exif entry tag (0x0110 - camera name, 0x0112 - orientation, etc. - see Exif spec)\r\n    //      - format:         Number  - exif entry format (1 - byte, 2 - ascii, 3 - short, etc. - see Exif spec)\r\n    //      - count:          Number  - number of components of the given format inside data\r\n    //                                  (usually 1, or string length for ascii format)\r\n    //      - entry_offset:   Number  - start of Exif entry (entry length is always 12, so not included)\r\n    //      - data_offset:    Number  - start of data attached to Exif entry (will overlap with entry if length <= 4)\r\n    //      - data_length:    Number  - length of data attached to Exif entry\r\n    //      - value:          Array|String|Null - our best attempt at parsing data (not all formats supported right now)\r\n    //      - is_subifd_link: Boolean - whether this entry is recognized to be a link to subifd (can't filter these out)\r\n    //\r\n    // This function removes following from Exif:\r\n    //  - all entries where iterator returned false (except subifd links which are mandatory)\r\n    //  - IFD1 and thumbnail image (the purpose of this function is to reduce file size,\r\n    //    so thumbnail is usually the first thing to go)\r\n    //  - all other data that isn't in IFD0, SubIFD, GPSIFD, InteropIFD\r\n    //    (theoretically possible proprietary extensions, I haven't seen any of these yet)\r\n    //\r\n    // Changing data inside Exif entries is NOT supported yet (modifying `entry` object inside callback may break stuff).\r\n    //\r\n    // If Exif wasn't found anywhere (before start of the image data, SOS),\r\n    // iterator is never executed, and original JPEG is returned as is.\r\n    //\r\n    module.exports.jpeg_exif_tags_filter = function (jpeg_bin, on_exif_entry) {\r\n        if (!is_uint8array(jpeg_bin)) {\r\n            throw error('Invalid argument (jpeg_bin), Uint8Array expected', 'EINVAL');\r\n        }\r\n        if (typeof on_exif_entry !== 'function') {\r\n            throw error('Invalid argument (on_exif_entry), Function expected', 'EINVAL');\r\n        }\r\n        var stop_search = false;\r\n        return module.exports.jpeg_segments_filter(jpeg_bin, function (segment) {\r\n            if (stop_search)\r\n                return;\r\n            if (segment.code === 0xDA /* SOS */)\r\n                stop_search = true;\r\n            // look for APP1 segment and compare header with 'Exif\\0\\0'\r\n            if (segment.code === 0xE1 && segment.length >= 10 &&\r\n                jpeg_bin[segment.offset + 4] === 0x45 && jpeg_bin[segment.offset + 5] === 0x78 &&\r\n                jpeg_bin[segment.offset + 6] === 0x69 && jpeg_bin[segment.offset + 7] === 0x66 &&\r\n                jpeg_bin[segment.offset + 8] === 0x00 && jpeg_bin[segment.offset + 9] === 0x00) {\r\n                var new_exif = new ExifParser(jpeg_bin, segment.offset + 10, segment.offset + segment.length)\r\n                    .filter(on_exif_entry);\r\n                if (!new_exif)\r\n                    return false;\r\n                var header = new Uint8Array(10);\r\n                header.set(jpeg_bin.slice(segment.offset, segment.offset + 10));\r\n                header[2] = ((new_exif.length + 8) >>> 8) & 0xFF;\r\n                header[3] = (new_exif.length + 8) & 0xFF;\r\n                stop_search = true;\r\n                return [header, new_exif];\r\n            }\r\n        });\r\n    };\r\n    // Inserts a custom comment marker segment into JPEG file.\r\n    //\r\n    // Input:\r\n    //  - jpeg_bin: Uint8Array - jpeg file\r\n    //  - comment:  String\r\n    //\r\n    // Comment is inserted after first two bytes (FFD8, SOI).\r\n    //\r\n    // If JFIF (APP0) marker exists immediately after SOI (as mandated by the JFIF\r\n    // spec), we insert comment after it instead.\r\n    //\r\n    module.exports.jpeg_add_comment = function (jpeg_bin, comment) {\r\n        var comment_inserted = false, segment_count = 0;\r\n        return module.exports.jpeg_segments_filter(jpeg_bin, function (segment) {\r\n            segment_count++;\r\n            if (segment_count === 1 && segment.code === 0xD8 /* SOI  */)\r\n                return;\r\n            if (segment_count === 2 && segment.code === 0xE0 /* APP0 */)\r\n                return;\r\n            if (comment_inserted)\r\n                return;\r\n            comment = utf8_encode(comment);\r\n            // comment segment\r\n            var csegment = new Uint8Array(5 + comment.length);\r\n            var offset = 0;\r\n            csegment[offset++] = 0xFF;\r\n            csegment[offset++] = 0xFE;\r\n            csegment[offset++] = ((comment.length + 3) >>> 8) & 0xFF;\r\n            csegment[offset++] = (comment.length + 3) & 0xFF;\r\n            comment.split('').forEach(function (c) {\r\n                csegment[offset++] = c.charCodeAt(0) & 0xFF;\r\n            });\r\n            csegment[offset++] = 0;\r\n            comment_inserted = true;\r\n            return [csegment, jpeg_bin.subarray(segment.offset, segment.offset + segment.length)];\r\n        });\r\n    };\r\n});\r\nfunction jpeg_patch_exif(env) {\r\n    return this._getUint8Array(env.blob).then(function (data) {\r\n        env.is_jpeg = image_traverse.is_jpeg(data);\r\n        if (!env.is_jpeg)\r\n            return Promise.resolve(env);\r\n        env.orig_blob = env.blob;\r\n        try {\r\n            var exif_is_big_endian, orientation_offset;\r\n            /* eslint-disable consistent-return */\r\n            image_traverse.jpeg_exif_tags_each(data, function (entry) {\r\n                if (entry.ifd === 0 && entry.tag === 0x112 && Array.isArray(entry.value)) {\r\n                    env.orientation = entry.value[0] || 1;\r\n                    exif_is_big_endian = entry.is_big_endian;\r\n                    orientation_offset = entry.data_offset;\r\n                    return false;\r\n                }\r\n            });\r\n            if (orientation_offset) {\r\n                var orientation_patch = exif_is_big_endian ?\r\n                    new Uint8Array([0, 1]) :\r\n                    new Uint8Array([1, 0]);\r\n                env.blob = new Blob([\r\n                    data.slice(0, orientation_offset),\r\n                    orientation_patch,\r\n                    data.slice(orientation_offset + 2)\r\n                ], { type: 'image/jpeg' });\r\n            }\r\n        }\r\n        catch (_) { }\r\n        return env;\r\n    });\r\n}\r\nfunction jpeg_rotate_canvas(env) {\r\n    if (!env.is_jpeg)\r\n        return Promise.resolve(env);\r\n    var orientation = env.orientation - 1;\r\n    if (!orientation)\r\n        return Promise.resolve(env);\r\n    var canvas;\r\n    if (orientation & 4) {\r\n        canvas = this.pica.options.createCanvas(env.out_canvas.height, env.out_canvas.width);\r\n    }\r\n    else {\r\n        canvas = this.pica.options.createCanvas(env.out_canvas.width, env.out_canvas.height);\r\n    }\r\n    var ctx = canvas.getContext('2d');\r\n    ctx.save();\r\n    if (orientation & 1)\r\n        ctx.transform(-1, 0, 0, 1, canvas.width, 0);\r\n    if (orientation & 2)\r\n        ctx.transform(-1, 0, 0, -1, canvas.width, canvas.height);\r\n    if (orientation & 4)\r\n        ctx.transform(0, 1, 1, 0, 0, 0);\r\n    ctx.drawImage(env.out_canvas, 0, 0);\r\n    ctx.restore();\r\n    // Safari 12 workaround\r\n    // https://github.com/nodeca/pica/issues/199\r\n    env.out_canvas.width = env.out_canvas.height = 0;\r\n    env.out_canvas = canvas;\r\n    return Promise.resolve(env);\r\n}\r\nfunction jpeg_attach_orig_segments(env) {\r\n    if (!env.is_jpeg)\r\n        return Promise.resolve(env);\r\n    return Promise.all([\r\n        this._getUint8Array(env.blob),\r\n        this._getUint8Array(env.out_blob)\r\n    ]).then(function (res) {\r\n        var data = res[0];\r\n        var data_out = res[1];\r\n        if (!image_traverse.is_jpeg(data))\r\n            return Promise.resolve(env);\r\n        var segments = [];\r\n        image_traverse.jpeg_segments_each(data, function (segment) {\r\n            if (segment.code === 0xDA /* SOS */)\r\n                return false;\r\n            segments.push(segment);\r\n        });\r\n        segments = segments\r\n            .filter(function (segment) {\r\n            // Drop ICC_PROFILE\r\n            //\r\n            if (segment.code === 0xE2)\r\n                return false;\r\n            // Keep all APPn segments excluding APP2 (ICC_PROFILE),\r\n            // remove others because most of them depend on image data (DCT and such).\r\n            //\r\n            // APP0 - JFIF, APP1 - Exif, the rest are photoshop metadata and such\r\n            //\r\n            // See full list at https://www.w3.org/Graphics/JPEG/itu-t81.pdf (table B.1 on page 32)\r\n            //\r\n            if (segment.code >= 0xE0 && segment.code < 0xF0)\r\n                return true;\r\n            // Keep comments\r\n            //\r\n            if (segment.code === 0xFE)\r\n                return true;\r\n            return false;\r\n        })\r\n            .map(function (segment) {\r\n            return data.slice(segment.offset, segment.offset + segment.length);\r\n        });\r\n        env.out_blob = new Blob(\r\n        // intentionally omitting expected JFIF segment (offset 2 to 20)\r\n        [data_out.slice(0, 2)].concat(segments).concat([data_out.slice(20)]), { type: 'image/jpeg' });\r\n        return env;\r\n    });\r\n}\r\nfunction assign(reducer) {\r\n    reducer.before('_blob_to_image', jpeg_patch_exif);\r\n    reducer.after('_transform', jpeg_rotate_canvas);\r\n    reducer.after('_create_blob', jpeg_attach_orig_segments);\r\n}\r\nvar jpeg_patch_exif_1 = jpeg_patch_exif;\r\nvar jpeg_rotate_canvas_1 = jpeg_rotate_canvas;\r\nvar jpeg_attach_orig_segments_1 = jpeg_attach_orig_segments;\r\nvar assign_1 = assign;\r\nvar jpeg_plugins = {\r\n    jpeg_patch_exif: jpeg_patch_exif_1,\r\n    jpeg_rotate_canvas: jpeg_rotate_canvas_1,\r\n    jpeg_attach_orig_segments: jpeg_attach_orig_segments_1,\r\n    assign: assign_1\r\n};\r\nfunction ImageBlobReduce(options) {\r\n    if (!(this instanceof ImageBlobReduce))\r\n        return new ImageBlobReduce(options);\r\n    options = options || {};\r\n    this.pica = options.pica || pica({});\r\n    this.initialized = false;\r\n    this.utils = utils;\r\n}\r\nImageBlobReduce.prototype.use = function (plugin /*, params, ... */) {\r\n    var args = [this].concat(Array.prototype.slice.call(arguments, 1));\r\n    plugin.apply(plugin, args);\r\n    return this;\r\n};\r\nImageBlobReduce.prototype.init = function () {\r\n    this.use(jpeg_plugins.assign);\r\n};\r\nImageBlobReduce.prototype.toBlob = function (blob, options) {\r\n    var opts = utils.assign({ max: Infinity }, options);\r\n    var env = {\r\n        blob: blob,\r\n        opts: opts\r\n    };\r\n    if (!this.initialized) {\r\n        this.init();\r\n        this.initialized = true;\r\n    }\r\n    return Promise.resolve(env)\r\n        .then(this._blob_to_image)\r\n        .then(this._calculate_size)\r\n        .then(this._transform)\r\n        .then(this._cleanup)\r\n        .then(this._create_blob)\r\n        .then(function (_env) {\r\n        // Safari 12 workaround\r\n        // https://github.com/nodeca/pica/issues/199\r\n        _env.out_canvas.width = _env.out_canvas.height = 0;\r\n        return _env.out_blob;\r\n    });\r\n};\r\nImageBlobReduce.prototype.toCanvas = function (blob, options) {\r\n    var opts = utils.assign({ max: Infinity }, options);\r\n    var env = {\r\n        blob: blob,\r\n        opts: opts\r\n    };\r\n    if (!this.initialized) {\r\n        this.init();\r\n        this.initialized = true;\r\n    }\r\n    return Promise.resolve(env)\r\n        .then(this._blob_to_image)\r\n        .then(this._calculate_size)\r\n        .then(this._transform)\r\n        .then(this._cleanup)\r\n        .then(function (_env) { return _env.out_canvas; });\r\n};\r\nImageBlobReduce.prototype.before = function (method_name, fn) {\r\n    if (!this[method_name])\r\n        throw new Error('Method \"' + method_name + '\" does not exist');\r\n    if (typeof fn !== 'function')\r\n        throw new Error('Invalid argument \"fn\", function expected');\r\n    var old_fn = this[method_name];\r\n    var self = this;\r\n    this[method_name] = function (env) {\r\n        return fn.call(self, env).then(function (_env) {\r\n            return old_fn.call(self, _env);\r\n        });\r\n    };\r\n    return this;\r\n};\r\nImageBlobReduce.prototype.after = function (method_name, fn) {\r\n    if (!this[method_name])\r\n        throw new Error('Method \"' + method_name + '\" does not exist');\r\n    if (typeof fn !== 'function')\r\n        throw new Error('Invalid argument \"fn\", function expected');\r\n    var old_fn = this[method_name];\r\n    var self = this;\r\n    this[method_name] = function (env) {\r\n        return old_fn.call(self, env).then(function (_env) {\r\n            return fn.call(self, _env);\r\n        });\r\n    };\r\n    return this;\r\n};\r\nImageBlobReduce.prototype._blob_to_image = function (env) {\r\n    var URL = window.URL || window.webkitURL || window.mozURL || window.msURL;\r\n    env.image = document.createElement('img');\r\n    env.image_url = URL.createObjectURL(env.blob);\r\n    env.image.src = env.image_url;\r\n    return new Promise(function (resolve, reject) {\r\n        env.image.onerror = function () { reject(new Error('ImageBlobReduce: failed to create Image() from blob')); };\r\n        env.image.onload = function () { resolve(env); };\r\n    });\r\n};\r\nImageBlobReduce.prototype._calculate_size = function (env) {\r\n    //\r\n    // Note, if your need not \"symmetric\" resize logic, you MUST check\r\n    // `env.orientation` (set by plugins) and swap width/height appropriately.\r\n    //\r\n    var scale_factor = env.opts.max / Math.max(env.image.width, env.image.height);\r\n    if (scale_factor > 1)\r\n        scale_factor = 1;\r\n    env.transform_width = Math.max(Math.round(env.image.width * scale_factor), 1);\r\n    env.transform_height = Math.max(Math.round(env.image.height * scale_factor), 1);\r\n    // Info for user plugins, to check if scaling applied\r\n    env.scale_factor = scale_factor;\r\n    return Promise.resolve(env);\r\n};\r\nImageBlobReduce.prototype._transform = function (env) {\r\n    env.out_canvas = this.pica.options.createCanvas(env.transform_width, env.transform_height);\r\n    // Dim env temporary vars to prohibit use and avoid confusion when orientation\r\n    // changed. You should take real size from canvas.\r\n    env.transform_width = null;\r\n    env.transform_height = null;\r\n    // By default use alpha for png only\r\n    var pica_opts = { alpha: env.blob.type === 'image/png' };\r\n    // Extract pica options if been passed\r\n    this.utils.assign(pica_opts, this.utils.pick_pica_resize_options(env.opts));\r\n    return this.pica\r\n        .resize(env.image, env.out_canvas, pica_opts)\r\n        .then(function () { return env; });\r\n};\r\nImageBlobReduce.prototype._cleanup = function (env) {\r\n    env.image.src = '';\r\n    env.image = null;\r\n    var URL = window.URL || window.webkitURL || window.mozURL || window.msURL;\r\n    if (URL.revokeObjectURL)\r\n        URL.revokeObjectURL(env.image_url);\r\n    env.image_url = null;\r\n    return Promise.resolve(env);\r\n};\r\nImageBlobReduce.prototype._create_blob = function (env) {\r\n    return this.pica.toBlob(env.out_canvas, env.blob.type)\r\n        .then(function (blob) {\r\n        env.out_blob = blob;\r\n        return env;\r\n    });\r\n};\r\nImageBlobReduce.prototype._getUint8Array = function (blob) {\r\n    if (blob.arrayBuffer) {\r\n        return blob.arrayBuffer().then(function (buf) {\r\n            return new Uint8Array(buf);\r\n        });\r\n    }\r\n    return new Promise(function (resolve, reject) {\r\n        var fr = new FileReader();\r\n        fr.readAsArrayBuffer(blob);\r\n        fr.onload = function () { resolve(new Uint8Array(fr.result)); };\r\n        fr.onerror = function () {\r\n            reject(new Error('ImageBlobReduce: failed to load data from input blob'));\r\n            fr.abort();\r\n        };\r\n        fr.onabort = function () {\r\n            reject(new Error('ImageBlobReduce: failed to load data from input blob (aborted)'));\r\n        };\r\n    });\r\n};\r\nImageBlobReduce.pica = pica;\r\nvar imageBlobReduce = ImageBlobReduce;\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (imageBlobReduce);\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../../node_modules/image-blob-reduce/dist/image-blob-reduce.esm.mjs\n");

/***/ })

}]);